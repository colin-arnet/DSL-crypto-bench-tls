{
    "schema": "vitis_libraries_api_list_schema-1.0",
    "api_list": [
        {
            "api_name": "xf::compression::blockPacker",
            "spec": {
                "schema": "vitis_libraries_api_list_schema-1.0",
                "api_name": "xf::compression::blockPacker",
                "display_name": "blockPacker",
                "brief": "Compression Packer module packs the compressed data.",
                "target_domain": "",
                "header_file_name": [
                    "block_packer.hpp"
                ],
                "search_paths": [
                    "L1/include/hw"
                ],
                "instance": "function",
                "parameters": [
                    {
                        "name": "DATAWIDTH",
                        "type": "int",
                        "description": "input data width"
                    }
                ],
                "ports": [
                    {
                        "name": "inStream",
                        "direction": "",
                        "type": "hls::stream< ap_uint< DATAWIDTH > > &Size,"
                    },
                    {
                        "name": "outStream",
                        "direction": "",
                        "type": "hls::stream< ap_uint< DATAWIDTH > > &Eos,"
                    },
                    {
                        "name": "inStreamSize",
                        "direction": "",
                        "type": "hls::stream< uint32_t > &outCompressedSi"
                    },
                    {
                        "name": "outStreamEos",
                        "direction": "",
                        "type": "hls::stream< uint32_t > &outCompressedSi"
                    },
                    {
                        "name": "outCompressedSize",
                        "direction": "",
                        "type": "hls::stream< uint32_t > &outCompressedSi"
                    }
                ]
            }
        },
        {
            "api_name": "xf::compression::adler32_mm",
            "spec": {
                "schema": "vitis_libraries_api_list_schema-1.0",
                "api_name": "xf::compression::adler32_mm",
                "display_name": "adler32_mm",
                "brief": "",
                "target_domain": "",
                "header_file_name": [
                    "checksum_wrapper.hpp"
                ],
                "search_paths": [
                    "L1/include/hw"
                ],
                "instance": "function",
                "parameters": [
                    {
                        "name": "PARALLEL_BYTE",
                        "type": "int"
                    }
                ],
                "ports": []
            }
        },
        {
            "api_name": "xf::compression::crc32_mm",
            "spec": {
                "schema": "vitis_libraries_api_list_schema-1.0",
                "api_name": "xf::compression::crc32_mm",
                "display_name": "crc32_mm",
                "brief": "",
                "target_domain": "",
                "header_file_name": [
                    "checksum_wrapper.hpp"
                ],
                "search_paths": [
                    "L1/include/hw"
                ],
                "instance": "function",
                "parameters": [
                    {
                        "name": "PARALLEL_BYTE",
                        "type": "int"
                    }
                ],
                "ports": []
            }
        },
        {
            "api_name": "xf::compression::checksum32",
            "spec": {
                "schema": "vitis_libraries_api_list_schema-1.0",
                "api_name": "xf::compression::checksum32",
                "display_name": "checksum32",
                "brief": "",
                "target_domain": "",
                "header_file_name": [
                    "checksum_wrapper.hpp"
                ],
                "search_paths": [
                    "L1/include/hw"
                ],
                "instance": "function",
                "parameters": [
                    {
                        "name": "W",
                        "type": "int"
                    }
                ],
                "ports": []
            }
        },
        {
            "api_name": "xf::compression::checksum32_mm",
            "spec": {
                "schema": "vitis_libraries_api_list_schema-1.0",
                "api_name": "xf::compression::checksum32_mm",
                "display_name": "checksum32_mm",
                "brief": "",
                "target_domain": "",
                "header_file_name": [
                    "checksum_wrapper.hpp"
                ],
                "search_paths": [
                    "L1/include/hw"
                ],
                "instance": "function",
                "parameters": [
                    {
                        "name": "PARALLEL_BYTE",
                        "type": "int"
                    }
                ],
                "ports": []
            }
        },
        {
            "api_name": "xf::compression::huffmanDecoderLL",
            "spec": {
                "schema": "vitis_libraries_api_list_schema-1.0",
                "api_name": "xf::compression::huffmanDecoderLL",
                "display_name": "huffmanDecoderLL",
                "brief": "This module is ZLIB/GZIP Fixed, Dynamic and Stored block supported decoder. It takes ZLIB/GZIP Huffman encoded data as input and generates decoded data in LZ77 format (Literal, Length, Offset).",
                "target_domain": "",
                "header_file_name": [
                    "huffman_decoder.hpp"
                ],
                "search_paths": [
                    "L1/include/hw"
                ],
                "instance": "function",
                "parameters": [
                    {
                        "name": "DECODER",
                        "type": "eHuffmanType",
                        "description": "Fixed, Full, Dynamic huffman block support"
                    },
                    {
                        "name": "FORMAT",
                        "type": "FileFormat",
                        "description": "switch that controls GZIP/ZLIB header processing"
                    }
                ],
                "ports": [
                    {
                        "name": "inStream",
                        "direction": "",
                        "type": "hls::stream< ap_uint< 16 > > &"
                    },
                    {
                        "name": "inEos",
                        "direction": "",
                        "type": "hls::stream< bool > &"
                    },
                    {
                        "name": "outStream",
                        "direction": "",
                        "type": "hls::stream< ap_uint< 16 > > &"
                    },
                    {
                        "name": "checkSum",
                        "direction": "",
                        "type": ""
                    }
                ]
            }
        },
        {
            "api_name": "xf::compression::huffmanDecoder",
            "spec": {
                "schema": "vitis_libraries_api_list_schema-1.0",
                "api_name": "xf::compression::huffmanDecoder",
                "display_name": "huffmanDecoder",
                "brief": "This module is ZLIB/GZIP Fixed, Dynamic and Stored block supported decoder. It takes ZLIB/GZIP Huffman encoded data as input and generates decoded data in LZ77 format (Literal, Length, Offset).",
                "target_domain": "",
                "header_file_name": [
                    "huffman_decoder.hpp"
                ],
                "search_paths": [
                    "L1/include/hw"
                ],
                "instance": "function",
                "parameters": [
                    {
                        "name": "DECODER",
                        "type": "eHuffmanType",
                        "description": "Fixed, Full, Dynamic huffman block support"
                    }
                ],
                "ports": [
                    {
                        "name": "inStream",
                        "direction": "",
                        "type": "hls::stream< ap_uint< 16 > > &"
                    },
                    {
                        "name": "inEos",
                        "direction": "",
                        "type": "hls::stream< bool > &"
                    },
                    {
                        "name": "outStream",
                        "direction": "",
                        "type": "hls::stream< ap_uint< 17 > > &"
                    }
                ]
            }
        },
        {
            "api_name": "xf::compression::huffmanEncoderStatic",
            "spec": {
                "schema": "vitis_libraries_api_list_schema-1.0",
                "api_name": "xf::compression::huffmanEncoderStatic",
                "display_name": "huffmanEncoderStatic",
                "brief": "",
                "target_domain": "",
                "header_file_name": [
                    "huffman_encoder.hpp"
                ],
                "search_paths": [
                    "L1/include/hw"
                ],
                "instance": "function",
                "parameters": [],
                "ports": []
            }
        },
        {
            "api_name": "xf::compression::huffmanEncoderStream",
            "spec": {
                "schema": "vitis_libraries_api_list_schema-1.0",
                "api_name": "xf::compression::huffmanEncoderStream",
                "display_name": "huffmanEncoderStream",
                "brief": "This module does zlib/gzip dynamic huffman encoding.",
                "target_domain": "",
                "header_file_name": [
                    "huffman_encoder.hpp"
                ],
                "search_paths": [
                    "L1/include/hw"
                ],
                "instance": "function",
                "parameters": [],
                "ports": [
                    {
                        "name": "inStream",
                        "direction": "",
                        "type": "hls::stream< IntVectorStream_dt< 32, 1 > > &"
                    },
                    {
                        "name": "hufCodeInStream",
                        "direction": "",
                        "type": "hls::stream< DSVectorStream_dt< HuffmanCode_dt< c_maxBits >, 1 > > &"
                    },
                    {
                        "name": "hufCodeOutStream",
                        "direction": "",
                        "type": "hls::stream< DSVectorStream_dt< HuffmanCode_dt< c_maxBits >, 1 > > &"
                    }
                ]
            }
        },
        {
            "api_name": "xf::compression::zstdTreegenStream",
            "spec": {
                "schema": "vitis_libraries_api_list_schema-1.0",
                "api_name": "xf::compression::zstdTreegenStream",
                "display_name": "zstdTreegenStream",
                "brief": "",
                "target_domain": "",
                "header_file_name": [
                    "huffman_treegen.hpp"
                ],
                "search_paths": [
                    "L1/include/hw"
                ],
                "instance": "function",
                "parameters": [
                    {
                        "name": "MAX_FREQ_DWIDTH",
                        "type": "int"
                    },
                    {
                        "name": "MAX_BITS",
                        "type": "int"
                    }
                ],
                "ports": []
            }
        },
        {
            "api_name": "xf::compression::inflateMultiCores",
            "spec": {
                "schema": "vitis_libraries_api_list_schema-1.0",
                "api_name": "xf::compression::inflateMultiCores",
                "display_name": "inflateMultiCores",
                "brief": "",
                "target_domain": "",
                "header_file_name": [
                    "inflate.hpp"
                ],
                "search_paths": [
                    "L1/include/hw"
                ],
                "instance": "function",
                "parameters": [
                    {
                        "name": "NUM_CORE",
                        "type": "int"
                    },
                    {
                        "name": "DECODER",
                        "type": "int"
                    },
                    {
                        "name": "PARALLEL_BYTES",
                        "type": "int"
                    },
                    {
                        "name": "FILE_FORMAT",
                        "type": "int"
                    },
                    {
                        "name": "LOW_LATENCY",
                        "type": "bool"
                    },
                    {
                        "name": "HISTORY_SIZE",
                        "type": "int"
                    }
                ],
                "ports": []
            }
        },
        {
            "api_name": "xf::compression::inflateMultiByte",
            "spec": {
                "schema": "vitis_libraries_api_list_schema-1.0",
                "api_name": "xf::compression::inflateMultiByte",
                "display_name": "inflateMultiByte",
                "brief": "",
                "target_domain": "",
                "header_file_name": [
                    "inflate.hpp"
                ],
                "search_paths": [
                    "L1/include/hw"
                ],
                "instance": "function",
                "parameters": [
                    {
                        "name": "DECODER",
                        "type": "int"
                    },
                    {
                        "name": "PARALLEL_BYTES",
                        "type": "int"
                    },
                    {
                        "name": "FILE_FORMAT",
                        "type": "int"
                    },
                    {
                        "name": "LOW_LATENCY",
                        "type": "bool"
                    },
                    {
                        "name": "HISTORY_SIZE",
                        "type": "int"
                    }
                ],
                "ports": []
            }
        },
        {
            "api_name": "xf::compression::inflate",
            "spec": {
                "schema": "vitis_libraries_api_list_schema-1.0",
                "api_name": "xf::compression::inflate",
                "display_name": "inflate",
                "brief": "",
                "target_domain": "",
                "header_file_name": [
                    "inflate.hpp"
                ],
                "search_paths": [
                    "L1/include/hw"
                ],
                "instance": "function",
                "parameters": [
                    {
                        "name": "DECODER",
                        "type": "int"
                    },
                    {
                        "name": "PARALLEL_BYTES",
                        "type": "int"
                    },
                    {
                        "name": "FILE_FORMAT",
                        "type": "int"
                    },
                    {
                        "name": "HISTORY_SIZE",
                        "type": "int"
                    },
                    {
                        "name": "TUSER_WIDTH",
                        "type": "int"
                    }
                ],
                "ports": []
            }
        },
        {
            "api_name": "xf::compression::inflateMultiByteMM",
            "spec": {
                "schema": "vitis_libraries_api_list_schema-1.0",
                "api_name": "xf::compression::inflateMultiByteMM",
                "display_name": "inflateMultiByteMM",
                "brief": "",
                "target_domain": "",
                "header_file_name": [
                    "inflate.hpp"
                ],
                "search_paths": [
                    "L1/include/hw"
                ],
                "instance": "function",
                "parameters": [
                    {
                        "name": "GMEM_DATAWIDTH",
                        "type": "int"
                    },
                    {
                        "name": "GMEM_BRST_SIZE",
                        "type": "int"
                    },
                    {
                        "name": "DECODER",
                        "type": "int"
                    },
                    {
                        "name": "PARALLEL_BYTES",
                        "type": "int"
                    },
                    {
                        "name": "FILE_FORMAT",
                        "type": "int"
                    },
                    {
                        "name": "LOW_LATENCY",
                        "type": "bool"
                    },
                    {
                        "name": "HISTORY_SIZE",
                        "type": "int"
                    }
                ],
                "ports": []
            }
        },
        {
            "api_name": "xf::compression::lz4Compress",
            "spec": {
                "schema": "vitis_libraries_api_list_schema-1.0",
                "api_name": "xf::compression::lz4Compress",
                "display_name": "lz4Compress",
                "brief": "This is the core compression module which seperates the input stream into two output streams, one literal stream and other offset stream, then lz4 encoding is done.",
                "target_domain": "",
                "header_file_name": [
                    "lz4_compress.hpp"
                ],
                "search_paths": [
                    "L1/include/hw"
                ],
                "instance": "function",
                "parameters": [
                    {
                        "name": "MAX_LIT_COUNT",
                        "type": "int",
                        "description": "encoded literal length count"
                    },
                    {
                        "name": "PARALLEL_UNITS",
                        "type": "int",
                        "description": "number of parallel units"
                    }
                ],
                "ports": [
                    {
                        "name": "inStream",
                        "direction": "",
                        "type": "hls::stream< ap_uint< 32 > > &"
                    },
                    {
                        "name": "outStream",
                        "direction": "",
                        "type": "hls::stream< ap_uint< 8 > > &"
                    },
                    {
                        "name": "max_lit_limit",
                        "direction": "",
                        "type": "uint32_t[PARALLEL_UNITS],"
                    },
                    {
                        "name": "input_size",
                        "direction": "",
                        "type": "uint32_t"
                    },
                    {
                        "name": "endOfStream",
                        "direction": "",
                        "type": "hls::stream< bool > &"
                    },
                    {
                        "name": "compressdSizeStream",
                        "direction": "",
                        "type": "hls::stream< uint32_t > &"
                    },
                    {
                        "name": "index",
                        "direction": "",
                        "type": "uint32_t inde"
                    }
                ]
            }
        },
        {
            "api_name": "xf::compression::hlsLz4Core",
            "spec": {
                "schema": "vitis_libraries_api_list_schema-1.0",
                "api_name": "xf::compression::hlsLz4Core",
                "display_name": "hlsLz4Core",
                "brief": "",
                "target_domain": "",
                "header_file_name": [
                    "lz4_compress.hpp"
                ],
                "search_paths": [
                    "L1/include/hw"
                ],
                "instance": "function",
                "parameters": [
                    {
                        "name": "data_t",
                        "type": "class"
                    },
                    {
                        "name": "DATAWIDTH",
                        "type": "int"
                    },
                    {
                        "name": "BURST_SIZE",
                        "type": "int"
                    },
                    {
                        "name": "NUM_BLOCK",
                        "type": "int"
                    },
                    {
                        "name": "M_LEN",
                        "type": "int"
                    },
                    {
                        "name": "MIN_MAT",
                        "type": "int"
                    },
                    {
                        "name": "LZ_MAX_OFFSET_LIM",
                        "type": "int"
                    },
                    {
                        "name": "OFFSET_WIN",
                        "type": "int"
                    },
                    {
                        "name": "MAX_M_LEN",
                        "type": "int"
                    },
                    {
                        "name": "MAX_LIT_CNT",
                        "type": "int"
                    },
                    {
                        "name": "MIN_B_SIZE",
                        "type": "int"
                    }
                ],
                "ports": []
            }
        },
        {
            "api_name": "xf::compression::hlsLz4",
            "spec": {
                "schema": "vitis_libraries_api_list_schema-1.0",
                "api_name": "xf::compression::hlsLz4",
                "display_name": "hlsLz4",
                "brief": "",
                "target_domain": "",
                "header_file_name": [
                    "lz4_compress.hpp"
                ],
                "search_paths": [
                    "L1/include/hw"
                ],
                "instance": "function",
                "parameters": [
                    {
                        "name": "data_t",
                        "type": "class"
                    },
                    {
                        "name": "DATAWIDTH",
                        "type": "int"
                    },
                    {
                        "name": "BURST_SIZE",
                        "type": "int"
                    },
                    {
                        "name": "NUM_BLOCK",
                        "type": "int"
                    },
                    {
                        "name": "M_LEN",
                        "type": "int"
                    },
                    {
                        "name": "MIN_MAT",
                        "type": "int"
                    },
                    {
                        "name": "LZ_MAX_OFFSET_LIM",
                        "type": "int"
                    },
                    {
                        "name": "OFFSET_WIN",
                        "type": "int"
                    },
                    {
                        "name": "MAX_M_LEN",
                        "type": "int"
                    },
                    {
                        "name": "MAX_LIT_CNT",
                        "type": "int"
                    },
                    {
                        "name": "MIN_B_SIZE",
                        "type": "int"
                    }
                ],
                "ports": []
            }
        },
        {
            "api_name": "xf::compression::lz4CompressMM",
            "spec": {
                "schema": "vitis_libraries_api_list_schema-1.0",
                "api_name": "xf::compression::lz4CompressMM",
                "display_name": "lz4CompressMM",
                "brief": "",
                "target_domain": "",
                "header_file_name": [
                    "lz4_compress.hpp"
                ],
                "search_paths": [
                    "L1/include/hw"
                ],
                "instance": "function",
                "parameters": [
                    {
                        "name": "data_t",
                        "type": "class"
                    },
                    {
                        "name": "DATAWIDTH",
                        "type": "int"
                    },
                    {
                        "name": "BURST_SIZE",
                        "type": "int"
                    },
                    {
                        "name": "NUM_BLOCK",
                        "type": "int"
                    },
                    {
                        "name": "M_LEN",
                        "type": "int"
                    },
                    {
                        "name": "MIN_MAT",
                        "type": "int"
                    },
                    {
                        "name": "LZ_MAX_OFFSET_LIM",
                        "type": "int"
                    },
                    {
                        "name": "OFFSET_WIN",
                        "type": "int"
                    },
                    {
                        "name": "MAX_M_LEN",
                        "type": "int"
                    },
                    {
                        "name": "MAX_LIT_CNT",
                        "type": "int"
                    },
                    {
                        "name": "MIN_B_SIZE",
                        "type": "int"
                    }
                ],
                "ports": []
            }
        },
        {
            "api_name": "xf::compression::reg",
            "spec": {
                "schema": "vitis_libraries_api_list_schema-1.0",
                "api_name": "xf::compression::reg",
                "display_name": "reg",
                "brief": "",
                "target_domain": "",
                "header_file_name": [
                    "lz4_decompress.hpp"
                ],
                "search_paths": [
                    "L1/include/hw"
                ],
                "instance": "function",
                "parameters": [
                    {
                        "name": "T",
                        "type": "typename"
                    }
                ],
                "ports": []
            }
        },
        {
            "api_name": "xf::compression::lz4HeaderProcessing",
            "spec": {
                "schema": "vitis_libraries_api_list_schema-1.0",
                "api_name": "xf::compression::lz4HeaderProcessing",
                "display_name": "lz4HeaderProcessing",
                "brief": "",
                "target_domain": "",
                "header_file_name": [
                    "lz4_decompress.hpp"
                ],
                "search_paths": [
                    "L1/include/hw"
                ],
                "instance": "function",
                "parameters": [
                    {
                        "name": "PARALLEL_BYTES",
                        "type": "int"
                    }
                ],
                "ports": []
            }
        },
        {
            "api_name": "xf::compression::lz4Decompress",
            "spec": {
                "schema": "vitis_libraries_api_list_schema-1.0",
                "api_name": "xf::compression::lz4Decompress",
                "display_name": "lz4Decompress",
                "brief": "This module reads the compressed data from input stream and decodes the offset, match length and literals by processing in various decompress states.",
                "target_domain": "",
                "header_file_name": [
                    "lz4_decompress.hpp"
                ],
                "search_paths": [
                    "L1/include/hw"
                ],
                "instance": "function",
                "parameters": [],
                "ports": [
                    {
                        "name": "inStream",
                        "direction": "",
                        "type": "hls::stream< ap_uint< 8 > > &"
                    },
                    {
                        "name": "outStream",
                        "direction": "",
                        "type": "hls::stream< ap_uint< 32 > > &"
                    },
                    {
                        "name": "input_size",
                        "direction": "",
                        "type": "uint32_t"
                    }
                ]
            }
        },
        {
            "api_name": "xf::compression::lz4DecompressSimple",
            "spec": {
                "schema": "vitis_libraries_api_list_schema-1.0",
                "api_name": "xf::compression::lz4DecompressSimple",
                "display_name": "lz4DecompressSimple",
                "brief": "",
                "target_domain": "",
                "header_file_name": [
                    "lz4_decompress.hpp"
                ],
                "search_paths": [
                    "L1/include/hw"
                ],
                "instance": "function",
                "parameters": [],
                "ports": []
            }
        },
        {
            "api_name": "xf::compression::lz4MultiByteDecompress",
            "spec": {
                "schema": "vitis_libraries_api_list_schema-1.0",
                "api_name": "xf::compression::lz4MultiByteDecompress",
                "display_name": "lz4MultiByteDecompress",
                "brief": "",
                "target_domain": "",
                "header_file_name": [
                    "lz4_decompress.hpp"
                ],
                "search_paths": [
                    "L1/include/hw"
                ],
                "instance": "function",
                "parameters": [
                    {
                        "name": "PARALLEL_BYTES",
                        "type": "int"
                    },
                    {
                        "name": "SIZE_DT",
                        "type": "class"
                    }
                ],
                "ports": []
            }
        },
        {
            "api_name": "xf::compression::lz4CoreDecompressEngine",
            "spec": {
                "schema": "vitis_libraries_api_list_schema-1.0",
                "api_name": "xf::compression::lz4CoreDecompressEngine",
                "display_name": "lz4CoreDecompressEngine",
                "brief": "",
                "target_domain": "",
                "header_file_name": [
                    "lz4_decompress.hpp"
                ],
                "search_paths": [
                    "L1/include/hw"
                ],
                "instance": "function",
                "parameters": [
                    {
                        "name": "PARALLEL_BYTES",
                        "type": "int"
                    },
                    {
                        "name": "HISTORY_SIZE",
                        "type": "int"
                    }
                ],
                "ports": []
            }
        },
        {
            "api_name": "xf::compression::lz4DecompressEngine",
            "spec": {
                "schema": "vitis_libraries_api_list_schema-1.0",
                "api_name": "xf::compression::lz4DecompressEngine",
                "display_name": "lz4DecompressEngine",
                "brief": "",
                "target_domain": "",
                "header_file_name": [
                    "lz4_decompress.hpp"
                ],
                "search_paths": [
                    "L1/include/hw"
                ],
                "instance": "function",
                "parameters": [
                    {
                        "name": "PARALLEL_BYTES",
                        "type": "int"
                    },
                    {
                        "name": "HISTORY_SIZE",
                        "type": "int"
                    }
                ],
                "ports": []
            }
        },
        {
            "api_name": "xf::compression::mm2slz4Packer",
            "spec": {
                "schema": "vitis_libraries_api_list_schema-1.0",
                "api_name": "xf::compression::mm2slz4Packer",
                "display_name": "mm2slz4Packer",
                "brief": "",
                "target_domain": "",
                "header_file_name": [
                    "lz4_packer.hpp"
                ],
                "search_paths": [
                    "L1/include/hw"
                ],
                "instance": "function",
                "parameters": [
                    {
                        "name": "DATAWIDTH",
                        "type": "int"
                    },
                    {
                        "name": "BURST_SIZE",
                        "type": "int"
                    }
                ],
                "ports": []
            }
        },
        {
            "api_name": "xf::compression::lz4PackerMM",
            "spec": {
                "schema": "vitis_libraries_api_list_schema-1.0",
                "api_name": "xf::compression::lz4PackerMM",
                "display_name": "lz4PackerMM",
                "brief": "",
                "target_domain": "",
                "header_file_name": [
                    "lz4_packer.hpp"
                ],
                "search_paths": [
                    "L1/include/hw"
                ],
                "instance": "function",
                "parameters": [
                    {
                        "name": "DATAWIDTH",
                        "type": "int"
                    },
                    {
                        "name": "BURST_SIZE",
                        "type": "int"
                    }
                ],
                "ports": []
            }
        },
        {
            "api_name": "xf::compression::lzDecompress",
            "spec": {
                "schema": "vitis_libraries_api_list_schema-1.0",
                "api_name": "xf::compression::lzDecompress",
                "display_name": "lzDecompress",
                "brief": "This module writes the literals to the output stream as it is and when match length and offset are read, the literals will be read from the local dictionary based on offset until match length.",
                "target_domain": "",
                "header_file_name": [
                    "lz_decompress.hpp"
                ],
                "search_paths": [
                    "L1/include/hw"
                ],
                "instance": "function",
                "parameters": [
                    {
                        "name": "HISTORY_SIZE",
                        "type": "int",
                        "description": "history size"
                    },
                    {
                        "name": "LOW_OFFSET",
                        "type": "int",
                        "description": "low offset"
                    }
                ],
                "ports": [
                    {
                        "name": "inStream",
                        "direction": "",
                        "type": "hls::stream< ap_uint< 32 > > &"
                    },
                    {
                        "name": "outStream",
                        "direction": "",
                        "type": "hls::stream< ap_uint< 8 > > &"
                    },
                    {
                        "name": "original_size",
                        "direction": "",
                        "type": "uint32_t"
                    }
                ]
            }
        },
        {
            "api_name": "xf::compression::lzMultiByteDecompress",
            "spec": {
                "schema": "vitis_libraries_api_list_schema-1.0",
                "api_name": "xf::compression::lzMultiByteDecompress",
                "display_name": "lzMultiByteDecompress",
                "brief": "This module writes the literals to the output stream as it is and when match length and offset are read, the literals will be read from the local dictionary based on offset until match length. This module can process data in parallel defined by PARALLEL_BYTES template argument.",
                "target_domain": "",
                "header_file_name": [
                    "lz_decompress.hpp"
                ],
                "search_paths": [
                    "L1/include/hw"
                ],
                "instance": "function",
                "parameters": [
                    {
                        "name": "PARALLEL_BYTES",
                        "type": "int",
                        "description": "number of bytes processed in parallel (4, 8)"
                    },
                    {
                        "name": "HISTORY_SIZE",
                        "type": "int",
                        "description": "history size"
                    },
                    {
                        "name": "SIZE_DT",
                        "type": "class",
                        "description": "input data type"
                    },
                    {
                        "name": "SIZE_OFFSET",
                        "type": "class",
                        "description": "offset data type"
                    }
                ],
                "ports": [
                    {
                        "name": "litlenStream",
                        "direction": "",
                        "type": "hls::stream< SIZE_DT > &"
                    },
                    {
                        "name": "litStream",
                        "direction": "",
                        "type": "hls::stream< ap_uint< PARALLEL_BYTES *8 > > &"
                    },
                    {
                        "name": "offsetStream",
                        "direction": "",
                        "type": "hls::stream< SIZE_OFFSET > &"
                    },
                    {
                        "name": "matchlenStream",
                        "direction": "",
                        "type": "hls::stream< SIZE_DT > &"
                    },
                    {
                        "name": "outStream",
                        "direction": "",
                        "type": "hls::stream< ap_uint<(PARALLEL_BYTES *8)+PARALLEL_BYTES > > &"
                    }
                ]
            }
        },
        {
            "api_name": "xf::compression::lzMultiByteDecompressLL",
            "spec": {
                "schema": "vitis_libraries_api_list_schema-1.0",
                "api_name": "xf::compression::lzMultiByteDecompressLL",
                "display_name": "lzMultiByteDecompressLL",
                "brief": "",
                "target_domain": "",
                "header_file_name": [
                    "lz_decompress.hpp"
                ],
                "search_paths": [
                    "L1/include/hw"
                ],
                "instance": "function",
                "parameters": [
                    {
                        "name": "PARALLEL_BYTES",
                        "type": "int"
                    },
                    {
                        "name": "HISTORY_SIZE",
                        "type": "int"
                    },
                    {
                        "name": "OWIDTH",
                        "type": "int"
                    },
                    {
                        "name": "SIZE_DT",
                        "type": "class"
                    },
                    {
                        "name": "SIZE_OFFSET",
                        "type": "class"
                    }
                ],
                "ports": []
            }
        },
        {
            "api_name": "xf::compression::lzMultiByteDecoder",
            "spec": {
                "schema": "vitis_libraries_api_list_schema-1.0",
                "api_name": "xf::compression::lzMultiByteDecoder",
                "display_name": "lzMultiByteDecoder",
                "brief": "",
                "target_domain": "",
                "header_file_name": [
                    "lz_decompress.hpp"
                ],
                "search_paths": [
                    "L1/include/hw"
                ],
                "instance": "function",
                "parameters": [
                    {
                        "name": "PARALLEL_BYTES",
                        "type": "int"
                    },
                    {
                        "name": "HISTORY_SIZE",
                        "type": "int"
                    },
                    {
                        "name": "SIZE_DT",
                        "type": "class"
                    }
                ],
                "ports": []
            }
        },
        {
            "api_name": "xf::compression::lzDecompressZlibEos",
            "spec": {
                "schema": "vitis_libraries_api_list_schema-1.0",
                "api_name": "xf::compression::lzDecompressZlibEos",
                "display_name": "lzDecompressZlibEos",
                "brief": "",
                "target_domain": "",
                "header_file_name": [
                    "lz_decompress.hpp"
                ],
                "search_paths": [
                    "L1/include/hw"
                ],
                "instance": "function",
                "parameters": [
                    {
                        "name": "HISTORY_SIZE",
                        "type": "int"
                    },
                    {
                        "name": "LOW_OFFSET",
                        "type": "int"
                    }
                ],
                "ports": []
            }
        },
        {
            "api_name": "xf::compression::lzDecompressZlibEosStream",
            "spec": {
                "schema": "vitis_libraries_api_list_schema-1.0",
                "api_name": "xf::compression::lzDecompressZlibEosStream",
                "display_name": "lzDecompressZlibEosStream",
                "brief": "",
                "target_domain": "",
                "header_file_name": [
                    "lz_decompress.hpp"
                ],
                "search_paths": [
                    "L1/include/hw"
                ],
                "instance": "function",
                "parameters": [
                    {
                        "name": "HISTORY_SIZE",
                        "type": "int"
                    },
                    {
                        "name": "LOW_OFFSET",
                        "type": "int"
                    }
                ],
                "ports": []
            }
        },
        {
            "api_name": "xf::compression::lz77Divide",
            "spec": {
                "schema": "vitis_libraries_api_list_schema-1.0",
                "api_name": "xf::compression::lz77Divide",
                "display_name": "lz77Divide",
                "brief": "",
                "target_domain": "",
                "header_file_name": [
                    "lz_optional.hpp"
                ],
                "search_paths": [
                    "L1/include/hw"
                ],
                "instance": "function",
                "parameters": [],
                "ports": []
            }
        },
        {
            "api_name": "xf::compression::lz77DivideStream",
            "spec": {
                "schema": "vitis_libraries_api_list_schema-1.0",
                "api_name": "xf::compression::lz77DivideStream",
                "display_name": "lz77DivideStream",
                "brief": "",
                "target_domain": "",
                "header_file_name": [
                    "lz_optional.hpp"
                ],
                "search_paths": [
                    "L1/include/hw"
                ],
                "instance": "function",
                "parameters": [
                    {
                        "name": "MAX_FREQ_DWIDTH",
                        "type": "int"
                    },
                    {
                        "name": "CORE_ID",
                        "type": "int"
                    }
                ],
                "ports": []
            }
        },
        {
            "api_name": "xf::compression::lz77DivideStatic",
            "spec": {
                "schema": "vitis_libraries_api_list_schema-1.0",
                "api_name": "xf::compression::lz77DivideStatic",
                "display_name": "lz77DivideStatic",
                "brief": "",
                "target_domain": "",
                "header_file_name": [
                    "lz_optional.hpp"
                ],
                "search_paths": [
                    "L1/include/hw"
                ],
                "instance": "function",
                "parameters": [],
                "ports": []
            }
        },
        {
            "api_name": "xf::compression::lzBestMatchFilter",
            "spec": {
                "schema": "vitis_libraries_api_list_schema-1.0",
                "api_name": "xf::compression::lzBestMatchFilter",
                "display_name": "lzBestMatchFilter",
                "brief": "Objective of this module is to pick character with higher match length in the offset window range.",
                "target_domain": "",
                "header_file_name": [
                    "lz_optional.hpp"
                ],
                "search_paths": [
                    "L1/include/hw"
                ],
                "instance": "function",
                "parameters": [
                    {
                        "name": "MATCH_LEN",
                        "type": "int",
                        "description": "match length"
                    },
                    {
                        "name": "OFFSET_WINDOW",
                        "type": "int",
                        "description": "offset window range"
                    }
                ],
                "ports": [
                    {
                        "name": "inStream",
                        "direction": "",
                        "type": "hls::stream< compressd_dt > &"
                    },
                    {
                        "name": "outStream",
                        "direction": "",
                        "type": "hls::stream< compressd_dt > &"
                    },
                    {
                        "name": "input_size",
                        "direction": "",
                        "type": "uint32_t"
                    }
                ]
            }
        },
        {
            "api_name": "xf::compression::lzBooster",
            "spec": {
                "schema": "vitis_libraries_api_list_schema-1.0",
                "api_name": "xf::compression::lzBooster",
                "display_name": "lzBooster",
                "brief": "This module helps in improving the compression ratio. Finds a better match length by performing more character matches with supported max match, while maintaining an offset window. Booster offset Window template argument (default value is 16K) internally consume BRAM memory to implement history window. Higher the booster value can give better compression ratio but will consume more BRAM resources.",
                "target_domain": "",
                "header_file_name": [
                    "lz_optional.hpp"
                ],
                "search_paths": [
                    "L1/include/hw"
                ],
                "instance": "function",
                "parameters": [
                    {
                        "name": "MAX_MATCH_LEN",
                        "type": "int",
                        "description": "maximum length allowed for character match"
                    },
                    {
                        "name": "BLOCKSIZE",
                        "type": "int"
                    },
                    {
                        "name": "BOOSTER_OFFSET_WINDOW",
                        "type": "int",
                        "description": "offset window to store/match the character"
                    },
                    {
                        "name": "LEFT_BYTES",
                        "type": "int",
                        "description": "last 64 left over bytes"
                    }
                ],
                "ports": [
                    {
                        "name": "inStream",
                        "direction": "",
                        "type": "hls::stream< IntVectorStream_dt< 32, 1 > > &"
                    },
                    {
                        "name": "outStream",
                        "direction": "",
                        "type": "hls::stream< IntVectorStream_dt< 32, 1 > > &"
                    }
                ]
            }
        },
        {
            "api_name": "xf::compression::lzFilter",
            "spec": {
                "schema": "vitis_libraries_api_list_schema-1.0",
                "api_name": "xf::compression::lzFilter",
                "display_name": "lzFilter",
                "brief": "This module checks if match length exists, and if match length exists it filters the match length -1 characters writing to output stream.",
                "target_domain": "",
                "header_file_name": [
                    "lz_optional.hpp"
                ],
                "search_paths": [
                    "L1/include/hw"
                ],
                "instance": "function",
                "parameters": [
                    {
                        "name": "LEFT_BYTES",
                        "type": "int"
                    }
                ],
                "ports": [
                    {
                        "name": "inStream",
                        "direction": "",
                        "type": "hls::stream< compressd_dt > &"
                    },
                    {
                        "name": "outStream",
                        "direction": "",
                        "type": "hls::stream< compressd_dt > &"
                    },
                    {
                        "name": "input_size",
                        "direction": "",
                        "type": "uint32_t"
                    },
                    {
                        "name": "left_bytes",
                        "direction": "",
                        "type": ""
                    }
                ]
            }
        },
        {
            "api_name": "xf::compression::lzxDecompressEngine",
            "spec": {
                "schema": "vitis_libraries_api_list_schema-1.0",
                "api_name": "xf::compression::lzxDecompressEngine",
                "display_name": "lzxDecompressEngine",
                "brief": "",
                "target_domain": "",
                "header_file_name": [
                    "lzx_decompress.hpp"
                ],
                "search_paths": [
                    "L1/include/hw"
                ],
                "instance": "function",
                "parameters": [
                    {
                        "name": "PARALLEL_BYTES",
                        "type": "int"
                    },
                    {
                        "name": "HISTORY_SIZE",
                        "type": "int"
                    }
                ],
                "ports": []
            }
        },
        {
            "api_name": "xf::compression::snappyCompress",
            "spec": {
                "schema": "vitis_libraries_api_list_schema-1.0",
                "api_name": "xf::compression::snappyCompress",
                "display_name": "snappyCompress",
                "brief": "This is the core compression module which seperates the input stream into two output streams, one literal stream and other offset stream, then encoding is done based on the snappy algorithm.",
                "target_domain": "",
                "header_file_name": [
                    "snappy_compress.hpp"
                ],
                "search_paths": [
                    "L1/include/hw"
                ],
                "instance": "function",
                "parameters": [
                    {
                        "name": "MAX_LIT_COUNT",
                        "type": "int",
                        "description": "encoded literal length count"
                    },
                    {
                        "name": "MAX_LIT_STREAM_SIZE",
                        "type": "int",
                        "description": "encoded literal stream size"
                    },
                    {
                        "name": "PARALLEL_UNITS",
                        "type": "int",
                        "description": "number of parallel processed units"
                    }
                ],
                "ports": [
                    {
                        "name": "inStream",
                        "direction": "",
                        "type": "hls::stream< ap_uint< 32 > > &"
                    },
                    {
                        "name": "outStream",
                        "direction": "",
                        "type": "hls::stream< ap_uint< 8 > > &"
                    },
                    {
                        "name": "max_lit_limit",
                        "direction": "",
                        "type": "uint32_t[PARALLEL_UNITS],"
                    },
                    {
                        "name": "input_size",
                        "direction": "",
                        "type": "uint32_t"
                    },
                    {
                        "name": "endOfStream",
                        "direction": "",
                        "type": "hls::stream< bool > &"
                    },
                    {
                        "name": "compressdSizeStream",
                        "direction": "",
                        "type": "hls::stream< uint32_t > &"
                    },
                    {
                        "name": "index",
                        "direction": "",
                        "type": "uint32_t inde"
                    }
                ]
            }
        },
        {
            "api_name": "xf::compression::snappyDecompress",
            "spec": {
                "schema": "vitis_libraries_api_list_schema-1.0",
                "api_name": "xf::compression::snappyDecompress",
                "display_name": "snappyDecompress",
                "brief": "This module decodes the compressed data based on the snappy decompression format.",
                "target_domain": "",
                "header_file_name": [
                    "snappy_decompress.hpp"
                ],
                "search_paths": [
                    "L1/include/hw"
                ],
                "instance": "function",
                "parameters": [],
                "ports": [
                    {
                        "name": "inStream",
                        "direction": "",
                        "type": "hls::stream< ap_uint< 8 > > &"
                    },
                    {
                        "name": "outStream",
                        "direction": "",
                        "type": "hls::stream< ap_uint< 32 > > &"
                    },
                    {
                        "name": "input_size",
                        "direction": "",
                        "type": "uint32_t"
                    }
                ]
            }
        },
        {
            "api_name": "xf::compression::snappyMultiByteDecompress",
            "spec": {
                "schema": "vitis_libraries_api_list_schema-1.0",
                "api_name": "xf::compression::snappyMultiByteDecompress",
                "display_name": "snappyMultiByteDecompress",
                "brief": "",
                "target_domain": "",
                "header_file_name": [
                    "snappy_decompress.hpp"
                ],
                "search_paths": [
                    "L1/include/hw"
                ],
                "instance": "function",
                "parameters": [
                    {
                        "name": "PARALLEL_BYTES",
                        "type": "int"
                    },
                    {
                        "name": "SIZE_DT",
                        "type": "class"
                    },
                    {
                        "name": "BLOCKD_ONLY",
                        "type": "bool"
                    }
                ],
                "ports": []
            }
        },
        {
            "api_name": "xf::compression::snappyBlockDecoder",
            "spec": {
                "schema": "vitis_libraries_api_list_schema-1.0",
                "api_name": "xf::compression::snappyBlockDecoder",
                "display_name": "snappyBlockDecoder",
                "brief": "",
                "target_domain": "",
                "header_file_name": [
                    "snappy_decompress_details.hpp"
                ],
                "search_paths": [
                    "L1/include/hw"
                ],
                "instance": "function",
                "parameters": [
                    {
                        "name": "NUM_BLOCKS",
                        "type": "int"
                    },
                    {
                        "name": "PARALLEL_BYTES",
                        "type": "int"
                    },
                    {
                        "name": "HISTORY_SIZE",
                        "type": "int"
                    },
                    {
                        "name": "BLOCK_SIZE",
                        "type": "int"
                    },
                    {
                        "name": "SIZE_DT",
                        "type": "class"
                    }
                ],
                "ports": []
            }
        },
        {
            "api_name": "xf::compression::snappyMultiCoreDecompress",
            "spec": {
                "schema": "vitis_libraries_api_list_schema-1.0",
                "api_name": "xf::compression::snappyMultiCoreDecompress",
                "display_name": "snappyMultiCoreDecompress",
                "brief": "",
                "target_domain": "",
                "header_file_name": [
                    "snappy_decompress_details.hpp"
                ],
                "search_paths": [
                    "L1/include/hw"
                ],
                "instance": "function",
                "parameters": [
                    {
                        "name": "NUM_BLOCKS",
                        "type": "int"
                    },
                    {
                        "name": "PARALLEL_BYTES",
                        "type": "int"
                    },
                    {
                        "name": "HISTORY_SIZE",
                        "type": "int"
                    },
                    {
                        "name": "BLOCK_SIZE",
                        "type": "int"
                    },
                    {
                        "name": "SIZE_DT",
                        "type": "class"
                    }
                ],
                "ports": []
            }
        },
        {
            "api_name": "xf::compression::snappyDecompressEngine",
            "spec": {
                "schema": "vitis_libraries_api_list_schema-1.0",
                "api_name": "xf::compression::snappyDecompressEngine",
                "display_name": "snappyDecompressEngine",
                "brief": "",
                "target_domain": "",
                "header_file_name": [
                    "snappy_decompress_details.hpp"
                ],
                "search_paths": [
                    "L1/include/hw"
                ],
                "instance": "function",
                "parameters": [
                    {
                        "name": "PARALLEL_BYTES",
                        "type": "int"
                    },
                    {
                        "name": "HISTORY_SIZE",
                        "type": "int"
                    },
                    {
                        "name": "SIZE_DT",
                        "type": "class"
                    }
                ],
                "ports": []
            }
        },
        {
            "api_name": "xf::compression::snappyDecompressCoreEngine",
            "spec": {
                "schema": "vitis_libraries_api_list_schema-1.0",
                "api_name": "xf::compression::snappyDecompressCoreEngine",
                "display_name": "snappyDecompressCoreEngine",
                "brief": "",
                "target_domain": "",
                "header_file_name": [
                    "snappy_decompress_details.hpp"
                ],
                "search_paths": [
                    "L1/include/hw"
                ],
                "instance": "function",
                "parameters": [
                    {
                        "name": "PARALLEL_BYTES",
                        "type": "int"
                    },
                    {
                        "name": "HISTORY_SIZE",
                        "type": "int"
                    },
                    {
                        "name": "SIZE_DT",
                        "type": "class"
                    }
                ],
                "ports": []
            }
        },
        {
            "api_name": "xf::compression::lz77Compress",
            "spec": {
                "schema": "vitis_libraries_api_list_schema-1.0",
                "api_name": "xf::compression::lz77Compress",
                "display_name": "lz77Compress",
                "brief": "",
                "target_domain": "",
                "header_file_name": [
                    "zlib_compress.hpp"
                ],
                "search_paths": [
                    "L1/include/hw"
                ],
                "instance": "function",
                "parameters": [
                    {
                        "name": "CORE_ID",
                        "type": "int"
                    },
                    {
                        "name": "MAX_BLOCK_SIZE",
                        "type": "int"
                    },
                    {
                        "name": "MAX_FREQ_DWIDTH",
                        "type": "int"
                    },
                    {
                        "name": "MATCH_LEN",
                        "type": "int"
                    },
                    {
                        "name": "MIN_MATCH",
                        "type": "int"
                    },
                    {
                        "name": "LZ_MAX_OFFSET_LIMIT",
                        "type": "int"
                    },
                    {
                        "name": "MAX_MATCH_LEN",
                        "type": "int"
                    }
                ],
                "ports": []
            }
        },
        {
            "api_name": "xf::compression::lz77CompressStatic",
            "spec": {
                "schema": "vitis_libraries_api_list_schema-1.0",
                "api_name": "xf::compression::lz77CompressStatic",
                "display_name": "lz77CompressStatic",
                "brief": "",
                "target_domain": "",
                "header_file_name": [
                    "zlib_compress.hpp"
                ],
                "search_paths": [
                    "L1/include/hw"
                ],
                "instance": "function",
                "parameters": [
                    {
                        "name": "CORE_ID",
                        "type": "int"
                    },
                    {
                        "name": "MAX_BLOCK_SIZE",
                        "type": "int"
                    },
                    {
                        "name": "MATCH_LEN",
                        "type": "int"
                    },
                    {
                        "name": "MIN_MATCH",
                        "type": "int"
                    },
                    {
                        "name": "LZ_MAX_OFFSET_LIMIT",
                        "type": "int"
                    },
                    {
                        "name": "MAX_MATCH_LEN",
                        "type": "int"
                    }
                ],
                "ports": []
            }
        },
        {
            "api_name": "xf::compression::zlibHuffmanEncoder",
            "spec": {
                "schema": "vitis_libraries_api_list_schema-1.0",
                "api_name": "xf::compression::zlibHuffmanEncoder",
                "display_name": "zlibHuffmanEncoder",
                "brief": "",
                "target_domain": "",
                "header_file_name": [
                    "zlib_compress.hpp"
                ],
                "search_paths": [
                    "L1/include/hw"
                ],
                "instance": "function",
                "parameters": [],
                "ports": []
            }
        },
        {
            "api_name": "xf::compression::zlibHuffmanEncoderStatic",
            "spec": {
                "schema": "vitis_libraries_api_list_schema-1.0",
                "api_name": "xf::compression::zlibHuffmanEncoderStatic",
                "display_name": "zlibHuffmanEncoderStatic",
                "brief": "",
                "target_domain": "",
                "header_file_name": [
                    "zlib_compress.hpp"
                ],
                "search_paths": [
                    "L1/include/hw"
                ],
                "instance": "function",
                "parameters": [],
                "ports": []
            }
        },
        {
            "api_name": "xf::compression::gzipMulticoreCompression",
            "spec": {
                "schema": "vitis_libraries_api_list_schema-1.0",
                "api_name": "xf::compression::gzipMulticoreCompression",
                "display_name": "gzipMulticoreCompression",
                "brief": "",
                "target_domain": "",
                "header_file_name": [
                    "zlib_compress.hpp"
                ],
                "search_paths": [
                    "L1/include/hw"
                ],
                "instance": "function",
                "parameters": [
                    {
                        "name": "BLOCK_SIZE_IN_KB",
                        "type": "int"
                    },
                    {
                        "name": "NUM_BLOCKS",
                        "type": "int"
                    }
                ],
                "ports": []
            }
        },
        {
            "api_name": "xf::compression::gzipMulticoreStaticCompressStream",
            "spec": {
                "schema": "vitis_libraries_api_list_schema-1.0",
                "api_name": "xf::compression::gzipMulticoreStaticCompressStream",
                "display_name": "gzipMulticoreStaticCompressStream",
                "brief": "",
                "target_domain": "",
                "header_file_name": [
                    "zlib_compress.hpp"
                ],
                "search_paths": [
                    "L1/include/hw"
                ],
                "instance": "function",
                "parameters": [
                    {
                        "name": "STRATEGY",
                        "type": "int"
                    },
                    {
                        "name": "BLOCK_SIZE_IN_KB",
                        "type": "int"
                    },
                    {
                        "name": "NUM_BLOCKS",
                        "type": "int"
                    }
                ],
                "ports": []
            }
        },
        {
            "api_name": "xf::compression::gzipMulticoreCompressStream",
            "spec": {
                "schema": "vitis_libraries_api_list_schema-1.0",
                "api_name": "xf::compression::gzipMulticoreCompressStream",
                "display_name": "gzipMulticoreCompressStream",
                "brief": "",
                "target_domain": "",
                "header_file_name": [
                    "zlib_compress.hpp"
                ],
                "search_paths": [
                    "L1/include/hw"
                ],
                "instance": "function",
                "parameters": [
                    {
                        "name": "STRATEGY",
                        "type": "int"
                    },
                    {
                        "name": "BLOCK_SIZE_IN_KB",
                        "type": "int"
                    },
                    {
                        "name": "NUM_BLOCKS",
                        "type": "int"
                    }
                ],
                "ports": []
            }
        },
        {
            "api_name": "xf::compression::gzipMulticoreCompressAxiStream",
            "spec": {
                "schema": "vitis_libraries_api_list_schema-1.0",
                "api_name": "xf::compression::gzipMulticoreCompressAxiStream",
                "display_name": "gzipMulticoreCompressAxiStream",
                "brief": "",
                "target_domain": "",
                "header_file_name": [
                    "zlib_compress.hpp"
                ],
                "search_paths": [
                    "L1/include/hw"
                ],
                "instance": "function",
                "parameters": [
                    {
                        "name": "STRATEGY",
                        "type": "int"
                    },
                    {
                        "name": "BLOCK_SIZE_IN_KB",
                        "type": "int"
                    },
                    {
                        "name": "NUM_BLOCKS",
                        "type": "int"
                    },
                    {
                        "name": "TUSR_DWIDTH",
                        "type": "int"
                    }
                ],
                "ports": []
            }
        },
        {
            "api_name": "xf::compression::zstdCompressCore",
            "spec": {
                "schema": "vitis_libraries_api_list_schema-1.0",
                "api_name": "xf::compression::zstdCompressCore",
                "display_name": "zstdCompressCore",
                "brief": "This module compresses the input file read from input stream. It produces the ZSTD compressed data at the output stream.",
                "target_domain": "",
                "header_file_name": [
                    "zstd_compress.hpp"
                ],
                "search_paths": [
                    "L1/include/hw"
                ],
                "instance": "function",
                "parameters": [
                    {
                        "name": "BLOCK_SIZE",
                        "type": "int",
                        "description": "ZStd block size"
                    },
                    {
                        "name": "LZWINDOW_SIZE",
                        "type": "int",
                        "description": "LZ77 history size or Window size"
                    },
                    {
                        "name": "MIN_BLCK_SIZE",
                        "type": "int",
                        "description": "Minimum block size, less than that will be considered stored block"
                    },
                    {
                        "name": "PARALLEL_HUFFMAN",
                        "type": "int",
                        "description": "Number of Huffman encoding units used"
                    },
                    {
                        "name": "PARALLEL_LIT_STREAMS",
                        "type": "int",
                        "description": "Number of parallel literal streams encoded using huffman"
                    },
                    {
                        "name": "MIN_MATCH",
                        "type": "int",
                        "description": "Minimum match in LZ77"
                    }
                ],
                "ports": [
                    {
                        "name": "inStream",
                        "direction": "",
                        "type": "hls::stream< IntVectorStream_dt< 8, 1 > > &"
                    },
                    {
                        "name": "outStream",
                        "direction": "",
                        "type": "hls::stream< IntVectorStream_dt< 8, 4 > > &"
                    }
                ]
            }
        },
        {
            "api_name": "xf::compression::zstdCompressStreaming",
            "spec": {
                "schema": "vitis_libraries_api_list_schema-1.0",
                "api_name": "xf::compression::zstdCompressStreaming",
                "display_name": "zstdCompressStreaming",
                "brief": "This module is top level wrapper for zstd compression core module It compresses the input file read from input axi stream. It produces the ZSTD compressed data at the output axi stream.",
                "target_domain": "",
                "header_file_name": [
                    "zstd_compress.hpp"
                ],
                "search_paths": [
                    "L1/include/hw"
                ],
                "instance": "function",
                "parameters": [
                    {
                        "name": "IN_DWIDTH",
                        "type": "int",
                        "description": "Input stream data bit-width"
                    },
                    {
                        "name": "OUT_DWIDTH",
                        "type": "int",
                        "description": "Output stream data bit-width"
                    },
                    {
                        "name": "BLOCK_SIZE",
                        "type": "int",
                        "description": "ZStd block size"
                    },
                    {
                        "name": "LZWINDOW_SIZE",
                        "type": "int",
                        "description": "LZ77 history size or Window size"
                    },
                    {
                        "name": "MIN_BLCK_SIZE",
                        "type": "int",
                        "description": "Minimum block size, less than that will be considered stored block"
                    }
                ],
                "ports": [
                    {
                        "name": "inStream",
                        "direction": "",
                        "type": "hls::stream< ap_axiu< IN_DWIDTH, 0, 0, 0 > > &"
                    },
                    {
                        "name": "outStream",
                        "direction": "",
                        "type": "hls::stream< ap_axiu< OUT_DWIDTH, 0, 0, 0 > > &"
                    }
                ]
            }
        },
        {
            "api_name": "xf::compression::zstdCompressQuadCore",
            "spec": {
                "schema": "vitis_libraries_api_list_schema-1.0",
                "api_name": "xf::compression::zstdCompressQuadCore",
                "display_name": "zstdCompressQuadCore",
                "brief": "This module compresses the input file read from input stream using multiple lz77 modules. It produces the ZSTD compressed data at the output stream.",
                "target_domain": "",
                "header_file_name": [
                    "zstd_compress_multicore.hpp"
                ],
                "search_paths": [
                    "L1/include/hw"
                ],
                "instance": "function",
                "parameters": [
                    {
                        "name": "CORE_COUNT",
                        "type": "int",
                        "description": "Total number of lz77 cores"
                    },
                    {
                        "name": "BLOCK_SIZE",
                        "type": "int",
                        "description": "ZStd block size"
                    },
                    {
                        "name": "LZWINDOW_SIZE",
                        "type": "int",
                        "description": "LZ77 history size or Window size"
                    },
                    {
                        "name": "MIN_BLCK_SIZE",
                        "type": "int",
                        "description": "Minimum block size, less than that will be considered stored block"
                    },
                    {
                        "name": "MIN_MATCH",
                        "type": "int",
                        "description": "Minimum match in LZ77"
                    }
                ],
                "ports": [
                    {
                        "name": "inStream",
                        "direction": "",
                        "type": "hls::stream< IntVectorStream_dt< 8, 8 > > &"
                    },
                    {
                        "name": "outStream",
                        "direction": "",
                        "type": "hls::stream< IntVectorStream_dt< 8, 8 > > &"
                    }
                ]
            }
        },
        {
            "api_name": "xf::compression::zstdCompressMultiCoreStreaming",
            "spec": {
                "schema": "vitis_libraries_api_list_schema-1.0",
                "api_name": "xf::compression::zstdCompressMultiCoreStreaming",
                "display_name": "zstdCompressMultiCoreStreaming",
                "brief": "This module is top level wrapper for zstd compression core module It compresses the input file read from input axi stream. It produces the ZSTD compressed data at the output axi stream.",
                "target_domain": "",
                "header_file_name": [
                    "zstd_compress_multicore.hpp"
                ],
                "search_paths": [
                    "L1/include/hw"
                ],
                "instance": "function",
                "parameters": [
                    {
                        "name": "IN_DWIDTH",
                        "type": "int",
                        "description": "Input stream data bit-width"
                    },
                    {
                        "name": "OUT_DWIDTH",
                        "type": "int",
                        "description": "Output stream data bit-width"
                    },
                    {
                        "name": "BLOCK_SIZE",
                        "type": "int",
                        "description": "ZStd block size"
                    },
                    {
                        "name": "LZWINDOW_SIZE",
                        "type": "int",
                        "description": "LZ77 history size or Window size"
                    },
                    {
                        "name": "MIN_BLCK_SIZE",
                        "type": "int",
                        "description": "Minimum block size, less than that will be considered stored block"
                    },
                    {
                        "name": "CORE_COUNT",
                        "type": "int"
                    }
                ],
                "ports": [
                    {
                        "name": "inStream",
                        "direction": "",
                        "type": "hls::stream< ap_axiu< IN_DWIDTH, 0, 0, 0 > > &"
                    },
                    {
                        "name": "outStream",
                        "direction": "",
                        "type": "hls::stream< ap_axiu< OUT_DWIDTH, 0, 0, 0 > > &"
                    }
                ]
            }
        },
        {
            "api_name": "xf::compression::zstdDecompressStream",
            "spec": {
                "schema": "vitis_libraries_api_list_schema-1.0",
                "api_name": "xf::compression::zstdDecompressStream",
                "display_name": "zstdDecompressStream",
                "brief": "This module decompresses the ZStd compressed file read from input stream. It reads the input stream till valid strobe input is provided. It produces the decompressed data at the output stream.",
                "target_domain": "",
                "header_file_name": [
                    "zstd_decompress.hpp"
                ],
                "search_paths": [
                    "L1/include/hw"
                ],
                "instance": "function",
                "parameters": [
                    {
                        "name": "IN_BYTES",
                        "type": "int"
                    },
                    {
                        "name": "OUT_BYTES",
                        "type": "int"
                    },
                    {
                        "name": "BLOCK_SIZE_KB",
                        "type": "int",
                        "description": "ZStd block size"
                    },
                    {
                        "name": "LZ_MAX_OFFSET",
                        "type": "int",
                        "description": "LZ history size or Window size"
                    },
                    {
                        "name": "LMO_WIDTH",
                        "type": "int",
                        "description": "data width for offset data"
                    },
                    {
                        "name": "SEQ_LOW_LATENCY",
                        "type": "bool"
                    },
                    {
                        "name": "LOW_LATENCY",
                        "type": "bool"
                    }
                ],
                "ports": [
                    {
                        "name": "inStream",
                        "direction": "",
                        "type": "hls::stream< ap_uint< IN_BYTES *8 > > &"
                    },
                    {
                        "name": "inStrobe",
                        "direction": "",
                        "type": "hls::stream< ap_uint< 4 > > &"
                    },
                    {
                        "name": "outStream",
                        "direction": "",
                        "type": "hls::stream< ap_uint<(OUT_BYTES *8)+OUT_BYTES > > &"
                    }
                ]
            }
        },
        {
            "api_name": "xf::compression::zstdDecompressCore",
            "spec": {
                "schema": "vitis_libraries_api_list_schema-1.0",
                "api_name": "xf::compression::zstdDecompressCore",
                "display_name": "zstdDecompressCore",
                "brief": "This module decompresses the ZStd compressed file read from input stream. It reads the input stream till the given input size. It produces the decompressed data at the output stream.",
                "target_domain": "",
                "header_file_name": [
                    "zstd_decompress.hpp"
                ],
                "search_paths": [
                    "L1/include/hw"
                ],
                "instance": "function",
                "parameters": [
                    {
                        "name": "IN_BYTES",
                        "type": "int"
                    },
                    {
                        "name": "OUT_BYTES",
                        "type": "int"
                    },
                    {
                        "name": "BLOCK_SIZE_KB",
                        "type": "int",
                        "description": "ZStd block size"
                    },
                    {
                        "name": "LZ_MAX_OFFSET",
                        "type": "int",
                        "description": "LZ history size or Window size"
                    },
                    {
                        "name": "LMO_WIDTH",
                        "type": "int",
                        "description": "data width for offset data"
                    },
                    {
                        "name": "SEQ_LOW_LATENCY",
                        "type": "bool"
                    },
                    {
                        "name": "LOW_LATENCY",
                        "type": "bool"
                    }
                ],
                "ports": [
                    {
                        "name": "inStream",
                        "direction": "",
                        "type": "hls::stream< ap_axiu< IN_BYTES *8, 0, 0, 0 > > &"
                    },
                    {
                        "name": "outStream",
                        "direction": "",
                        "type": "hls::stream< ap_axiu< OUT_BYTES *8, 0, 0, 0 > > &"
                    }
                ]
            }
        }
    ],
    "target_domain": ""
}