{
    "schema": "vitis_libraries_api_list_schema-1.0",
    "api_list": [
        {
            "api_name": "xf::fintech::bernoulliPMF",
            "spec": {
                "schema": "vitis_libraries_api_list_schema-1.0",
                "api_name": "xf::fintech::bernoulliPMF",
                "display_name": "bernoulliPMF",
                "brief": "bernoulliPMF it implement a probability mass function for bernoulli distribution",
                "target_domain": "",
                "header_file_name": [
                    "bernoulli_distribution.hpp"
                ],
                "search_paths": [
                    "L1/include/xf_fintech"
                ],
                "instance": "function",
                "parameters": [
                    {
                        "name": "DT",
                        "type": "typename",
                        "description": "data type supported include float and double"
                    }
                ],
                "ports": [
                    {
                        "name": "k",
                        "direction": "",
                        "type": "int"
                    },
                    {
                        "name": "p",
                        "direction": "",
                        "type": "DT"
                    }
                ]
            }
        },
        {
            "api_name": "xf::fintech::bernoulliCDF",
            "spec": {
                "schema": "vitis_libraries_api_list_schema-1.0",
                "api_name": "xf::fintech::bernoulliCDF",
                "display_name": "bernoulliCDF",
                "brief": "bernoulliCDF it implement a cumulative distribution function for bernoulli distribution",
                "target_domain": "",
                "header_file_name": [
                    "bernoulli_distribution.hpp"
                ],
                "search_paths": [
                    "L1/include/xf_fintech"
                ],
                "instance": "function",
                "parameters": [
                    {
                        "name": "DT",
                        "type": "typename",
                        "description": "data type supported include float and double"
                    }
                ],
                "ports": [
                    {
                        "name": "k",
                        "direction": "",
                        "type": "int"
                    },
                    {
                        "name": "p",
                        "direction": "",
                        "type": "DT"
                    }
                ]
            }
        },
        {
            "api_name": "xf::fintech::covCoreMatrix",
            "spec": {
                "schema": "vitis_libraries_api_list_schema-1.0",
                "api_name": "xf::fintech::covCoreMatrix",
                "display_name": "covCoreMatrix",
                "brief": "covCoreMatrix calculate the covariance of the input matrix.",
                "target_domain": "",
                "header_file_name": [
                    "covariance.hpp"
                ],
                "search_paths": [
                    "L1/include/xf_fintech"
                ],
                "instance": "function",
                "parameters": [
                    {
                        "name": "DT",
                        "type": "typename",
                        "description": "data type supported include float and double"
                    },
                    {
                        "name": "N",
                        "type": "int",
                        "description": "maximum supported row"
                    },
                    {
                        "name": "M",
                        "type": "int",
                        "description": "maximum supported column"
                    },
                    {
                        "name": "U",
                        "type": "int",
                        "description": "unroll the 1-d inMatrix to improve throughput, support 4, 8, 16"
                    },
                    {
                        "name": "V",
                        "type": "int",
                        "description": "unroll the 2-d inMatrix to improve throughput, support 1, 2, 4, 8"
                    }
                ],
                "ports": [
                    {
                        "name": "rows",
                        "direction": "",
                        "type": "int"
                    },
                    {
                        "name": "cols",
                        "direction": "",
                        "type": "int"
                    },
                    {
                        "name": "inMatrix",
                        "direction": "",
                        "type": "DT[N][M],"
                    },
                    {
                        "name": "outCovMatrix",
                        "direction": "",
                        "type": "DT"
                    }
                ]
            }
        },
        {
            "api_name": "xf::fintech::covCoreStrm",
            "spec": {
                "schema": "vitis_libraries_api_list_schema-1.0",
                "api_name": "xf::fintech::covCoreStrm",
                "display_name": "covCoreStrm",
                "brief": "covCoreStrm calculate the covariance of the input matrix, the input matrix input in the order of the columns by stream, the output covariance matrix output in the order of the rows by stream.",
                "target_domain": "",
                "header_file_name": [
                    "covariance.hpp"
                ],
                "search_paths": [
                    "L1/include/xf_fintech"
                ],
                "instance": "function",
                "parameters": [
                    {
                        "name": "DT",
                        "type": "typename",
                        "description": "data type supported include float and double"
                    },
                    {
                        "name": "DTLEN",
                        "type": "int",
                        "description": "length of DT"
                    },
                    {
                        "name": "N",
                        "type": "int",
                        "description": "maximum supported row"
                    },
                    {
                        "name": "M",
                        "type": "int",
                        "description": "maximum supported column"
                    },
                    {
                        "name": "TI",
                        "type": "int",
                        "description": "the bit-width of input stream is TI * DTLEN"
                    },
                    {
                        "name": "TO",
                        "type": "int",
                        "description": "the bit-width of output stream is TO * DTLEN"
                    }
                ],
                "ports": [
                    {
                        "name": "rows",
                        "direction": "",
                        "type": "int"
                    },
                    {
                        "name": "cols",
                        "direction": "",
                        "type": "int"
                    },
                    {
                        "name": "inMatStrm",
                        "direction": "",
                        "type": "hls::stream< ap_uint< DTLEN *TI > > &"
                    },
                    {
                        "name": "outCovStrm",
                        "direction": "",
                        "type": "hls::stream< ap_uint< DTLEN *TO > > &"
                    }
                ]
            }
        },
        {
            "api_name": "xf::fintech::covReHardThreshold",
            "spec": {
                "schema": "vitis_libraries_api_list_schema-1.0",
                "api_name": "xf::fintech::covReHardThreshold",
                "display_name": "covReHardThreshold",
                "brief": "covReHardThreshold hard-thresholding Covariance Regularization",
                "target_domain": "",
                "header_file_name": [
                    "covariance_regularization.hpp"
                ],
                "search_paths": [
                    "L1/include/xf_fintech"
                ],
                "instance": "function",
                "parameters": [
                    {
                        "name": "DT",
                        "type": "typename",
                        "description": "data type supported include float and double"
                    }
                ],
                "ports": [
                    {
                        "name": "n",
                        "direction": "",
                        "type": "iMatStrm,"
                    },
                    {
                        "name": "threshold",
                        "direction": "",
                        "type": "hls::stream< DT > &outMatStr"
                    },
                    {
                        "name": "inMatStrm",
                        "direction": "",
                        "type": "hls::stream< DT > &outMatStr"
                    },
                    {
                        "name": "outMatStrm",
                        "direction": "",
                        "type": "hls::stream< DT > &outMatStr"
                    }
                ]
            }
        },
        {
            "api_name": "xf::fintech::covReSoftThreshold",
            "spec": {
                "schema": "vitis_libraries_api_list_schema-1.0",
                "api_name": "xf::fintech::covReSoftThreshold",
                "display_name": "covReSoftThreshold",
                "brief": "covReSoftThreshold soft-thresholding Covariance Regularization",
                "target_domain": "",
                "header_file_name": [
                    "covariance_regularization.hpp"
                ],
                "search_paths": [
                    "L1/include/xf_fintech"
                ],
                "instance": "function",
                "parameters": [
                    {
                        "name": "DT",
                        "type": "typename",
                        "description": "data type supported include float and double"
                    }
                ],
                "ports": [
                    {
                        "name": "n",
                        "direction": "",
                        "type": "iMatStrm,"
                    },
                    {
                        "name": "threshold",
                        "direction": "",
                        "type": "hls::stream< DT > &outMatStr"
                    },
                    {
                        "name": "inMatStrm",
                        "direction": "",
                        "type": "hls::stream< DT > &outMatStr"
                    },
                    {
                        "name": "outMatStrm",
                        "direction": "",
                        "type": "hls::stream< DT > &outMatStr"
                    }
                ]
            }
        },
        {
            "api_name": "xf::fintech::covReBand",
            "spec": {
                "schema": "vitis_libraries_api_list_schema-1.0",
                "api_name": "xf::fintech::covReBand",
                "display_name": "covReBand",
                "brief": "covReBand banding Covariance Regularization",
                "target_domain": "",
                "header_file_name": [
                    "covariance_regularization.hpp"
                ],
                "search_paths": [
                    "L1/include/xf_fintech"
                ],
                "instance": "function",
                "parameters": [
                    {
                        "name": "DT",
                        "type": "typename",
                        "description": "data type supported include float and double"
                    }
                ],
                "ports": [
                    {
                        "name": "n",
                        "direction": "",
                        "type": "iMatStrm,"
                    },
                    {
                        "name": "k",
                        "direction": "",
                        "type": "hls::stream< DT > &outMatStr"
                    },
                    {
                        "name": "inMatStrm",
                        "direction": "",
                        "type": "hls::stream< DT > &outMatStr"
                    },
                    {
                        "name": "outMatStrm",
                        "direction": "",
                        "type": "hls::stream< DT > &outMatStr"
                    }
                ]
            }
        },
        {
            "api_name": "xf::fintech::covReTaper",
            "spec": {
                "schema": "vitis_libraries_api_list_schema-1.0",
                "api_name": "xf::fintech::covReTaper",
                "display_name": "covReTaper",
                "brief": "covReTaper tapering Covariance Regularization",
                "target_domain": "",
                "header_file_name": [
                    "covariance_regularization.hpp"
                ],
                "search_paths": [
                    "L1/include/xf_fintech"
                ],
                "instance": "function",
                "parameters": [
                    {
                        "name": "DT",
                        "type": "typename",
                        "description": "data type supported include float and double"
                    }
                ],
                "ports": [
                    {
                        "name": "n",
                        "direction": "",
                        "type": "iMatStrm,"
                    },
                    {
                        "name": "l",
                        "direction": "",
                        "type": "h"
                    },
                    {
                        "name": "h",
                        "direction": "",
                        "type": "s::stream< DT > &outMatStr"
                    },
                    {
                        "name": "inMatStrm",
                        "direction": "",
                        "type": "s::stream< DT > &outMatStr"
                    },
                    {
                        "name": "outMatStrm",
                        "direction": "",
                        "type": "s::stream< DT > &outMatStr"
                    }
                ]
            }
        },
        {
            "api_name": "xf::fintech::gammaCDF",
            "spec": {
                "schema": "vitis_libraries_api_list_schema-1.0",
                "api_name": "xf::fintech::gammaCDF",
                "display_name": "gammaCDF",
                "brief": "gammaCDF it implement a cumulative distribution function for gamma distribution",
                "target_domain": "",
                "header_file_name": [
                    "gamma_distribution.hpp"
                ],
                "search_paths": [
                    "L1/include/xf_fintech"
                ],
                "instance": "function",
                "parameters": [
                    {
                        "name": "DT",
                        "type": "typename",
                        "description": "data type supported include float and double"
                    }
                ],
                "ports": [
                    {
                        "name": "a",
                        "direction": "",
                        "type": "DT"
                    },
                    {
                        "name": "x",
                        "direction": "",
                        "type": "DT"
                    }
                ]
            }
        },
        {
            "api_name": "xf::fintech::svd",
            "spec": {
                "schema": "vitis_libraries_api_list_schema-1.0",
                "api_name": "xf::fintech::svd",
                "display_name": "svd",
                "brief": "Jacobi Singular Value Decomposition (SVD).",
                "target_domain": "",
                "header_file_name": [
                    "jacobi_svd.hpp"
                ],
                "search_paths": [
                    "L1/include/xf_fintech"
                ],
                "instance": "function",
                "parameters": [
                    {
                        "name": "dataType",
                        "type": "typename",
                        "description": "data type."
                    },
                    {
                        "name": "diagSize",
                        "type": "int",
                        "description": "matrix size."
                    }
                ],
                "ports": [
                    {
                        "name": "dataA",
                        "direction": "",
                        "type": "dataType[diagSize][diagSize],"
                    },
                    {
                        "name": "sigma2",
                        "direction": "",
                        "type": "dataType[diagSize][diagSize],"
                    },
                    {
                        "name": "dataU_out2",
                        "direction": "",
                        "type": "dataType[diagSize][diagSize],"
                    },
                    {
                        "name": "dataV_out2",
                        "direction": "",
                        "type": "dataType"
                    }
                ]
            }
        },
        {
            "api_name": "xf::fintech::linearImpl",
            "spec": {
                "schema": "vitis_libraries_api_list_schema-1.0",
                "api_name": "xf::fintech::linearImpl",
                "display_name": "linearImpl",
                "brief": "linearImpl 1D linear interpolation",
                "target_domain": "",
                "header_file_name": [
                    "linear_interpolation.hpp"
                ],
                "search_paths": [
                    "L1/include/xf_fintech"
                ],
                "instance": "function",
                "parameters": [
                    {
                        "name": "DT",
                        "type": "typename",
                        "description": "data type supported include float and double."
                    }
                ],
                "ports": [
                    {
                        "name": "x",
                        "direction": "",
                        "type": "DT"
                    },
                    {
                        "name": "len",
                        "direction": "",
                        "type": "int"
                    },
                    {
                        "name": "arrX",
                        "direction": "",
                        "type": "DT *"
                    },
                    {
                        "name": "arrY",
                        "direction": "",
                        "type": "DT *"
                    }
                ]
            }
        },
        {
            "api_name": "xf::fintech::mcSimulation",
            "spec": {
                "schema": "vitis_libraries_api_list_schema-1.0",
                "api_name": "xf::fintech::mcSimulation",
                "display_name": "mcSimulation",
                "brief": "Monte Carlo Framework implementation.",
                "target_domain": "",
                "header_file_name": [
                    "mc_simulation.hpp"
                ],
                "search_paths": [
                    "L1/include/xf_fintech"
                ],
                "instance": "function",
                "parameters": [
                    {
                        "name": "DT",
                        "type": "typename",
                        "description": "supported data type including double and float data type, which decides the precision of result, default double-precision data type."
                    },
                    {
                        "name": "RNG",
                        "type": "typename",
                        "description": "random number generator type."
                    },
                    {
                        "name": "PathGeneratorT",
                        "type": "typename",
                        "description": "path generator type which simulates the dynamics of the asset price."
                    },
                    {
                        "name": "PathPricerT",
                        "type": "typename",
                        "description": "path pricer type which calcualtes the option price based on asset price."
                    },
                    {
                        "name": "RNGSeqT",
                        "type": "typename",
                        "description": "random number sequence generator type."
                    },
                    {
                        "name": "UN",
                        "type": "int",
                        "description": "number of Monte Carlo Module in parallel, which affects the latency and resources utilization."
                    },
                    {
                        "name": "VariateNum",
                        "type": "int",
                        "description": "number of variate."
                    },
                    {
                        "name": "SampNum",
                        "type": "int",
                        "description": "the total samples are divided into several steps, SampNum is the number for each step."
                    }
                ],
                "ports": [
                    {
                        "name": "timeSteps",
                        "direction": "",
                        "type": "ap_uint< 16 >"
                    },
                    {
                        "name": "maxSamples",
                        "direction": "",
                        "type": "ap_uint< 27 >"
                    },
                    {
                        "name": "requiredTolerance",
                        "direction": "",
                        "type": "ap_uint< 27 > requiredSamples, DT"
                    },
                    {
                        "name": "requiredSamples",
                        "direction": "",
                        "type": "PathGeneratorT pathGenInst[UN][1], PathPricerT pathPriInst[UN][1], RNGSeqT rngSeqInst[UN][1]"
                    },
                    {
                        "name": "pathGenInst",
                        "direction": "",
                        "type": "PathGeneratorT[UN][1],"
                    },
                    {
                        "name": "pathPriInst",
                        "direction": "",
                        "type": "PathPricerT[UN][1],"
                    },
                    {
                        "name": "rngSeqInst",
                        "direction": "",
                        "type": "RNGSeqT"
                    }
                ]
            }
        },
        {
            "api_name": "xf::fintech::normalPDF",
            "spec": {
                "schema": "vitis_libraries_api_list_schema-1.0",
                "api_name": "xf::fintech::normalPDF",
                "display_name": "normalPDF",
                "brief": "normalPDF it implement a probability density function for normal distribution",
                "target_domain": "",
                "header_file_name": [
                    "normal_distribution.hpp"
                ],
                "search_paths": [
                    "L1/include/xf_fintech"
                ],
                "instance": "function",
                "parameters": [
                    {
                        "name": "DT",
                        "type": "typename",
                        "description": "data type supported include float and double"
                    }
                ],
                "ports": [
                    {
                        "name": "average",
                        "direction": "",
                        "type": "DT"
                    },
                    {
                        "name": "sigma",
                        "direction": "",
                        "type": "DT"
                    },
                    {
                        "name": "x",
                        "direction": "",
                        "type": "DT"
                    }
                ]
            }
        },
        {
            "api_name": "xf::fintech::normalCDF",
            "spec": {
                "schema": "vitis_libraries_api_list_schema-1.0",
                "api_name": "xf::fintech::normalCDF",
                "display_name": "normalCDF",
                "brief": "normalCDF it implement a cumulative distribution function for normal distribution",
                "target_domain": "",
                "header_file_name": [
                    "normal_distribution.hpp"
                ],
                "search_paths": [
                    "L1/include/xf_fintech"
                ],
                "instance": "function",
                "parameters": [
                    {
                        "name": "DT",
                        "type": "typename",
                        "description": "data type supported include float and double"
                    }
                ],
                "ports": [
                    {
                        "name": "average",
                        "direction": "",
                        "type": "DT"
                    },
                    {
                        "name": "sigma",
                        "direction": "",
                        "type": "DT"
                    },
                    {
                        "name": "x",
                        "direction": "",
                        "type": "DT"
                    }
                ]
            }
        },
        {
            "api_name": "xf::fintech::normalICDF",
            "spec": {
                "schema": "vitis_libraries_api_list_schema-1.0",
                "api_name": "xf::fintech::normalICDF",
                "display_name": "normalICDF",
                "brief": "normalICDF it implement a inverse cumulative distribution function for normal distribution",
                "target_domain": "",
                "header_file_name": [
                    "normal_distribution.hpp"
                ],
                "search_paths": [
                    "L1/include/xf_fintech"
                ],
                "instance": "function",
                "parameters": [
                    {
                        "name": "DT",
                        "type": "typename",
                        "description": "data type supported include float and double"
                    }
                ],
                "ports": [
                    {
                        "name": "average",
                        "direction": "",
                        "type": "DT"
                    },
                    {
                        "name": "sigma",
                        "direction": "",
                        "type": "DT"
                    },
                    {
                        "name": "y",
                        "direction": "",
                        "type": "DT"
                    }
                ]
            }
        },
        {
            "api_name": "xf::fintech::logNormalPDF",
            "spec": {
                "schema": "vitis_libraries_api_list_schema-1.0",
                "api_name": "xf::fintech::logNormalPDF",
                "display_name": "logNormalPDF",
                "brief": "logNormalPDF it implement a probability density function for log-normal distribution",
                "target_domain": "",
                "header_file_name": [
                    "normal_distribution.hpp"
                ],
                "search_paths": [
                    "L1/include/xf_fintech"
                ],
                "instance": "function",
                "parameters": [
                    {
                        "name": "DT",
                        "type": "typename",
                        "description": "data type supported include float and double"
                    }
                ],
                "ports": [
                    {
                        "name": "average",
                        "direction": "",
                        "type": "DT"
                    },
                    {
                        "name": "sigma",
                        "direction": "",
                        "type": "DT"
                    },
                    {
                        "name": "x",
                        "direction": "",
                        "type": "DT"
                    }
                ]
            }
        },
        {
            "api_name": "xf::fintech::logNormalCDF",
            "spec": {
                "schema": "vitis_libraries_api_list_schema-1.0",
                "api_name": "xf::fintech::logNormalCDF",
                "display_name": "logNormalCDF",
                "brief": "logNormalCDF it implement a cumulative distribution function for log-normal distribution",
                "target_domain": "",
                "header_file_name": [
                    "normal_distribution.hpp"
                ],
                "search_paths": [
                    "L1/include/xf_fintech"
                ],
                "instance": "function",
                "parameters": [
                    {
                        "name": "DT",
                        "type": "typename",
                        "description": "data type supported include float and double"
                    }
                ],
                "ports": [
                    {
                        "name": "average",
                        "direction": "",
                        "type": "DT"
                    },
                    {
                        "name": "sigma",
                        "direction": "",
                        "type": "DT"
                    },
                    {
                        "name": "x",
                        "direction": "",
                        "type": "DT"
                    }
                ]
            }
        },
        {
            "api_name": "xf::fintech::logNormalICDF",
            "spec": {
                "schema": "vitis_libraries_api_list_schema-1.0",
                "api_name": "xf::fintech::logNormalICDF",
                "display_name": "logNormalICDF",
                "brief": "logNormalICDF it implement a inverse cumulative distribution function for log-normal distribution",
                "target_domain": "",
                "header_file_name": [
                    "normal_distribution.hpp"
                ],
                "search_paths": [
                    "L1/include/xf_fintech"
                ],
                "instance": "function",
                "parameters": [
                    {
                        "name": "DT",
                        "type": "typename",
                        "description": "data type supported include float and double"
                    }
                ],
                "ports": [
                    {
                        "name": "average",
                        "direction": "",
                        "type": "DT"
                    },
                    {
                        "name": "sigma",
                        "direction": "",
                        "type": "DT"
                    },
                    {
                        "name": "y",
                        "direction": "",
                        "type": "DT"
                    }
                ]
            }
        },
        {
            "api_name": "xf::fintech::pentadiagCr",
            "spec": {
                "schema": "vitis_libraries_api_list_schema-1.0",
                "api_name": "xf::fintech::pentadiagCr",
                "display_name": "pentadiagCr",
                "brief": "Solves for u in linear system Pu = r",
                "target_domain": "",
                "header_file_name": [
                    "pentadiag_cr.hpp"
                ],
                "search_paths": [
                    "L1/include/xf_fintech"
                ],
                "instance": "function",
                "parameters": [
                    {
                        "name": "T",
                        "type": "typename",
                        "description": "data type used in whole function (double by default)"
                    },
                    {
                        "name": "P_SIZE",
                        "type": "unsigned int",
                        "description": "Size of the operating matrix"
                    },
                    {
                        "name": "logN",
                        "type": "unsigned int",
                        "description": "Number of steps for algorithm"
                    }
                ],
                "ports": [
                    {
                        "name": "c",
                        "direction": "",
                        "type": "T a[P_SIZE], T b[P_SIZE], T[P_SIZE],"
                    },
                    {
                        "name": "b",
                        "direction": "",
                        "type": "T d[P_SIZE], T e[P_SIZE], T v[P_SIZE], T u[P_SIZE"
                    },
                    {
                        "name": "a",
                        "direction": "",
                        "type": "T d[P_SIZE], T e[P_SIZE], T v[P_SIZE], T u[P_SIZE"
                    },
                    {
                        "name": "d",
                        "direction": "",
                        "type": "T[P_SIZE],"
                    },
                    {
                        "name": "e",
                        "direction": "",
                        "type": "T[P_SIZE],"
                    },
                    {
                        "name": "v",
                        "direction": "",
                        "type": "T[P_SIZE],"
                    },
                    {
                        "name": "u",
                        "direction": "",
                        "type": "T"
                    }
                ]
            }
        },
        {
            "api_name": "xf::fintech::poissonPMF",
            "spec": {
                "schema": "vitis_libraries_api_list_schema-1.0",
                "api_name": "xf::fintech::poissonPMF",
                "display_name": "poissonPMF",
                "brief": "poissonPMF it implement a probability mass function for poisson distribution",
                "target_domain": "",
                "header_file_name": [
                    "poisson_distribution.hpp"
                ],
                "search_paths": [
                    "L1/include/xf_fintech"
                ],
                "instance": "function",
                "parameters": [
                    {
                        "name": "DT",
                        "type": "typename",
                        "description": "data type supported include float and double"
                    }
                ],
                "ports": [
                    {
                        "name": "k",
                        "direction": "",
                        "type": "unsigned int"
                    },
                    {
                        "name": "m",
                        "direction": "",
                        "type": "DT"
                    }
                ]
            }
        },
        {
            "api_name": "xf::fintech::poissonCDF",
            "spec": {
                "schema": "vitis_libraries_api_list_schema-1.0",
                "api_name": "xf::fintech::poissonCDF",
                "display_name": "poissonCDF",
                "brief": "poissonCDF it implement a cumulative distribution function for poisson distribution",
                "target_domain": "",
                "header_file_name": [
                    "poisson_distribution.hpp"
                ],
                "search_paths": [
                    "L1/include/xf_fintech"
                ],
                "instance": "function",
                "parameters": [
                    {
                        "name": "DT",
                        "type": "typename",
                        "description": "data type supported include float and double"
                    }
                ],
                "ports": [
                    {
                        "name": "k",
                        "direction": "",
                        "type": "unsigned int"
                    },
                    {
                        "name": "m",
                        "direction": "",
                        "type": "DT"
                    }
                ]
            }
        },
        {
            "api_name": "xf::fech::poissonICDF",
            "spec": {
                "schema": "vitis_libraries_api_list_schema-1.0",
                "api_name": "xf::fech::poissonICDF",
                "display_name": "poissonICDF",
                "brief": "poissonICDF it implement a inverse cumulative distribution function for poisson distribution",
                "target_domain": "",
                "header_file_name": [
                    "poisson_distribution.hpp"
                ],
                "search_paths": [
                    "L1/include/xf_fintech"
                ],
                "instance": "function",
                "parameters": [
                    {
                        "name": "DT",
                        "type": "typename",
                        "description": "data type supported include float and double"
                    }
                ],
                "ports": [
                    {
                        "name": "m",
                        "direction": "",
                        "type": "DT"
                    },
                    {
                        "name": "x",
                        "direction": "",
                        "type": "DT"
                    }
                ]
            }
        },
        {
            "api_name": "xf::fintech::polyfit",
            "spec": {
                "schema": "vitis_libraries_api_list_schema-1.0",
                "api_name": "xf::fintech::polyfit",
                "display_name": "polyfit",
                "brief": "Calculates the polynomial fitting to the D degree of the discrete set of points in 'evalPoints'.",
                "target_domain": "",
                "header_file_name": [
                    "polyfit.hpp"
                ],
                "search_paths": [
                    "L1/include/xf_fintech"
                ],
                "instance": "function",
                "parameters": [
                    {
                        "name": "DT",
                        "type": "typename",
                        "description": "The data type of the points"
                    },
                    {
                        "name": "D",
                        "type": "unsigned int",
                        "description": "The degree of the polynomial that will approximate the set of points."
                    },
                    {
                        "name": "MAX_WIDTH",
                        "type": "unsigned int",
                        "description": "The maximum synthetisable amount of discrete points."
                    }
                ],
                "ports": [
                    {
                        "name": "evalX",
                        "direction": "",
                        "type": "const DT[MAX_WIDTH],"
                    },
                    {
                        "name": "evalPoints",
                        "direction": "",
                        "type": "const DT[MAX_WIDTH],"
                    },
                    {
                        "name": "sizeEval",
                        "direction": "",
                        "type": "unsigned int"
                    },
                    {
                        "name": "coefficients",
                        "direction": "",
                        "type": "DT"
                    }
                ]
            }
        },
        {
            "api_name": "xf::fintech::polyval",
            "spec": {
                "schema": "vitis_libraries_api_list_schema-1.0",
                "api_name": "xf::fintech::polyval",
                "display_name": "polyval",
                "brief": "Calculates the polynomial evaluation of a set of coefficients at the point 'x'.",
                "target_domain": "",
                "header_file_name": [
                    "polyfit.hpp"
                ],
                "search_paths": [
                    "L1/include/xf_fintech"
                ],
                "instance": "function",
                "parameters": [
                    {
                        "name": "DT",
                        "type": "typename",
                        "description": "The data type to be used."
                    },
                    {
                        "name": "D",
                        "type": "unsigned int",
                        "description": "The degree of the polynomial"
                    }
                ],
                "ports": [
                    {
                        "name": "coeff",
                        "direction": "",
                        "type": "const DT[D],"
                    },
                    {
                        "name": "x",
                        "direction": "",
                        "type": "const DT"
                    }
                ]
            }
        },
        {
            "api_name": "xf::fintech::polyint",
            "spec": {
                "schema": "vitis_libraries_api_list_schema-1.0",
                "api_name": "xf::fintech::polyint",
                "display_name": "polyint",
                "brief": "Performs the definite integral of a polynomial fitted function defined by its coefficients.",
                "target_domain": "",
                "header_file_name": [
                    "polyfit.hpp"
                ],
                "search_paths": [
                    "L1/include/xf_fintech"
                ],
                "instance": "function",
                "parameters": [
                    {
                        "name": "DT",
                        "type": "typename",
                        "description": "The data type to be used."
                    },
                    {
                        "name": "D",
                        "type": "unsigned int",
                        "description": "The degree of the fitted original polynomial."
                    }
                ],
                "ports": [
                    {
                        "name": "pf",
                        "direction": "",
                        "type": "DTInt[D+1],"
                    },
                    {
                        "name": "pfInt",
                        "direction": "",
                        "type": "DT c=0."
                    },
                    {
                        "name": "c",
                        "direction": "",
                        "type": "DT"
                    }
                ]
            }
        },
        {
            "api_name": "xf::fintech::polyder",
            "spec": {
                "schema": "vitis_libraries_api_list_schema-1.0",
                "api_name": "xf::fintech::polyder",
                "display_name": "polyder",
                "brief": "Performs the first derivate of a polynomial fitted function defined by its coefficients.",
                "target_domain": "",
                "header_file_name": [
                    "polyfit.hpp"
                ],
                "search_paths": [
                    "L1/include/xf_fintech"
                ],
                "instance": "function",
                "parameters": [
                    {
                        "name": "DT",
                        "type": "typename",
                        "description": "The data type to be used."
                    },
                    {
                        "name": "D",
                        "type": "unsigned int",
                        "description": "The degree of the fitted original polynomial"
                    }
                ],
                "ports": [
                    {
                        "name": "pf",
                        "direction": "",
                        "type": "DT"
                    },
                    {
                        "name": "pfDer",
                        "direction": "",
                        "type": "Der[D-1]"
                    }
                ]
            }
        },
        {
            "api_name": "xf::fintech::stack_init",
            "spec": {
                "schema": "vitis_libraries_api_list_schema-1.0",
                "api_name": "xf::fintech::stack_init",
                "display_name": "stack_init",
                "brief": "",
                "target_domain": "",
                "header_file_name": [
                    "quadrature.hpp"
                ],
                "search_paths": [
                    "L1/include/xf_fintech"
                ],
                "instance": "function",
                "parameters": [
                    {
                        "name": "DT",
                        "type": "typename",
                        "description": "data type supported include float and double"
                    }
                ],
                "ports": []
            }
        },
        {
            "api_name": "xf::fech::stack_push",
            "spec": {
                "schema": "vitis_libraries_api_list_schema-1.0",
                "api_name": "xf::fech::stack_push",
                "display_name": "stack_push",
                "brief": "",
                "target_domain": "",
                "header_file_name": [
                    "quadrature.hpp"
                ],
                "search_paths": [
                    "L1/include/xf_fintech"
                ],
                "instance": "function",
                "parameters": [
                    {
                        "name": "DT",
                        "type": "typename",
                        "description": "data type supported include float and double"
                    }
                ],
                "ports": []
            }
        },
        {
            "api_name": "xf::fech::stack_pop",
            "spec": {
                "schema": "vitis_libraries_api_list_schema-1.0",
                "api_name": "xf::fech::stack_pop",
                "display_name": "stack_pop",
                "brief": "",
                "target_domain": "",
                "header_file_name": [
                    "quadrature.hpp"
                ],
                "search_paths": [
                    "L1/include/xf_fintech"
                ],
                "instance": "function",
                "parameters": [
                    {
                        "name": "DT",
                        "type": "typename",
                        "description": "data type supported include float and double"
                    }
                ],
                "ports": []
            }
        },
        {
            "api_name": "xf::fech::trap_egrate",
            "spec": {
                "schema": "vitis_libraries_api_list_schema-1.0",
                "api_name": "xf::fech::trap_egrate",
                "display_name": "trap_integrate",
                "brief": "integration function using the adaptive trapezoidal technique",
                "target_domain": "",
                "header_file_name": [
                    "quadrature.hpp"
                ],
                "search_paths": [
                    "L1/include/xf_fintech"
                ],
                "instance": "function",
                "parameters": [
                    {
                        "name": "DT",
                        "type": "typename",
                        "description": "float or DT, determines the precision of the result"
                    }
                ],
                "ports": [
                    {
                        "name": "a",
                        "direction": "",
                        "type": "DT"
                    },
                    {
                        "name": "b",
                        "direction": "",
                        "type": "DT"
                    },
                    {
                        "name": "tol",
                        "direction": "",
                        "type": "DT"
                    },
                    {
                        "name": "res",
                        "direction": "",
                        "type": "DT *"
                    },
                    {
                        "name": "p",
                        "direction": "",
                        "type": "XF_USER_DATA_TYPE *"
                    }
                ]
            }
        },
        {
            "api_name": "xf::fintech::simp_elem",
            "spec": {
                "schema": "vitis_libraries_api_list_schema-1.0",
                "api_name": "xf::fintech::simp_elem",
                "display_name": "simp_elem",
                "brief": "",
                "target_domain": "",
                "header_file_name": [
                    "quadrature.hpp"
                ],
                "search_paths": [
                    "L1/include/xf_fintech"
                ],
                "instance": "function",
                "parameters": [
                    {
                        "name": "DT",
                        "type": "typename",
                        "description": "data type supported include float and double"
                    }
                ],
                "ports": []
            }
        },
        {
            "api_name": "xf::fech::simp_egrate",
            "spec": {
                "schema": "vitis_libraries_api_list_schema-1.0",
                "api_name": "xf::fech::simp_egrate",
                "display_name": "simp_integrate",
                "brief": "integration function using the adaptive simpson 1/3 technique",
                "target_domain": "",
                "header_file_name": [
                    "quadrature.hpp"
                ],
                "search_paths": [
                    "L1/include/xf_fintech"
                ],
                "instance": "function",
                "parameters": [
                    {
                        "name": "DT",
                        "type": "typename",
                        "description": "float or DT, determines the precision of the result"
                    }
                ],
                "ports": [
                    {
                        "name": "a",
                        "direction": "",
                        "type": "DT"
                    },
                    {
                        "name": "b",
                        "direction": "",
                        "type": "DT"
                    },
                    {
                        "name": "tol",
                        "direction": "",
                        "type": "DT"
                    },
                    {
                        "name": "res",
                        "direction": "",
                        "type": "DT *"
                    },
                    {
                        "name": "p",
                        "direction": "",
                        "type": "XF_USER_DATA_TYPE *"
                    }
                ]
            }
        },
        {
            "api_name": "xf::fech::romberg_egrate",
            "spec": {
                "schema": "vitis_libraries_api_list_schema-1.0",
                "api_name": "xf::fech::romberg_egrate",
                "display_name": "romberg_integrate",
                "brief": "integration function using the romberg technique Based on",
                "target_domain": "",
                "header_file_name": [
                    "quadrature.hpp"
                ],
                "search_paths": [
                    "L1/include/xf_fintech"
                ],
                "instance": "function",
                "parameters": [
                    {
                        "name": "DT",
                        "type": "typename",
                        "description": "float or DT, determines the precision of the result"
                    }
                ],
                "ports": [
                    {
                        "name": "a",
                        "direction": "",
                        "type": "DT"
                    },
                    {
                        "name": "b",
                        "direction": "",
                        "type": "DT"
                    },
                    {
                        "name": "tol",
                        "direction": "",
                        "type": "DT"
                    },
                    {
                        "name": "res",
                        "direction": "",
                        "type": "DT *"
                    },
                    {
                        "name": "p",
                        "direction": "",
                        "type": "XF_USER_DATA_TYPE *"
                    }
                ]
            }
        },
        {
            "api_name": "xf::fintech::boxMullerTransform",
            "spec": {
                "schema": "vitis_libraries_api_list_schema-1.0",
                "api_name": "xf::fintech::boxMullerTransform",
                "display_name": "boxMullerTransform",
                "brief": "Box-Muller transform from uniform random number to normal random number.",
                "target_domain": "",
                "header_file_name": [
                    "rng.hpp"
                ],
                "search_paths": [
                    "L1/include/xf_fintech"
                ],
                "instance": "function",
                "parameters": [
                    {
                        "name": "mType",
                        "type": "typename",
                        "description": "data type"
                    }
                ],
                "ports": [
                    {
                        "name": "u1",
                        "direction": "",
                        "type": "mType"
                    },
                    {
                        "name": "u2",
                        "direction": "",
                        "type": "mType"
                    },
                    {
                        "name": "z1",
                        "direction": "",
                        "type": "mType &"
                    },
                    {
                        "name": "z2",
                        "direction": "",
                        "type": "mType &"
                    }
                ]
            }
        },
        {
            "api_name": "xf::fintech::inverseCumulativeNormalPPND7",
            "spec": {
                "schema": "vitis_libraries_api_list_schema-1.0",
                "api_name": "xf::fintech::inverseCumulativeNormalPPND7",
                "display_name": "inverseCumulativeNormalPPND7",
                "brief": "Inverse Cumulative transform from random number to normal random number.",
                "target_domain": "",
                "header_file_name": [
                    "rng.hpp"
                ],
                "search_paths": [
                    "L1/include/xf_fintech"
                ],
                "instance": "function",
                "parameters": [
                    {
                        "name": "mType",
                        "type": "typename",
                        "description": "data type."
                    }
                ],
                "ports": [
                    {
                        "name": "input",
                        "direction": "",
                        "type": "mType"
                    }
                ]
            }
        },
        {
            "api_name": "xf::fintech::inverseCumulativeNormalAcklam",
            "spec": {
                "schema": "vitis_libraries_api_list_schema-1.0",
                "api_name": "xf::fintech::inverseCumulativeNormalAcklam",
                "display_name": "inverseCumulativeNormalAcklam",
                "brief": "Inverse CumulativeNormal using Acklam's approximation to transform uniform random number to normal random number.",
                "target_domain": "",
                "header_file_name": [
                    "rng.hpp"
                ],
                "search_paths": [
                    "L1/include/xf_fintech"
                ],
                "instance": "function",
                "parameters": [
                    {
                        "name": "mType",
                        "type": "typename",
                        "description": "data type."
                    }
                ],
                "ports": [
                    {
                        "name": "input",
                        "direction": "",
                        "type": "mType"
                    }
                ]
            }
        },
        {
            "api_name": "xf::fintech::trsvCore",
            "spec": {
                "schema": "vitis_libraries_api_list_schema-1.0",
                "api_name": "xf::fintech::trsvCore",
                "display_name": "trsvCore",
                "brief": "Tridiagonal linear solver It solves tridiagonal linear system of equations by eliminating upper and lower diagonals To get result (U) divide each element of",
                "target_domain": "",
                "header_file_name": [
                    "trsv.hpp"
                ],
                "search_paths": [
                    "L1/include/xf_fintech"
                ],
                "instance": "function",
                "parameters": [
                    {
                        "name": "T",
                        "type": "class",
                        "description": "data type"
                    },
                    {
                        "name": "N",
                        "type": "unsigned int",
                        "description": "matrix size"
                    },
                    {
                        "name": "logN",
                        "type": "unsigned int",
                        "description": "log2(N)(TOREMOVE)"
                    },
                    {
                        "name": "NCU",
                        "type": "unsigned int",
                        "description": "number of compute units"
                    }
                ],
                "ports": [
                    {
                        "name": "inlow",
                        "direction": "",
                        "type": "T[N],"
                    },
                    {
                        "name": "indiag",
                        "direction": "",
                        "type": "T[N],"
                    },
                    {
                        "name": "inup",
                        "direction": "",
                        "type": "T[N],"
                    },
                    {
                        "name": "inrhs",
                        "direction": "",
                        "type": "T"
                    }
                ]
            }
        }
    ],
    "target_domain": ""
}
