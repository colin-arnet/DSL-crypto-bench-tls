/*
 * Copyright 2022 Xilinx, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#ifndef _XF_TVL1_SUBFUNCT_HPP_
#define _XF_TVL1_SUBFUNCT_HPP_

#include "hls_stream.h"
#include "common/xf_utility.hpp"
#include "common/xf_common.hpp"
#include "core/xf_math.h"
#include <iostream>

static ap_int<16> cubic_wts[16384] = {
    0,   0,     0,     0,   0,     16384, 0,     0,     0,     0,     0,     0,     0,   0,     0,     0,
    0,   0,     0,     0,   -360,  16349, 407,   -12,   0,     0,     0,     0,     0,   0,     0,     0,
    0,   0,     0,     0,   -675,  16245, 859,   -45,   0,     0,     0,     0,     0,   0,     0,     0,
    0,   0,     0,     0,   -946,  16077, 1351,  -98,   0,     0,     0,     0,     0,   0,     0,     0,
    0,   0,     0,     0,   -1176, 15848, 1880,  -168,  0,     0,     0,     0,     0,   0,     0,     0,
    0,   0,     0,     0,   -1367, 15562, 2442,  -253,  0,     0,     0,     0,     0,   0,     0,     0,
    0,   0,     0,     0,   -1521, 15223, 3033,  -351,  0,     0,     0,     0,     0,   0,     0,     0,
    0,   0,     0,     0,   -1641, 14834, 3650,  -459,  0,     0,     0,     0,     0,   0,     0,     0,
    0,   0,     0,     0,   -1728, 14400, 4288,  -576,  0,     0,     0,     0,     0,   0,     0,     0,
    0,   0,     0,     0,   -1785, 13924, 4944,  -699,  0,     0,     0,     0,     0,   0,     0,     0,
    0,   0,     0,     0,   -1815, 13409, 5615,  -825,  0,     0,     0,     0,     0,   0,     0,     0,
    0,   0,     0,     0,   -1819, 12860, 6296,  -953,  0,     0,     0,     0,     0,   0,     0,     0,
    0,   0,     0,     0,   -1800, 12280, 6984,  -1080, 0,     0,     0,     0,     0,   0,     0,     0,
    0,   0,     0,     0,   -1760, 11673, 7675,  -1204, 0,     0,     0,     0,     0,   0,     0,     0,
    0,   0,     0,     0,   -1701, 11043, 8365,  -1323, 0,     0,     0,     0,     0,   0,     0,     0,
    0,   0,     0,     0,   -1626, 10393, 9051,  -1434, 0,     0,     0,     0,     0,   0,     0,     0,
    0,   0,     0,     0,   -1536, 9728,  9728,  -1536, 0,     0,     0,     0,     0,   0,     0,     0,
    0,   0,     0,     0,   -1434, 9051,  10393, -1626, 0,     0,     0,     0,     0,   0,     0,     0,
    0,   0,     0,     0,   -1323, 8365,  11043, -1701, 0,     0,     0,     0,     0,   0,     0,     0,
    0,   0,     0,     0,   -1204, 7675,  11673, -1760, 0,     0,     0,     0,     0,   0,     0,     0,
    0,   0,     0,     0,   -1080, 6984,  12280, -1800, 0,     0,     0,     0,     0,   0,     0,     0,
    0,   0,     0,     0,   -953,  6296,  12860, -1819, 0,     0,     0,     0,     0,   0,     0,     0,
    0,   0,     0,     0,   -825,  5615,  13409, -1815, 0,     0,     0,     0,     0,   0,     0,     0,
    0,   0,     0,     0,   -699,  4944,  13924, -1785, 0,     0,     0,     0,     0,   0,     0,     0,
    0,   0,     0,     0,   -576,  4288,  14400, -1728, 0,     0,     0,     0,     0,   0,     0,     0,
    0,   0,     0,     0,   -459,  3650,  14834, -1641, 0,     0,     0,     0,     0,   0,     0,     0,
    0,   0,     0,     0,   -351,  3033,  15223, -1521, 0,     0,     0,     0,     0,   0,     0,     0,
    0,   0,     0,     0,   -253,  2442,  15562, -1367, 0,     0,     0,     0,     0,   0,     0,     0,
    0,   0,     0,     0,   -168,  1880,  15848, -1176, 0,     0,     0,     0,     0,   0,     0,     0,
    0,   0,     0,     0,   -98,   1351,  16077, -946,  0,     0,     0,     0,     0,   0,     0,     0,
    0,   0,     0,     0,   -45,   859,   16245, -675,  0,     0,     0,     0,     0,   0,     0,     0,
    0,   0,     0,     0,   -12,   407,   16349, -360,  0,     0,     0,     0,     0,   0,     0,     0,
    0,   -360,  0,     0,   0,     16349, 0,     0,     0,     407,   0,     0,     0,   -12,   0,     0,
    8,   -360,  -9,    0,   -360,  16313, 407,   -12,   -9,    407,   10,    0,     0,   -12,   0,     0,
    15,  -357,  -19,   1,   -674,  16210, 857,   -45,   -17,   404,   21,    -1,    0,   -12,   -1,    0,
    21,  -354,  -30,   2,   -944,  16042, 1348,  -98,   -24,   400,   34,    -2,    1,   -11,   -1,    0,
    26,  -349,  -41,   4,   -1173, 15814, 1876,  -168,  -29,   394,   47,    -4,    1,   -11,   -1,    0,
    30,  -342,  -54,   6,   -1364, 15529, 2437,  -253,  -34,   387,   61,    -6,    1,   -11,   -2,    0,
    33,  -335,  -67,   8,   -1518, 15190, 3026,  -350,  -38,   379,   75,    -9,    1,   -11,   -2,    0,
    36,  -326,  -80,   10,  -1637, 14802, 3642,  -458,  -41,   369,   91,    -11,   1,   -11,   -3,    0,
    38,  -317,  -94,   13,  -1724, 14369, 4279,  -575,  -43,   358,   107,   -14,   1,   -10,   -3,    0,
    39,  -306,  -109,  15,  -1782, 13894, 4934,  -697,  -44,   346,   123,   -17,   1,   -10,   -4,    0,
    40,  -295,  -124,  18,  -1811, 13380, 5603,  -823,  -45,   333,   140,   -21,   1,   -10,   -4,    1,
    40,  -283,  -138,  21,  -1815, 12832, 6283,  -951,  -45,   320,   157,   -24,   1,   -9,    -4,    1,
    40,  -270,  -154,  24,  -1796, 12253, 6969,  -1078, -45,   305,   174,   -27,   1,   -9,    -5,    1,
    39,  -257,  -169,  26,  -1756, 11648, 7658,  -1202, -44,   290,   191,   -30,   1,   -8,    -5,    1,
    37,  -243,  -184,  29,  -1697, 11019, 8347,  -1320, -42,   275,   208,   -33,   1,   -8,    -6,    1,
    36,  -229,  -199,  32,  -1622, 10371, 9031,  -1431, -40,   258,   225,   -36,   1,   -7,    -6,    1,
    34,  -214,  -214,  34,  -1533, 9707,  9707,  -1533, -38,   242,   242,   -38,   1,   -7,    -7,    1,
    32,  -199,  -229,  36,  -1431, 9031,  10371, -1622, -36,   225,   258,   -40,   1,   -6,    -7,    1,
    29,  -184,  -243,  37,  -1320, 8347,  11019, -1697, -33,   208,   275,   -42,   1,   -6,    -8,    1,
    26,  -169,  -257,  39,  -1202, 7658,  11648, -1756, -30,   191,   290,   -44,   1,   -5,    -8,    1,
    24,  -154,  -270,  40,  -1078, 6969,  12253, -1796, -27,   174,   305,   -45,   1,   -5,    -9,    1,
    21,  -138,  -283,  40,  -951,  6283,  12832, -1815, -24,   157,   320,   -45,   1,   -4,    -9,    1,
    18,  -124,  -295,  40,  -823,  5603,  13380, -1811, -21,   140,   333,   -45,   1,   -4,    -10,   1,
    15,  -109,  -306,  39,  -697,  4934,  13894, -1782, -17,   123,   346,   -44,   0,   -4,    -10,   1,
    13,  -94,   -317,  38,  -575,  4279,  14369, -1724, -14,   107,   358,   -43,   0,   -3,    -10,   1,
    10,  -80,   -326,  36,  -458,  3642,  14802, -1637, -11,   91,    369,   -41,   0,   -3,    -11,   1,
    8,   -67,   -335,  33,  -350,  3026,  15190, -1518, -9,    75,    379,   -38,   0,   -2,    -11,   1,
    6,   -54,   -342,  30,  -253,  2437,  15529, -1364, -6,    61,    387,   -34,   0,   -2,    -11,   1,
    4,   -41,   -349,  26,  -168,  1876,  15814, -1173, -4,    47,    394,   -29,   0,   -1,    -11,   1,
    2,   -30,   -354,  21,  -98,   1348,  16042, -944,  -2,    34,    400,   -24,   0,   -1,    -11,   1,
    1,   -19,   -357,  15,  -45,   857,   16210, -674,  -1,    21,    404,   -17,   0,   -1,    -12,   0,
    0,   -9,    -360,  8,   -12,   407,   16313, -360,  0,     10,    407,   -9,    0,   0,     -12,   0,
    0,   -675,  0,     0,   0,     16245, 0,     0,     0,     859,   0,     0,     0,   -45,   0,     0,
    15,  -674,  -17,   0,   -357,  16210, 404,   -12,   -19,   857,   21,    -1,    1,   -45,   -1,    0,
    28,  -669,  -35,   2,   -669,  16107, 852,   -45,   -35,   852,   45,    -2,    2,   -45,   -2,    0,
    39,  -662,  -56,   4,   -938,  15940, 1340,  -97,   -50,   843,   71,    -5,    3,   -44,   -4,    0,
    48,  -653,  -77,   7,   -1166, 15714, 1864,  -167,  -62,   831,   99,    -9,    3,   -44,   -5,    0,
    56,  -641,  -101,  10,  -1355, 15430, 2421,  -251,  -72,   816,   128,   -13,   4,   -43,   -7,    1,
    63,  -627,  -125,  14,  -1508, 15094, 3007,  -348,  -80,   798,   159,   -18,   4,   -42,   -8,    1,
    68,  -611,  -150,  19,  -1627, 14709, 3619,  -455,  -86,   778,   191,   -24,   5,   -41,   -10,   1,
    71,  -593,  -177,  24,  -1713, 14278, 4252,  -571,  -91,   755,   225,   -30,   5,   -40,   -12,   2,
    74,  -574,  -204,  29,  -1770, 13806, 4902,  -693,  -94,   730,   259,   -37,   5,   -38,   -14,   2,
    75,  -552,  -231,  34,  -1800, 13295, 5567,  -818,  -95,   703,   294,   -43,   5,   -37,   -15,   2,
    75,  -530,  -259,  39,  -1804, 12751, 6243,  -945,  -95,   674,   330,   -50,   5,   -35,   -17,   3,
    74,  -506,  -288,  44,  -1785, 12176, 6925,  -1071, -94,   644,   366,   -57,   5,   -34,   -19,   3,
    72,  -481,  -316,  50,  -1745, 11574, 7610,  -1194, -92,   612,   402,   -63,   5,   -32,   -21,   3,
    70,  -455,  -345,  55,  -1687, 10949, 8294,  -1312, -89,   579,   439,   -69,   5,   -30,   -23,   4,
    67,  -428,  -373,  59,  -1612, 10305, 8974,  -1422, -85,   545,   475,   -75,   4,   -29,   -25,   4,
    63,  -401,  -401,  63,  -1523, 9645,  9645,  -1523, -81,   510,   510,   -81,   4,   -27,   -27,   4,
    59,  -373,  -428,  67,  -1422, 8974,  10305, -1612, -75,   475,   545,   -85,   4,   -25,   -29,   4,
    55,  -345,  -455,  70,  -1312, 8294,  10949, -1687, -69,   439,   579,   -89,   4,   -23,   -30,   5,
    50,  -316,  -481,  72,  -1194, 7610,  11574, -1745, -63,   402,   612,   -92,   3,   -21,   -32,   5,
    44,  -288,  -506,  74,  -1071, 6925,  12176, -1785, -57,   366,   644,   -94,   3,   -19,   -34,   5,
    39,  -259,  -530,  75,  -945,  6243,  12751, -1804, -50,   330,   674,   -95,   3,   -17,   -35,   5,
    34,  -231,  -552,  75,  -818,  5567,  13295, -1800, -43,   294,   703,   -95,   2,   -15,   -37,   5,
    29,  -204,  -574,  74,  -693,  4902,  13806, -1770, -37,   259,   730,   -94,   2,   -14,   -38,   5,
    24,  -177,  -593,  71,  -571,  4252,  14278, -1713, -30,   225,   755,   -91,   2,   -12,   -40,   5,
    19,  -150,  -611,  68,  -455,  3619,  14709, -1627, -24,   191,   778,   -86,   1,   -10,   -41,   5,
    14,  -125,  -627,  63,  -348,  3007,  15094, -1508, -18,   159,   798,   -80,   1,   -8,    -42,   4,
    10,  -101,  -641,  56,  -251,  2421,  15430, -1355, -13,   128,   816,   -72,   1,   -7,    -43,   4,
    7,   -77,   -653,  48,  -167,  1864,  15714, -1166, -9,    99,    831,   -62,   0,   -5,    -44,   3,
    4,   -56,   -662,  39,  -97,   1340,  15940, -938,  -5,    71,    843,   -50,   0,   -4,    -44,   3,
    2,   -35,   -669,  28,  -45,   852,   16107, -669,  -2,    45,    852,   -35,   0,   -2,    -45,   2,
    0,   -17,   -674,  15,  -12,   404,   16210, -357,  -1,    21,    857,   -19,   0,   -1,    -45,   1,
    0,   -946,  0,     0,   0,     16077, 0,     0,     0,     1351,  0,     0,     0,   -98,   0,     0,
    21,  -944,  -24,   1,   -354,  16042, 400,   -11,   -30,   1348,  34,    -1,    2,   -98,   -2,    0,
    39,  -938,  -50,   3,   -662,  15940, 843,   -44,   -56,   1340,  71,    -4,    4,   -97,   -5,    0,
    55,  -928,  -78,   6,   -928,  15776, 1326,  -96,   -78,   1326,  111,   -8,    6,   -96,   -8,    1,
    68,  -915,  -109,  10,  -1154, 15551, 1845,  -165,  -97,   1307,  155,   -14,   7,   -95,   -11,   1,
    79,  -899,  -141,  15,  -1341, 15270, 2396,  -248,  -113,  1283,  201,   -21,   8,   -93,   -15,   2,
    88,  -879,  -175,  20,  -1492, 14938, 2976,  -344,  -125,  1255,  250,   -29,   9,   -91,   -18,   2,
    95,  -857,  -211,  27,  -1610, 14556, 3581,  -451,  -135,  1223,  301,   -38,   10,  -89,   -22,   3,
    100, -832,  -248,  33,  -1696, 14130, 4208,  -565,  -143,  1188,  354,   -47,   10,  -86,   -26,   3,
    103, -804,  -286,  40,  -1752, 13663, 4852,  -686,  -147,  1148,  408,   -58,   11,  -83,   -30,   4,
    105, -774,  -324,  48,  -1781, 13158, 5510,  -810,  -150,  1106,  463,   -68,   11,  -80,   -34,   5,
    105, -743,  -364,  55,  -1785, 12619, 6178,  -935,  -150,  1061,  519,   -79,   11,  -77,   -38,   6,
    104, -709,  -403,  62,  -1766, 12050, 6853,  -1060, -148,  1013,  576,   -89,   11,  -73,   -42,   6,
    102, -674,  -443,  70,  -1727, 11454, 7531,  -1182, -145,  963,   633,   -99,   11,  -70,   -46,   7,
    98,  -638,  -483,  76,  -1669, 10836, 8208,  -1298, -140,  911,   690,   -109,  10,  -66,   -50,   8,
    94,  -600,  -523,  83,  -1595, 10199, 8881,  -1407, -134,  857,   746,   -118,  10,  -62,   -54,   9,
    89,  -562,  -562,  89,  -1507, 9546,  9546,  -1507, -127,  802,   802,   -127,  9,   -58,   -58,   9,
    83,  -523,  -600,  94,  -1407, 8881,  10199, -1595, -118,  746,   857,   -134,  9,   -54,   -62,   10,
    76,  -483,  -638,  98,  -1298, 8208,  10836, -1669, -109,  690,   911,   -140,  8,   -50,   -66,   10,
    70,  -443,  -674,  102, -1182, 7531,  11454, -1727, -99,   633,   963,   -145,  7,   -46,   -70,   11,
    62,  -403,  -709,  104, -1060, 6853,  12050, -1766, -89,   576,   1013,  -148,  6,   -42,   -73,   11,
    55,  -364,  -743,  105, -935,  6178,  12619, -1785, -79,   519,   1061,  -150,  6,   -38,   -77,   11,
    48,  -324,  -774,  105, -810,  5510,  13158, -1781, -68,   463,   1106,  -150,  5,   -34,   -80,   11,
    40,  -286,  -804,  103, -686,  4852,  13663, -1752, -58,   408,   1148,  -147,  4,   -30,   -83,   11,
    33,  -248,  -832,  100, -565,  4208,  14130, -1696, -47,   354,   1188,  -143,  3,   -26,   -86,   10,
    27,  -211,  -857,  95,  -451,  3581,  14556, -1610, -38,   301,   1223,  -135,  3,   -22,   -89,   10,
    20,  -175,  -879,  88,  -344,  2976,  14938, -1492, -29,   250,   1255,  -125,  2,   -18,   -91,   9,
    15,  -141,  -899,  79,  -248,  2396,  15270, -1341, -21,   201,   1283,  -113,  2,   -15,   -93,   8,
    10,  -109,  -915,  68,  -165,  1845,  15551, -1154, -14,   155,   1307,  -97,   1,   -11,   -95,   7,
    6,   -78,   -928,  55,  -96,   1326,  15776, -928,  -8,    111,   1326,  -78,   1,   -8,    -96,   6,
    3,   -50,   -938,  39,  -44,   843,   15940, -662,  -4,    71,    1340,  -56,   0,   -5,    -97,   4,
    1,   -24,   -944,  21,  -11,   400,   16042, -354,  -1,    34,    1348,  -30,   0,   -2,    -98,   2,
    0,   -1176, 0,     0,   0,     15848, 0,     0,     0,     1880,  0,     0,     0,   -168,  0,     0,
    26,  -1173, -29,   1,   -349,  15814, 394,   -11,   -41,   1876,  47,    -1,    4,   -168,  -4,    0,
    48,  -1166, -62,   3,   -653,  15714, 831,   -44,   -77,   1864,  99,    -5,    7,   -167,  -9,    0,
    68,  -1154, -97,   7,   -915,  15551, 1307,  -95,   -109,  1845,  155,   -11,   10,  -165,  -14,   1,
    84,  -1138, -135,  12,  -1138, 15330, 1818,  -162,  -135,  1818,  216,   -19,   12,  -162,  -19,   2,
    98,  -1117, -175,  18,  -1322, 15053, 2362,  -245,  -157,  1786,  280,   -29,   14,  -160,  -25,   3,
    109, -1093, -218,  25,  -1471, 14725, 2934,  -340,  -175,  1747,  348,   -40,   16,  -156,  -31,   4,
    118, -1065, -262,  33,  -1587, 14349, 3530,  -444,  -188,  1702,  419,   -53,   17,  -152,  -37,   5,
    124, -1034, -308,  41,  -1671, 13929, 4148,  -557,  -198,  1652,  492,   -66,   18,  -148,  -44,   6,
    128, -999,  -355,  50,  -1727, 13468, 4783,  -676,  -205,  1598,  567,   -80,   18,  -143,  -51,   7,
    130, -962,  -403,  59,  -1756, 12970, 5431,  -798,  -208,  1539,  644,   -95,   19,  -137,  -58,   8,
    131, -923,  -452,  68,  -1760, 12439, 6090,  -922,  -209,  1476,  722,   -109,  19,  -132,  -65,   10,
    129, -881,  -501,  78,  -1741, 11878, 6756,  -1045, -207,  1409,  801,   -124,  18,  -126,  -72,   11,
    126, -838,  -551,  86,  -1702, 11291, 7424,  -1165, -202,  1339,  881,   -138,  18,  -120,  -79,   12,
    122, -793,  -600,  95,  -1645, 10682, 8091,  -1280, -195,  1267,  960,   -152,  17,  -113,  -86,   14,
    117, -746,  -650,  103, -1572, 10053, 8755,  -1387, -187,  1193,  1039,  -165,  17,  -107,  -93,   15,
    110, -698,  -698,  110, -1486, 9410,  9410,  -1486, -176,  1116,  1116,  -176,  16,  -100,  -100,  16,
    103, -650,  -746,  117, -1387, 8755,  10053, -1572, -165,  1039,  1193,  -187,  15,  -93,   -107,  17,
    95,  -600,  -793,  122, -1280, 8091,  10682, -1645, -152,  960,   1267,  -195,  14,  -86,   -113,  17,
    86,  -551,  -838,  126, -1165, 7424,  11291, -1702, -138,  881,   1339,  -202,  12,  -79,   -120,  18,
    78,  -501,  -881,  129, -1045, 6756,  11878, -1741, -124,  801,   1409,  -207,  11,  -72,   -126,  18,
    68,  -452,  -923,  131, -922,  6090,  12439, -1760, -109,  722,   1476,  -209,  10,  -65,   -132,  19,
    59,  -403,  -962,  130, -798,  5431,  12970, -1756, -95,   644,   1539,  -208,  8,   -58,   -137,  19,
    50,  -355,  -999,  128, -676,  4783,  13468, -1727, -80,   567,   1598,  -205,  7,   -51,   -143,  18,
    41,  -308,  -1034, 124, -557,  4148,  13929, -1671, -66,   492,   1652,  -198,  6,   -44,   -148,  18,
    33,  -262,  -1065, 118, -444,  3530,  14349, -1587, -53,   419,   1702,  -188,  5,   -37,   -152,  17,
    25,  -218,  -1093, 109, -340,  2934,  14725, -1471, -40,   348,   1747,  -175,  4,   -31,   -156,  16,
    18,  -175,  -1117, 98,  -245,  2362,  15053, -1322, -29,   280,   1786,  -157,  3,   -25,   -160,  14,
    12,  -135,  -1138, 84,  -162,  1818,  15330, -1138, -19,   216,   1818,  -135,  2,   -19,   -162,  12,
    7,   -97,   -1154, 68,  -95,   1307,  15551, -915,  -11,   155,   1845,  -109,  1,   -14,   -165,  10,
    3,   -62,   -1166, 48,  -44,   831,   15714, -653,  -5,    99,    1864,  -77,   0,   -9,    -167,  7,
    1,   -29,   -1173, 26,  -11,   394,   15814, -349,  -1,    47,    1876,  -41,   0,   -4,    -168,  4,
    0,   -1367, 0,     0,   0,     15562, 0,     0,     0,     2442,  0,     0,     0,   -253,  0,     0,
    30,  -1364, -34,   1,   -342,  15529, 387,   -11,   -54,   2437,  61,    -2,    6,   -253,  -6,    0,
    56,  -1355, -72,   4,   -641,  15430, 816,   -43,   -101,  2421,  128,   -7,    10,  -251,  -13,   1,
    79,  -1341, -113,  8,   -899,  15270, 1283,  -93,   -141,  2396,  201,   -15,   15,  -248,  -21,   2,
    98,  -1322, -157,  14,  -1117, 15053, 1786,  -160,  -175,  2362,  280,   -25,   18,  -245,  -29,   3,
    114, -1298, -204,  21,  -1298, 14781, 2319,  -240,  -204,  2319,  364,   -38,   21,  -240,  -38,   4,
    127, -1270, -253,  29,  -1445, 14459, 2881,  -333,  -227,  2269,  452,   -52,   23,  -235,  -47,   5,
    137, -1238, -304,  38,  -1558, 14090, 3467,  -436,  -245,  2211,  544,   -68,   25,  -229,  -56,   7,
    144, -1201, -358,  48,  -1641, 13678, 4073,  -547,  -258,  2146,  639,   -86,   27,  -222,  -66,   9,
    149, -1162, -412,  58,  -1696, 13225, 4696,  -664,  -266,  2075,  737,   -104,  28,  -215,  -76,   11,
    151, -1119, -468,  69,  -1724, 12736, 5333,  -784,  -270,  1998,  837,   -123,  28,  -207,  -87,   13,
    152, -1073, -525,  79,  -1728, 12215, 5980,  -905,  -271,  1917,  938,   -142,  28,  -199,  -97,   15,
    150, -1024, -583,  90,  -1710, 11664, 6634,  -1026, -268,  1830,  1041,  -161,  28,  -190,  -108,  17,
    147, -974,  -640,  100, -1672, 11088, 7290,  -1144, -262,  1740,  1144,  -179,  27,  -180,  -119,  19,
    142, -921,  -698,  110, -1616, 10489, 7945,  -1257, -254,  1646,  1247,  -197,  26,  -171,  -129,  20,
    136, -867,  -755,  120, -1544, 9872,  8597,  -1362, -242,  1549,  1349,  -214,  25,  -161,  -140,  22,
    128, -812,  -812,  128, -1459, 9240,  9240,  -1459, -229,  1450,  1450,  -229,  24,  -150,  -150,  24,
    120, -755,  -867,  136, -1362, 8597,  9872,  -1544, -214,  1349,  1549,  -242,  22,  -140,  -161,  25,
    110, -698,  -921,  142, -1257, 7945,  10489, -1616, -197,  1247,  1646,  -254,  20,  -129,  -171,  26,
    100, -640,  -974,  147, -1144, 7290,  11088, -1672, -179,  1144,  1740,  -262,  19,  -119,  -180,  27,
    90,  -583,  -1024, 150, -1026, 6634,  11664, -1710, -161,  1041,  1830,  -268,  17,  -108,  -190,  28,
    79,  -525,  -1073, 152, -905,  5980,  12215, -1728, -142,  938,   1917,  -271,  15,  -97,   -199,  28,
    69,  -468,  -1119, 151, -784,  5333,  12736, -1724, -123,  837,   1998,  -270,  13,  -87,   -207,  28,
    58,  -412,  -1162, 149, -664,  4696,  13225, -1696, -104,  737,   2075,  -266,  11,  -76,   -215,  28,
    48,  -358,  -1201, 144, -547,  4073,  13678, -1641, -86,   639,   2146,  -258,  9,   -66,   -222,  27,
    38,  -304,  -1238, 137, -436,  3467,  14090, -1558, -68,   544,   2211,  -245,  7,   -56,   -229,  25,
    29,  -253,  -1270, 127, -333,  2881,  14459, -1445, -52,   452,   2269,  -227,  5,   -47,   -235,  23,
    21,  -204,  -1298, 114, -240,  2319,  14781, -1298, -38,   364,   2319,  -204,  4,   -38,   -240,  21,
    14,  -157,  -1322, 98,  -160,  1786,  15053, -1117, -25,   280,   2362,  -175,  3,   -29,   -245,  18,
    8,   -113,  -1341, 79,  -93,   1283,  15270, -899,  -15,   201,   2396,  -141,  2,   -21,   -248,  15,
    4,   -72,   -1355, 56,  -43,   816,   15430, -641,  -7,    128,   2421,  -101,  1,   -13,   -251,  10,
    1,   -34,   -1364, 30,  -11,   387,   15529, -342,  -2,    61,    2437,  -54,   0,   -6,    -253,  6,
    0,   -1521, 0,     0,   0,     15223, 0,     0,     0,     3033,  0,     0,     0,   -351,  0,     0,
    33,  -1518, -38,   1,   -335,  15190, 379,   -11,   -67,   3026,  75,    -2,    8,   -350,  -9,    0,
    63,  -1508, -80,   4,   -627,  15094, 798,   -42,   -125,  3007,  159,   -8,    14,  -348,  -18,   1,
    88,  -1492, -125,  9,   -879,  14938, 1255,  -91,   -175,  2976,  250,   -18,   20,  -344,  -29,   2,
    109, -1471, -175,  16,  -1093, 14725, 1747,  -156,  -218,  2934,  348,   -31,   25,  -340,  -40,   4,
    127, -1445, -227,  23,  -1270, 14459, 2269,  -235,  -253,  2881,  452,   -47,   29,  -333,  -52,   5,
    141, -1413, -282,  33,  -1413, 14144, 2818,  -326,  -282,  2818,  561,   -65,   33,  -326,  -65,   8,
    152, -1377, -339,  43,  -1524, 13783, 3391,  -427,  -304,  2746,  676,   -85,   35,  -318,  -78,   10,
    160, -1337, -398,  53,  -1606, 13380, 3984,  -535,  -320,  2666,  794,   -107,  37,  -308,  -92,   12,
    166, -1293, -459,  65,  -1659, 12937, 4594,  -649,  -331,  2578,  915,   -129,  38,  -298,  -106,  15,
    168, -1245, -521,  77,  -1686, 12459, 5217,  -767,  -336,  2482,  1039,  -153,  39,  -287,  -120,  18,
    169, -1194, -584,  88,  -1690, 11949, 5850,  -885,  -337,  2381,  1166,  -176,  39,  -275,  -135,  20,
    167, -1140, -648,  100, -1672, 11410, 6489,  -1003, -333,  2273,  1293,  -200,  39,  -263,  -150,  23,
    163, -1084, -712,  112, -1635, 10846, 7131,  -1119, -326,  2161,  1421,  -223,  38,  -250,  -164,  26,
    158, -1025, -777,  123, -1580, 10260, 7772,  -1229, -315,  2044,  1549,  -245,  36,  -237,  -179,  28,
    151, -965,  -840,  133, -1510, 9657,  8409,  -1333, -301,  1924,  1675,  -266,  35,  -223,  -194,  31,
    143, -903,  -903,  143, -1427, 9039,  9039,  -1427, -284,  1801,  1801,  -284,  33,  -208,  -208,  33,
    133, -840,  -965,  151, -1333, 8409,  9657,  -1510, -266,  1675,  1924,  -301,  31,  -194,  -223,  35,
    123, -777,  -1025, 158, -1229, 7772,  10260, -1580, -245,  1549,  2044,  -315,  28,  -179,  -237,  36,
    112, -712,  -1084, 163, -1119, 7131,  10846, -1635, -223,  1421,  2161,  -326,  26,  -164,  -250,  38,
    100, -648,  -1140, 167, -1003, 6489,  11410, -1672, -200,  1293,  2273,  -333,  23,  -150,  -263,  39,
    88,  -584,  -1194, 169, -885,  5850,  11949, -1690, -176,  1166,  2381,  -337,  20,  -135,  -275,  39,
    77,  -521,  -1245, 168, -767,  5217,  12459, -1686, -153,  1039,  2482,  -336,  18,  -120,  -287,  39,
    65,  -459,  -1293, 166, -649,  4594,  12937, -1659, -129,  915,   2578,  -331,  15,  -106,  -298,  38,
    53,  -398,  -1337, 160, -535,  3984,  13380, -1606, -107,  794,   2666,  -320,  12,  -92,   -308,  37,
    43,  -339,  -1377, 152, -427,  3391,  13783, -1524, -85,   676,   2746,  -304,  10,  -78,   -318,  35,
    33,  -282,  -1413, 141, -326,  2818,  14144, -1413, -65,   561,   2818,  -282,  8,   -65,   -326,  33,
    23,  -227,  -1445, 127, -235,  2269,  14459, -1270, -47,   452,   2881,  -253,  5,   -52,   -333,  29,
    16,  -175,  -1471, 109, -156,  1747,  14725, -1093, -31,   348,   2934,  -218,  4,   -40,   -340,  25,
    9,   -125,  -1492, 88,  -91,   1255,  14938, -879,  -18,   250,   2976,  -175,  2,   -29,   -344,  20,
    4,   -80,   -1508, 63,  -42,   798,   15094, -627,  -8,    159,   3007,  -125,  1,   -18,   -348,  14,
    1,   -38,   -1518, 33,  -11,   379,   15190, -335,  -2,    75,    3026,  -67,   0,   -9,    -350,  8,
    0,   -1641, 0,     0,   0,     14834, 0,     0,     0,     3650,  0,     0,     0,   -459,  0,     0,
    36,  -1637, -41,   1,   -326,  14802, 369,   -11,   -80,   3642,  91,    -3,    10,  -458,  -11,   0,
    68,  -1627, -86,   5,   -611,  14709, 778,   -41,   -150,  3619,  191,   -10,   19,  -455,  -24,   1,
    95,  -1610, -135,  10,  -857,  14556, 1223,  -89,   -211,  3581,  301,   -22,   27,  -451,  -38,   3,
    118, -1587, -188,  17,  -1065, 14349, 1702,  -152,  -262,  3530,  419,   -37,   33,  -444,  -53,   5,
    137, -1558, -245,  25,  -1238, 14090, 2211,  -229,  -304,  3467,  544,   -56,   38,  -436,  -68,   7,
    152, -1524, -304,  35,  -1377, 13783, 2746,  -318,  -339,  3391,  676,   -78,   43,  -427,  -85,   10,
    164, -1485, -365,  46,  -1485, 13431, 3304,  -416,  -365,  3304,  813,   -102,  46,  -416,  -102,  13,
    173, -1442, -429,  58,  -1565, 13038, 3882,  -522,  -385,  3208,  955,   -128,  48,  -404,  -120,  16,
    179, -1394, -495,  70,  -1617, 12607, 4477,  -633,  -398,  3102,  1101,  -156,  50,  -390,  -139,  20,
    182, -1343, -562,  83,  -1643, 12141, 5084,  -747,  -404,  2987,  1251,  -184,  51,  -376,  -157,  23,
    182, -1288, -630,  95,  -1647, 11644, 5701,  -863,  -405,  2865,  1403,  -212,  51,  -361,  -177,  27,
    180, -1230, -699,  108, -1630, 11119, 6323,  -978,  -401,  2735,  1556,  -241,  50,  -344,  -196,  30,
    176, -1169, -769,  121, -1593, 10569, 6949,  -1090, -392,  2600,  1710,  -268,  49,  -327,  -215,  34,
    170, -1106, -838,  132, -1540, 9999,  7574,  -1198, -379,  2460,  1863,  -295,  48,  -310,  -235,  37,
    163, -1041, -906,  144, -1472, 9410,  8195,  -1299, -362,  2315,  2016,  -320,  46,  -291,  -254,  40,
    154, -974,  -974,  154, -1391, 8808,  8808,  -1391, -342,  2167,  2167,  -342,  43,  -273,  -273,  43,
    144, -906,  -1041, 163, -1299, 8195,  9410,  -1472, -320,  2016,  2315,  -362,  40,  -254,  -291,  46,
    132, -838,  -1106, 170, -1198, 7574,  9999,  -1540, -295,  1863,  2460,  -379,  37,  -235,  -310,  48,
    121, -769,  -1169, 176, -1090, 6949,  10569, -1593, -268,  1710,  2600,  -392,  34,  -215,  -327,  49,
    108, -699,  -1230, 180, -978,  6323,  11119, -1630, -241,  1556,  2735,  -401,  30,  -196,  -344,  50,
    95,  -630,  -1288, 182, -863,  5701,  11644, -1647, -212,  1403,  2865,  -405,  27,  -177,  -361,  51,
    83,  -562,  -1343, 182, -747,  5084,  12141, -1643, -184,  1251,  2987,  -404,  23,  -157,  -376,  51,
    70,  -495,  -1394, 179, -633,  4477,  12607, -1617, -156,  1101,  3102,  -398,  20,  -139,  -390,  50,
    58,  -429,  -1442, 173, -522,  3882,  13038, -1565, -128,  955,   3208,  -385,  16,  -120,  -404,  48,
    46,  -365,  -1485, 164, -416,  3304,  13431, -1485, -102,  813,   3304,  -365,  13,  -102,  -416,  46,
    35,  -304,  -1524, 152, -318,  2746,  13783, -1377, -78,   676,   3391,  -339,  10,  -85,   -427,  43,
    25,  -245,  -1558, 137, -229,  2211,  14090, -1238, -56,   544,   3467,  -304,  7,   -68,   -436,  38,
    17,  -188,  -1587, 118, -152,  1702,  14349, -1065, -37,   419,   3530,  -262,  5,   -53,   -444,  33,
    10,  -135,  -1610, 95,  -89,   1223,  14556, -857,  -22,   301,   3581,  -211,  3,   -38,   -451,  27,
    5,   -86,   -1627, 68,  -41,   778,   14709, -611,  -10,   191,   3619,  -150,  1,   -24,   -455,  19,
    1,   -41,   -1637, 36,  -11,   369,   14802, -326,  -3,    91,    3642,  -80,   0,   -11,   -458,  10,
    0,   -1728, 0,     0,   0,     14400, 0,     0,     0,     4288,  0,     0,     0,   -576,  0,     0,
    38,  -1724, -43,   1,   -317,  14369, 358,   -10,   -94,   4279,  107,   -3,    13,  -575,  -14,   0,
    71,  -1713, -91,   5,   -593,  14278, 755,   -40,   -177,  4252,  225,   -12,   24,  -571,  -30,   2,
    100, -1696, -143,  10,  -832,  14130, 1188,  -86,   -248,  4208,  354,   -26,   33,  -565,  -47,   3,
    124, -1671, -198,  18,  -1034, 13929, 1652,  -148,  -308,  4148,  492,   -44,   41,  -557,  -66,   6,
    144, -1641, -258,  27,  -1201, 13678, 2146,  -222,  -358,  4073,  639,   -66,   48,  -547,  -86,   9,
    160, -1606, -320,  37,  -1337, 13380, 2666,  -308,  -398,  3984,  794,   -92,   53,  -535,  -107,  12,
    173, -1565, -385,  48,  -1442, 13038, 3208,  -404,  -429,  3882,  955,   -120,  58,  -522,  -128,  16,
    182, -1519, -452,  61,  -1519, 12656, 3769,  -506,  -452,  3769,  1122,  -151,  61,  -506,  -151,  20,
    188, -1469, -521,  74,  -1569, 12238, 4346,  -614,  -467,  3644,  1294,  -183,  63,  -490,  -174,  25,
    191, -1414, -592,  87,  -1595, 11785, 4935,  -725,  -475,  3509,  1470,  -216,  64,  -471,  -197,  29,
    192, -1356, -664,  100, -1599, 11303, 5534,  -837,  -476,  3366,  1648,  -249,  64,  -452,  -221,  34,
    190, -1295, -737,  114, -1582, 10793, 6138,  -949,  -471,  3214,  1828,  -283,  63,  -432,  -246,  38,
    186, -1231, -809,  127, -1547, 10260, 6745,  -1058, -461,  3055,  2009,  -315,  62,  -410,  -270,  42,
    179, -1165, -882,  140, -1495, 9706,  7352,  -1163, -445,  2890,  2189,  -346,  60,  -388,  -294,  47,
    171, -1096, -955,  151, -1429, 9135,  7955,  -1261, -425,  2720,  2369,  -375,  57,  -365,  -318,  50,
    162, -1026, -1026, 162, -1350, 8550,  8550,  -1350, -402,  2546,  2546,  -402,  54,  -342,  -342,  54,
    151, -955,  -1096, 171, -1261, 7955,  9135,  -1429, -375,  2369,  2720,  -425,  50,  -318,  -365,  57,
    140, -882,  -1165, 179, -1163, 7352,  9706,  -1495, -346,  2189,  2890,  -445,  47,  -294,  -388,  60,
    127, -809,  -1231, 186, -1058, 6745,  10260, -1547, -315,  2009,  3055,  -461,  42,  -270,  -410,  62,
    114, -737,  -1295, 190, -949,  6138,  10793, -1582, -283,  1828,  3214,  -471,  38,  -246,  -432,  63,
    100, -664,  -1356, 192, -837,  5534,  11303, -1599, -249,  1648,  3366,  -476,  34,  -221,  -452,  64,
    87,  -592,  -1414, 191, -725,  4935,  11785, -1595, -216,  1470,  3509,  -475,  29,  -197,  -471,  64,
    74,  -521,  -1469, 188, -614,  4346,  12238, -1569, -183,  1294,  3644,  -467,  25,  -174,  -490,  63,
    61,  -452,  -1519, 182, -506,  3769,  12656, -1519, -151,  1122,  3769,  -452,  20,  -151,  -506,  61,
    48,  -385,  -1565, 173, -404,  3208,  13038, -1442, -120,  955,   3882,  -429,  16,  -128,  -522,  58,
    37,  -320,  -1606, 160, -308,  2666,  13380, -1337, -92,   794,   3984,  -398,  12,  -107,  -535,  53,
    27,  -258,  -1641, 144, -222,  2146,  13678, -1201, -66,   639,   4073,  -358,  9,   -86,   -547,  48,
    18,  -198,  -1671, 124, -148,  1652,  13929, -1034, -44,   492,   4148,  -308,  6,   -66,   -557,  41,
    10,  -143,  -1696, 100, -86,   1188,  14130, -832,  -26,   354,   4208,  -248,  3,   -47,   -565,  33,
    5,   -91,   -1713, 71,  -40,   755,   14278, -593,  -12,   225,   4252,  -177,  2,   -30,   -571,  24,
    1,   -43,   -1724, 38,  -10,   358,   14369, -317,  -3,    107,   4279,  -94,   0,   -14,   -575,  13,
    0,   -1785, 0,     0,   0,     13924, 0,     0,     0,     4944,  0,     0,     0,   -699,  0,     0,
    39,  -1782, -44,   1,   -306,  13894, 346,   -10,   -109,  4934,  123,   -4,    15,  -697,  -17,   0,
    74,  -1770, -94,   5,   -574,  13806, 730,   -38,   -204,  4902,  259,   -14,   29,  -693,  -37,   2,
    103, -1752, -147,  11,  -804,  13663, 1148,  -83,   -286,  4852,  408,   -30,   40,  -686,  -58,   4,
    128, -1727, -205,  18,  -999,  13468, 1598,  -143,  -355,  4783,  567,   -51,   50,  -676,  -80,   7,
    149, -1696, -266,  28,  -1162, 13225, 2075,  -215,  -412,  4696,  737,   -76,   58,  -664,  -104,  11,
    166, -1659, -331,  38,  -1293, 12937, 2578,  -298,  -459,  4594,  915,   -106,  65,  -649,  -129,  15,
    179, -1617, -398,  50,  -1394, 12607, 3102,  -390,  -495,  4477,  1101,  -139,  70,  -633,  -156,  20,
    188, -1569, -467,  63,  -1469, 12238, 3644,  -490,  -521,  4346,  1294,  -174,  74,  -614,  -183,  25,
    195, -1517, -539,  76,  -1517, 11833, 4202,  -594,  -539,  4202,  1492,  -211,  76,  -594,  -211,  30,
    198, -1461, -612,  90,  -1542, 11395, 4772,  -701,  -548,  4047,  1694,  -249,  77,  -572,  -239,  35,
    198, -1401, -686,  104, -1546, 10929, 5351,  -810,  -549,  3881,  1900,  -288,  78,  -548,  -268,  41,
    196, -1338, -761,  118, -1530, 10436, 5935,  -918,  -543,  3706,  2108,  -326,  77,  -524,  -298,  46,
    192, -1272, -836,  131, -1496, 9920,  6522,  -1023, -531,  3523,  2316,  -363,  75,  -498,  -327,  51,
    185, -1203, -912,  144, -1446, 9385,  7109,  -1124, -513,  3333,  2524,  -399,  73,  -471,  -357,  56,
    177, -1133, -986,  156, -1381, 8833,  7692,  -1219, -491,  3137,  2731,  -433,  69,  -443,  -386,  61,
    167, -1060, -1060, 167, -1305, 8267,  8267,  -1305, -464,  2936,  2936,  -464,  66,  -415,  -415,  66,
    156, -986,  -1133, 177, -1219, 7692,  8833,  -1381, -433,  2731,  3137,  -491,  61,  -386,  -443,  69,
    144, -912,  -1203, 185, -1124, 7109,  9385,  -1446, -399,  2524,  3333,  -513,  56,  -357,  -471,  73,
    131, -836,  -1272, 192, -1023, 6522,  9920,  -1496, -363,  2316,  3523,  -531,  51,  -327,  -498,  75,
    118, -761,  -1338, 196, -918,  5935,  10436, -1530, -326,  2108,  3706,  -543,  46,  -298,  -524,  77,
    104, -686,  -1401, 198, -810,  5351,  10929, -1546, -288,  1900,  3881,  -549,  41,  -268,  -548,  78,
    90,  -612,  -1461, 198, -701,  4772,  11395, -1542, -249,  1694,  4047,  -548,  35,  -239,  -572,  77,
    76,  -539,  -1517, 195, -594,  4202,  11833, -1517, -211,  1492,  4202,  -539,  30,  -211,  -594,  76,
    63,  -467,  -1569, 188, -490,  3644,  12238, -1469, -174,  1294,  4346,  -521,  25,  -183,  -614,  74,
    50,  -398,  -1617, 179, -390,  3102,  12607, -1394, -139,  1101,  4477,  -495,  20,  -156,  -633,  70,
    38,  -331,  -1659, 166, -298,  2578,  12937, -1293, -106,  915,   4594,  -459,  15,  -129,  -649,  65,
    28,  -266,  -1696, 149, -215,  2075,  13225, -1162, -76,   737,   4696,  -412,  11,  -104,  -664,  58,
    18,  -205,  -1727, 128, -143,  1598,  13468, -999,  -51,   567,   4783,  -355,  7,   -80,   -676,  50,
    11,  -147,  -1752, 103, -83,   1148,  13663, -804,  -30,   408,   4852,  -286,  4,   -58,   -686,  40,
    5,   -94,   -1770, 74,  -38,   730,   13806, -574,  -14,   259,   4902,  -204,  2,   -37,   -693,  29,
    1,   -44,   -1782, 39,  -10,   346,   13894, -306,  -4,    123,   4934,  -109,  0,   -17,   -697,  15,
    0,   -1815, 0,     0,   0,     13409, 0,     0,     0,     5615,  0,     0,     0,   -825,  0,     0,
    40,  -1811, -45,   1,   -295,  13380, 333,   -10,   -124,  5603,  140,   -4,    18,  -823,  -21,   1,
    75,  -1800, -95,   5,   -552,  13295, 703,   -37,   -231,  5567,  294,   -15,   34,  -818,  -43,   2,
    105, -1781, -150,  11,  -774,  13158, 1106,  -80,   -324,  5510,  463,   -34,   48,  -810,  -68,   5,
    130, -1756, -208,  19,  -962,  12970, 1539,  -137,  -403,  5431,  644,   -58,   59,  -798,  -95,   8,
    151, -1724, -270,  28,  -1119, 12736, 1998,  -207,  -468,  5333,  837,   -87,   69,  -784,  -123,  13,
    168, -1686, -336,  39,  -1245, 12459, 2482,  -287,  -521,  5217,  1039,  -120,  77,  -767,  -153,  18,
    182, -1643, -404,  51,  -1343, 12141, 2987,  -376,  -562,  5084,  1251,  -157,  83,  -747,  -184,  23,
    191, -1595, -475,  64,  -1414, 11785, 3509,  -471,  -592,  4935,  1470,  -197,  87,  -725,  -216,  29,
    198, -1542, -548,  77,  -1461, 11395, 4047,  -572,  -612,  4772,  1694,  -239,  90,  -701,  -249,  35,
    201, -1485, -622,  91,  -1485, 10974, 4595,  -675,  -622,  4595,  1924,  -283,  91,  -675,  -283,  42,
    202, -1425, -697,  106, -1489, 10525, 5153,  -780,  -623,  4407,  2158,  -327,  92,  -648,  -317,  48,
    199, -1360, -774,  120, -1473, 10050, 5716,  -884,  -617,  4209,  2394,  -370,  91,  -618,  -352,  54,
    195, -1293, -850,  133, -1440, 9554,  6281,  -985,  -603,  4001,  2630,  -413,  89,  -588,  -386,  61,
    188, -1223, -927,  147, -1392, 9038,  6846,  -1083, -583,  3785,  2867,  -453,  86,  -556,  -421,  67,
    180, -1151, -1003, 159, -1330, 8506,  7407,  -1174, -557,  3562,  3102,  -492,  82,  -523,  -456,  72,
    170, -1078, -1078, 170, -1257, 7962,  7962,  -1257, -526,  3334,  3334,  -526,  77,  -490,  -490,  77,
    159, -1003, -1151, 180, -1174, 7407,  8506,  -1330, -492,  3102,  3562,  -557,  72,  -456,  -523,  82,
    147, -927,  -1223, 188, -1083, 6846,  9038,  -1392, -453,  2867,  3785,  -583,  67,  -421,  -556,  86,
    133, -850,  -1293, 195, -985,  6281,  9554,  -1440, -413,  2630,  4001,  -603,  61,  -386,  -588,  89,
    120, -774,  -1360, 199, -884,  5716,  10050, -1473, -370,  2394,  4209,  -617,  54,  -352,  -618,  91,
    106, -697,  -1425, 202, -780,  5153,  10525, -1489, -327,  2158,  4407,  -623,  48,  -317,  -648,  92,
    91,  -622,  -1485, 201, -675,  4595,  10974, -1485, -283,  1924,  4595,  -622,  42,  -283,  -675,  91,
    77,  -548,  -1542, 198, -572,  4047,  11395, -1461, -239,  1694,  4772,  -612,  35,  -249,  -701,  90,
    64,  -475,  -1595, 191, -471,  3509,  11785, -1414, -197,  1470,  4935,  -592,  29,  -216,  -725,  87,
    51,  -404,  -1643, 182, -376,  2987,  12141, -1343, -157,  1251,  5084,  -562,  23,  -184,  -747,  83,
    39,  -336,  -1686, 168, -287,  2482,  12459, -1245, -120,  1039,  5217,  -521,  18,  -153,  -767,  77,
    28,  -270,  -1724, 151, -207,  1998,  12736, -1119, -87,   837,   5333,  -468,  13,  -123,  -784,  69,
    19,  -208,  -1756, 130, -137,  1539,  12970, -962,  -58,   644,   5431,  -403,  8,   -95,   -798,  59,
    11,  -150,  -1781, 105, -80,   1106,  13158, -774,  -34,   463,   5510,  -324,  5,   -68,   -810,  48,
    5,   -95,   -1800, 75,  -37,   703,   13295, -552,  -15,   294,   5567,  -231,  2,   -43,   -818,  34,
    1,   -45,   -1811, 40,  -10,   333,   13380, -295,  -4,    140,   5603,  -124,  1,   -21,   -823,  18,
    0,   -1819, 0,     0,   0,     12860, 0,     0,     0,     6296,  0,     0,     0,   -953,  0,     0,
    40,  -1815, -45,   1,   -283,  12832, 320,   -9,    -138,  6283,  157,   -4,    21,  -951,  -24,   1,
    75,  -1804, -95,   5,   -530,  12751, 674,   -35,   -259,  6243,  330,   -17,   39,  -945,  -50,   3,
    105, -1785, -150,  11,  -743,  12619, 1061,  -77,   -364,  6178,  519,   -38,   55,  -935,  -79,   6,
    131, -1760, -209,  19,  -923,  12439, 1476,  -132,  -452,  6090,  722,   -65,   68,  -922,  -109,  10,
    152, -1728, -271,  28,  -1073, 12215, 1917,  -199,  -525,  5980,  938,   -97,   79,  -905,  -142,  15,
    169, -1690, -337,  39,  -1194, 11949, 2381,  -275,  -584,  5850,  1166,  -135,  88,  -885,  -176,  20,
    182, -1647, -405,  51,  -1288, 11644, 2865,  -361,  -630,  5701,  1403,  -177,  95,  -863,  -212,  27,
    192, -1599, -476,  64,  -1356, 11303, 3366,  -452,  -664,  5534,  1648,  -221,  100, -837,  -249,  34,
    198, -1546, -549,  78,  -1401, 10929, 3881,  -548,  -686,  5351,  1900,  -268,  104, -810,  -288,  41,
    202, -1489, -623,  92,  -1425, 10525, 4407,  -648,  -697,  5153,  2158,  -317,  106, -780,  -327,  48,
    202, -1428, -699,  106, -1428, 10094, 4942,  -748,  -699,  4942,  2420,  -366,  106, -748,  -366,  55,
    200, -1363, -775,  120, -1413, 9639,  5482,  -848,  -692,  4719,  2684,  -415,  105, -714,  -406,  63,
    195, -1296, -852,  134, -1381, 9162,  6024,  -945,  -676,  4486,  2949,  -463,  102, -679,  -446,  70,
    189, -1226, -929,  147, -1335, 8668,  6566,  -1038, -654,  4244,  3215,  -508,  99,  -642,  -487,  77,
    180, -1154, -1005, 159, -1276, 8158,  7104,  -1126, -625,  3994,  3478,  -551,  95,  -604,  -526,  83,
    171, -1080, -1080, 171, -1206, 7636,  7636,  -1206, -590,  3738,  3738,  -590,  89,  -566,  -566,  89,
    159, -1005, -1154, 180, -1126, 7104,  8158,  -1276, -551,  3478,  3994,  -625,  83,  -526,  -604,  95,
    147, -929,  -1226, 189, -1038, 6566,  8668,  -1335, -508,  3215,  4244,  -654,  77,  -487,  -642,  99,
    134, -852,  -1296, 195, -945,  6024,  9162,  -1381, -463,  2949,  4486,  -676,  70,  -446,  -679,  102,
    120, -775,  -1363, 200, -848,  5482,  9639,  -1413, -415,  2684,  4719,  -692,  63,  -406,  -714,  105,
    106, -699,  -1428, 202, -748,  4942,  10094, -1428, -366,  2420,  4942,  -699,  55,  -366,  -748,  106,
    92,  -623,  -1489, 202, -648,  4407,  10525, -1425, -317,  2158,  5153,  -697,  48,  -327,  -780,  106,
    78,  -549,  -1546, 198, -548,  3881,  10929, -1401, -268,  1900,  5351,  -686,  41,  -288,  -810,  104,
    64,  -476,  -1599, 192, -452,  3366,  11303, -1356, -221,  1648,  5534,  -664,  34,  -249,  -837,  100,
    51,  -405,  -1647, 182, -361,  2865,  11644, -1288, -177,  1403,  5701,  -630,  27,  -212,  -863,  95,
    39,  -337,  -1690, 169, -275,  2381,  11949, -1194, -135,  1166,  5850,  -584,  20,  -176,  -885,  88,
    28,  -271,  -1728, 152, -199,  1917,  12215, -1073, -97,   938,   5980,  -525,  15,  -142,  -905,  79,
    19,  -209,  -1760, 131, -132,  1476,  12439, -923,  -65,   722,   6090,  -452,  10,  -109,  -922,  68,
    11,  -150,  -1785, 105, -77,   1061,  12619, -743,  -38,   519,   6178,  -364,  6,   -79,   -935,  55,
    5,   -95,   -1804, 75,  -35,   674,   12751, -530,  -17,   330,   6243,  -259,  3,   -50,   -945,  39,
    1,   -45,   -1815, 40,  -9,    320,   12832, -283,  -4,    157,   6283,  -138,  1,   -24,   -951,  21,
    0,   -1800, 0,     0,   0,     12280, 0,     0,     0,     6984,  0,     0,     0,   -1080, 0,     0,
    40,  -1796, -45,   1,   -270,  12253, 305,   -9,    -154,  6969,  174,   -5,    24,  -1078, -27,   1,
    74,  -1785, -94,   5,   -506,  12176, 644,   -34,   -288,  6925,  366,   -19,   44,  -1071, -57,   3,
    104, -1766, -148,  11,  -709,  12050, 1013,  -73,   -403,  6853,  576,   -42,   62,  -1060, -89,   6,
    129, -1741, -207,  18,  -881,  11878, 1409,  -126,  -501,  6756,  801,   -72,   78,  -1045, -124,  11,
    150, -1710, -268,  28,  -1024, 11664, 1830,  -190,  -583,  6634,  1041,  -108,  90,  -1026, -161,  17,
    167, -1672, -333,  39,  -1140, 11410, 2273,  -263,  -648,  6489,  1293,  -150,  100, -1003, -200,  23,
    180, -1630, -401,  50,  -1230, 11119, 2735,  -344,  -699,  6323,  1556,  -196,  108, -978,  -241,  30,
    190, -1582, -471,  63,  -1295, 10793, 3214,  -432,  -737,  6138,  1828,  -246,  114, -949,  -283,  38,
    196, -1530, -543,  77,  -1338, 10436, 3706,  -524,  -761,  5935,  2108,  -298,  118, -918,  -326,  46,
    199, -1473, -617,  91,  -1360, 10050, 4209,  -618,  -774,  5716,  2394,  -352,  120, -884,  -370,  54,
    200, -1413, -692,  105, -1363, 9639,  4719,  -714,  -775,  5482,  2684,  -406,  120, -848,  -415,  63,
    198, -1349, -767,  119, -1349, 9204,  5235,  -809,  -767,  5235,  2977,  -460,  119, -809,  -460,  71,
    193, -1282, -843,  132, -1319, 8749,  5752,  -903,  -750,  4976,  3272,  -513,  116, -769,  -506,  79,
    187, -1213, -919,  145, -1275, 8277,  6270,  -992,  -725,  4707,  3566,  -564,  112, -728,  -551,  87,
    179, -1142, -994,  158, -1218, 7790,  6784,  -1075, -693,  4430,  3858,  -611,  107, -685,  -597,  95,
    169, -1069, -1069, 169, -1151, 7291,  7291,  -1151, -655,  4147,  4147,  -655,  101, -641,  -641,  101,
    158, -994,  -1142, 179, -1075, 6784,  7790,  -1218, -611,  3858,  4430,  -693,  95,  -597,  -685,  107,
    145, -919,  -1213, 187, -992,  6270,  8277,  -1275, -564,  3566,  4707,  -725,  87,  -551,  -728,  112,
    132, -843,  -1282, 193, -903,  5752,  8749,  -1319, -513,  3272,  4976,  -750,  79,  -506,  -769,  116,
    119, -767,  -1349, 198, -809,  5235,  9204,  -1349, -460,  2977,  5235,  -767,  71,  -460,  -809,  119,
    105, -692,  -1413, 200, -714,  4719,  9639,  -1363, -406,  2684,  5482,  -775,  63,  -415,  -848,  120,
    91,  -617,  -1473, 199, -618,  4209,  10050, -1360, -352,  2394,  5716,  -774,  54,  -370,  -884,  120,
    77,  -543,  -1530, 196, -524,  3706,  10436, -1338, -298,  2108,  5935,  -761,  46,  -326,  -918,  118,
    63,  -471,  -1582, 190, -432,  3214,  10793, -1295, -246,  1828,  6138,  -737,  38,  -283,  -949,  114,
    50,  -401,  -1630, 180, -344,  2735,  11119, -1230, -196,  1556,  6323,  -699,  30,  -241,  -978,  108,
    39,  -333,  -1672, 167, -263,  2273,  11410, -1140, -150,  1293,  6489,  -648,  23,  -200,  -1003, 100,
    28,  -268,  -1710, 150, -190,  1830,  11664, -1024, -108,  1041,  6634,  -583,  17,  -161,  -1026, 90,
    18,  -207,  -1741, 129, -126,  1409,  11878, -881,  -72,   801,   6756,  -501,  11,  -124,  -1045, 78,
    11,  -148,  -1766, 104, -73,   1013,  12050, -709,  -42,   576,   6853,  -403,  6,   -89,   -1060, 62,
    5,   -94,   -1785, 74,  -34,   644,   12176, -506,  -19,   366,   6925,  -288,  3,   -57,   -1071, 44,
    1,   -45,   -1796, 40,  -9,    305,   12253, -270,  -5,    174,   6969,  -154,  1,   -27,   -1078, 24,
    0,   -1760, 0,     0,   0,     11673, 0,     0,     0,     7675,  0,     0,     0,   -1204, 0,     0,
    39,  -1756, -44,   1,   -257,  11648, 290,   -8,    -169,  7658,  191,   -5,    26,  -1202, -30,   1,
    72,  -1745, -92,   5,   -481,  11574, 612,   -32,   -316,  7610,  402,   -21,   50,  -1194, -63,   3,
    102, -1727, -145,  11,  -674,  11454, 963,   -70,   -443,  7531,  633,   -46,   70,  -1182, -99,   7,
    126, -1702, -202,  18,  -838,  11291, 1339,  -120,  -551,  7424,  881,   -79,   86,  -1165, -138,  12,
    147, -1672, -262,  27,  -974,  11088, 1740,  -180,  -640,  7290,  1144,  -119,  100, -1144, -179,  19,
    163, -1635, -326,  38,  -1084, 10846, 2161,  -250,  -712,  7131,  1421,  -164,  112, -1119, -223,  26,
    176, -1593, -392,  49,  -1169, 10569, 2600,  -327,  -769,  6949,  1710,  -215,  121, -1090, -268,  34,
    186, -1547, -461,  62,  -1231, 10260, 3055,  -410,  -809,  6745,  2009,  -270,  127, -1058, -315,  42,
    192, -1496, -531,  75,  -1272, 9920,  3523,  -498,  -836,  6522,  2316,  -327,  131, -1023, -363,  51,
    195, -1440, -603,  89,  -1293, 9554,  4001,  -588,  -850,  6281,  2630,  -386,  133, -985,  -413,  61,
    195, -1381, -676,  102, -1296, 9162,  4486,  -679,  -852,  6024,  2949,  -446,  134, -945,  -463,  70,
    193, -1319, -750,  116, -1282, 8749,  4976,  -769,  -843,  5752,  3272,  -506,  132, -903,  -513,  79,
    189, -1254, -824,  129, -1254, 8317,  5468,  -858,  -824,  5468,  3595,  -564,  129, -858,  -564,  88,
    183, -1186, -899,  142, -1212, 7868,  5960,  -943,  -797,  5173,  3918,  -620,  125, -812,  -615,  97,
    175, -1116, -972,  154, -1158, 7405,  6448,  -1022, -761,  4869,  4240,  -672,  119, -764,  -665,  105,
    165, -1045, -1045, 165, -1094, 6931,  6931,  -1094, -720,  4557,  4557,  -720,  113, -715,  -715,  113,
    154, -972,  -1116, 175, -1022, 6448,  7405,  -1158, -672,  4240,  4869,  -761,  105, -665,  -764,  119,
    142, -899,  -1186, 183, -943,  5960,  7868,  -1212, -620,  3918,  5173,  -797,  97,  -615,  -812,  125,
    129, -824,  -1254, 189, -858,  5468,  8317,  -1254, -564,  3595,  5468,  -824,  88,  -564,  -858,  129,
    116, -750,  -1319, 193, -769,  4976,  8749,  -1282, -506,  3272,  5752,  -843,  79,  -513,  -903,  132,
    102, -676,  -1381, 195, -679,  4486,  9162,  -1296, -446,  2949,  6024,  -852,  70,  -463,  -945,  134,
    89,  -603,  -1440, 195, -588,  4001,  9554,  -1293, -386,  2630,  6281,  -850,  61,  -413,  -985,  133,
    75,  -531,  -1496, 192, -498,  3523,  9920,  -1272, -327,  2316,  6522,  -836,  51,  -363,  -1023, 131,
    62,  -461,  -1547, 186, -410,  3055,  10260, -1231, -270,  2009,  6745,  -809,  42,  -315,  -1058, 127,
    49,  -392,  -1593, 176, -327,  2600,  10569, -1169, -215,  1710,  6949,  -769,  34,  -268,  -1090, 121,
    38,  -326,  -1635, 163, -250,  2161,  10846, -1084, -164,  1421,  7131,  -712,  26,  -223,  -1119, 112,
    27,  -262,  -1672, 147, -180,  1740,  11088, -974,  -119,  1144,  7290,  -640,  19,  -179,  -1144, 100,
    18,  -202,  -1702, 126, -120,  1339,  11291, -838,  -79,   881,   7424,  -551,  12,  -138,  -1165, 86,
    11,  -145,  -1727, 102, -70,   963,   11454, -674,  -46,   633,   7531,  -443,  7,   -99,   -1182, 70,
    5,   -92,   -1745, 72,  -32,   612,   11574, -481,  -21,   402,   7610,  -316,  3,   -63,   -1194, 50,
    1,   -44,   -1756, 39,  -8,    290,   11648, -257,  -5,    191,   7658,  -169,  1,   -30,   -1202, 26,
    0,   -1701, 0,     0,   0,     11043, 0,     0,     0,     8365,  0,     0,     0,   -1323, 0,     0,
    37,  -1697, -42,   1,   -243,  11019, 275,   -8,    -184,  8347,  208,   -6,    29,  -1320, -33,   1,
    70,  -1687, -89,   5,   -455,  10949, 579,   -30,   -345,  8294,  439,   -23,   55,  -1312, -69,   4,
    98,  -1669, -140,  10,  -638,  10836, 911,   -66,   -483,  8208,  690,   -50,   76,  -1298, -109,  8,
    122, -1645, -195,  17,  -793,  10682, 1267,  -113,  -600,  8091,  960,   -86,   95,  -1280, -152,  14,
    142, -1616, -254,  26,  -921,  10489, 1646,  -171,  -698,  7945,  1247,  -129,  110, -1257, -197,  20,
    158, -1580, -315,  36,  -1025, 10260, 2044,  -237,  -777,  7772,  1549,  -179,  123, -1229, -245,  28,
    170, -1540, -379,  48,  -1106, 9999,  2460,  -310,  -838,  7574,  1863,  -235,  132, -1198, -295,  37,
    179, -1495, -445,  60,  -1165, 9706,  2890,  -388,  -882,  7352,  2189,  -294,  140, -1163, -346,  47,
    185, -1446, -513,  73,  -1203, 9385,  3333,  -471,  -912,  7109,  2524,  -357,  144, -1124, -399,  56,
    188, -1392, -583,  86,  -1223, 9038,  3785,  -556,  -927,  6846,  2867,  -421,  147, -1083, -453,  67,
    189, -1335, -654,  99,  -1226, 8668,  4244,  -642,  -929,  6566,  3215,  -487,  147, -1038, -508,  77,
    187, -1275, -725,  112, -1213, 8277,  4707,  -728,  -919,  6270,  3566,  -551,  145, -992,  -564,  87,
    183, -1212, -797,  125, -1186, 7868,  5173,  -812,  -899,  5960,  3918,  -615,  142, -943,  -620,  97,
    177, -1146, -868,  137, -1146, 7443,  5638,  -892,  -868,  5638,  4271,  -675,  137, -892,  -675,  107,
    169, -1079, -940,  149, -1096, 7005,  6100,  -967,  -830,  5306,  4621,  -732,  131, -839,  -731,  116,
    159, -1010, -1010, 159, -1035, 6557,  6557,  -1035, -784,  4967,  4967,  -784,  124, -786,  -786,  124,
    149, -940,  -1079, 169, -967,  6100,  7005,  -1096, -732,  4621,  5306,  -830,  116, -731,  -839,  131,
    137, -868,  -1146, 177, -892,  5638,  7443,  -1146, -675,  4271,  5638,  -868,  107, -675,  -892,  137,
    125, -797,  -1212, 183, -812,  5173,  7868,  -1186, -615,  3918,  5960,  -899,  97,  -620,  -943,  142,
    112, -725,  -1275, 187, -728,  4707,  8277,  -1213, -551,  3566,  6270,  -919,  87,  -564,  -992,  145,
    99,  -654,  -1335, 189, -642,  4244,  8668,  -1226, -487,  3215,  6566,  -929,  77,  -508,  -1038, 147,
    86,  -583,  -1392, 188, -556,  3785,  9038,  -1223, -421,  2867,  6846,  -927,  67,  -453,  -1083, 147,
    73,  -513,  -1446, 185, -471,  3333,  9385,  -1203, -357,  2524,  7109,  -912,  56,  -399,  -1124, 144,
    60,  -445,  -1495, 179, -388,  2890,  9706,  -1165, -294,  2189,  7352,  -882,  47,  -346,  -1163, 140,
    48,  -379,  -1540, 170, -310,  2460,  9999,  -1106, -235,  1863,  7574,  -838,  37,  -295,  -1198, 132,
    36,  -315,  -1580, 158, -237,  2044,  10260, -1025, -179,  1549,  7772,  -777,  28,  -245,  -1229, 123,
    26,  -254,  -1616, 142, -171,  1646,  10489, -921,  -129,  1247,  7945,  -698,  20,  -197,  -1257, 110,
    17,  -195,  -1645, 122, -113,  1267,  10682, -793,  -86,   960,   8091,  -600,  14,  -152,  -1280, 95,
    10,  -140,  -1669, 98,  -66,   911,   10836, -638,  -50,   690,   8208,  -483,  8,   -109,  -1298, 76,
    5,   -89,   -1687, 70,  -30,   579,   10949, -455,  -23,   439,   8294,  -345,  4,   -69,   -1312, 55,
    1,   -42,   -1697, 37,  -8,    275,   11019, -243,  -6,    208,   8347,  -184,  1,   -33,   -1320, 29,
    0,   -1626, 0,     0,   0,     10393, 0,     0,     0,     9051,  0,     0,     0,   -1434, 0,     0,
    36,  -1622, -40,   1,   -229,  10371, 258,   -7,    -199,  9031,  225,   -6,    32,  -1431, -36,   1,
    67,  -1612, -85,   4,   -428,  10305, 545,   -29,   -373,  8974,  475,   -25,   59,  -1422, -75,   4,
    94,  -1595, -134,  10,  -600,  10199, 857,   -62,   -523,  8881,  746,   -54,   83,  -1407, -118,  9,
    117, -1572, -187,  17,  -746,  10053, 1193,  -107,  -650,  8755,  1039,  -93,   103, -1387, -165,  15,
    136, -1544, -242,  25,  -867,  9872,  1549,  -161,  -755,  8597,  1349,  -140,  120, -1362, -214,  22,
    151, -1510, -301,  35,  -965,  9657,  1924,  -223,  -840,  8409,  1675,  -194,  133, -1333, -266,  31,
    163, -1472, -362,  46,  -1041, 9410,  2315,  -291,  -906,  8195,  2016,  -254,  144, -1299, -320,  40,
    171, -1429, -425,  57,  -1096, 9135,  2720,  -365,  -955,  7955,  2369,  -318,  151, -1261, -375,  50,
    177, -1381, -491,  69,  -1133, 8833,  3137,  -443,  -986,  7692,  2731,  -386,  156, -1219, -433,  61,
    180, -1330, -557,  82,  -1151, 8506,  3562,  -523,  -1003, 7407,  3102,  -456,  159, -1174, -492,  72,
    180, -1276, -625,  95,  -1154, 8158,  3994,  -604,  -1005, 7104,  3478,  -526,  159, -1126, -551,  83,
    179, -1218, -693,  107, -1142, 7790,  4430,  -685,  -994,  6784,  3858,  -597,  158, -1075, -611,  95,
    175, -1158, -761,  119, -1116, 7405,  4869,  -764,  -972,  6448,  4240,  -665,  154, -1022, -672,  105,
    169, -1096, -830,  131, -1079, 7005,  5306,  -839,  -940,  6100,  4621,  -731,  149, -967,  -732,  116,
    161, -1031, -898,  142, -1031, 6593,  5741,  -910,  -898,  5741,  5000,  -792,  142, -910,  -792,  126,
    152, -965,  -965,  152, -974,  6171,  6171,  -974,  -848,  5374,  5374,  -848,  134, -852,  -852,  134,
    142, -898,  -1031, 161, -910,  5741,  6593,  -1031, -792,  5000,  5741,  -898,  126, -792,  -910,  142,
    131, -830,  -1096, 169, -839,  5306,  7005,  -1079, -731,  4621,  6100,  -940,  116, -732,  -967,  149,
    119, -761,  -1158, 175, -764,  4869,  7405,  -1116, -665,  4240,  6448,  -972,  105, -672,  -1022, 154,
    107, -693,  -1218, 179, -685,  4430,  7790,  -1142, -597,  3858,  6784,  -994,  95,  -611,  -1075, 158,
    95,  -625,  -1276, 180, -604,  3994,  8158,  -1154, -526,  3478,  7104,  -1005, 83,  -551,  -1126, 159,
    82,  -557,  -1330, 180, -523,  3562,  8506,  -1151, -456,  3102,  7407,  -1003, 72,  -492,  -1174, 159,
    69,  -491,  -1381, 177, -443,  3137,  8833,  -1133, -386,  2731,  7692,  -986,  61,  -433,  -1219, 156,
    57,  -425,  -1429, 171, -365,  2720,  9135,  -1096, -318,  2369,  7955,  -955,  50,  -375,  -1261, 151,
    46,  -362,  -1472, 163, -291,  2315,  9410,  -1041, -254,  2016,  8195,  -906,  40,  -320,  -1299, 144,
    35,  -301,  -1510, 151, -223,  1924,  9657,  -965,  -194,  1675,  8409,  -840,  31,  -266,  -1333, 133,
    25,  -242,  -1544, 136, -161,  1549,  9872,  -867,  -140,  1349,  8597,  -755,  22,  -214,  -1362, 120,
    17,  -187,  -1572, 117, -107,  1193,  10053, -746,  -93,   1039,  8755,  -650,  15,  -165,  -1387, 103,
    10,  -134,  -1595, 94,  -62,   857,   10199, -600,  -54,   746,   8881,  -523,  9,   -118,  -1407, 83,
    4,   -85,   -1612, 67,  -29,   545,   10305, -428,  -25,   475,   8974,  -373,  4,   -75,   -1422, 59,
    1,   -40,   -1622, 36,  -7,    258,   10371, -229,  -6,    225,   9031,  -199,  1,   -36,   -1431, 32,
    0,   -1536, 0,     0,   0,     9728,  0,     0,     0,     9728,  0,     0,     0,   -1536, 0,     0,
    34,  -1533, -38,   1,   -214,  9707,  242,   -7,    -214,  9707,  242,   -7,    34,  -1533, -38,   1,
    63,  -1523, -81,   4,   -401,  9645,  510,   -27,   -401,  9645,  510,   -27,   63,  -1523, -81,   4,
    89,  -1507, -127,  9,   -562,  9546,  802,   -58,   -562,  9546,  802,   -58,   89,  -1507, -127,  9,
    110, -1486, -176,  16,  -698,  9410,  1116,  -100,  -698,  9410,  1116,  -100,  110, -1486, -176,  16,
    128, -1459, -229,  24,  -812,  9240,  1450,  -150,  -812,  9240,  1450,  -150,  128, -1459, -229,  24,
    143, -1427, -284,  33,  -903,  9039,  1801,  -208,  -903,  9039,  1801,  -208,  143, -1427, -284,  33,
    154, -1391, -342,  43,  -974,  8808,  2167,  -273,  -974,  8808,  2167,  -273,  154, -1391, -342,  43,
    162, -1350, -402,  54,  -1026, 8550,  2546,  -342,  -1026, 8550,  2546,  -342,  162, -1350, -402,  54,
    167, -1305, -464,  66,  -1060, 8267,  2936,  -415,  -1060, 8267,  2936,  -415,  167, -1305, -464,  66,
    170, -1257, -526,  77,  -1078, 7962,  3334,  -490,  -1078, 7962,  3334,  -490,  170, -1257, -526,  77,
    171, -1206, -590,  89,  -1080, 7636,  3738,  -566,  -1080, 7636,  3738,  -566,  171, -1206, -590,  89,
    169, -1151, -655,  101, -1069, 7291,  4147,  -641,  -1069, 7291,  4147,  -641,  169, -1151, -655,  101,
    165, -1094, -720,  113, -1045, 6931,  4557,  -715,  -1045, 6931,  4557,  -715,  165, -1094, -720,  113,
    159, -1035, -784,  124, -1010, 6557,  4967,  -786,  -1010, 6557,  4967,  -786,  159, -1035, -784,  124,
    152, -974,  -848,  134, -965,  6171,  5374,  -852,  -965,  6171,  5374,  -852,  152, -974,  -848,  134,
    144, -912,  -912,  144, -912,  5776,  5776,  -912,  -912,  5776,  5776,  -912,  144, -912,  -912,  144,
    134, -848,  -974,  152, -852,  5374,  6171,  -965,  -852,  5374,  6171,  -965,  134, -848,  -974,  152,
    124, -784,  -1035, 159, -786,  4967,  6557,  -1010, -786,  4967,  6557,  -1010, 124, -784,  -1035, 159,
    113, -720,  -1094, 165, -715,  4557,  6931,  -1045, -715,  4557,  6931,  -1045, 113, -720,  -1094, 165,
    101, -655,  -1151, 169, -641,  4147,  7291,  -1069, -641,  4147,  7291,  -1069, 101, -655,  -1151, 169,
    89,  -590,  -1206, 171, -566,  3738,  7636,  -1080, -566,  3738,  7636,  -1080, 89,  -590,  -1206, 171,
    77,  -526,  -1257, 170, -490,  3334,  7962,  -1078, -490,  3334,  7962,  -1078, 77,  -526,  -1257, 170,
    66,  -464,  -1305, 167, -415,  2936,  8267,  -1060, -415,  2936,  8267,  -1060, 66,  -464,  -1305, 167,
    54,  -402,  -1350, 162, -342,  2546,  8550,  -1026, -342,  2546,  8550,  -1026, 54,  -402,  -1350, 162,
    43,  -342,  -1391, 154, -273,  2167,  8808,  -974,  -273,  2167,  8808,  -974,  43,  -342,  -1391, 154,
    33,  -284,  -1427, 143, -208,  1801,  9039,  -903,  -208,  1801,  9039,  -903,  33,  -284,  -1427, 143,
    24,  -229,  -1459, 128, -150,  1450,  9240,  -812,  -150,  1450,  9240,  -812,  24,  -229,  -1459, 128,
    16,  -176,  -1486, 110, -100,  1116,  9410,  -698,  -100,  1116,  9410,  -698,  16,  -176,  -1486, 110,
    9,   -127,  -1507, 89,  -58,   802,   9546,  -562,  -58,   802,   9546,  -562,  9,   -127,  -1507, 89,
    4,   -81,   -1523, 63,  -27,   510,   9645,  -401,  -27,   510,   9645,  -401,  4,   -81,   -1523, 63,
    1,   -38,   -1533, 34,  -7,    242,   9707,  -214,  -7,    242,   9707,  -214,  1,   -38,   -1533, 34,
    0,   -1434, 0,     0,   0,     9051,  0,     0,     0,     10393, 0,     0,     0,   -1626, 0,     0,
    32,  -1431, -36,   1,   -199,  9031,  225,   -6,    -229,  10371, 258,   -7,    36,  -1622, -40,   1,
    59,  -1422, -75,   4,   -373,  8974,  475,   -25,   -428,  10305, 545,   -29,   67,  -1612, -85,   4,
    83,  -1407, -118,  9,   -523,  8881,  746,   -54,   -600,  10199, 857,   -62,   94,  -1595, -134,  10,
    103, -1387, -165,  15,  -650,  8755,  1039,  -93,   -746,  10053, 1193,  -107,  117, -1572, -187,  17,
    120, -1362, -214,  22,  -755,  8597,  1349,  -140,  -867,  9872,  1549,  -161,  136, -1544, -242,  25,
    133, -1333, -266,  31,  -840,  8409,  1675,  -194,  -965,  9657,  1924,  -223,  151, -1510, -301,  35,
    144, -1299, -320,  40,  -906,  8195,  2016,  -254,  -1041, 9410,  2315,  -291,  163, -1472, -362,  46,
    151, -1261, -375,  50,  -955,  7955,  2369,  -318,  -1096, 9135,  2720,  -365,  171, -1429, -425,  57,
    156, -1219, -433,  61,  -986,  7692,  2731,  -386,  -1133, 8833,  3137,  -443,  177, -1381, -491,  69,
    159, -1174, -492,  72,  -1003, 7407,  3102,  -456,  -1151, 8506,  3562,  -523,  180, -1330, -557,  82,
    159, -1126, -551,  83,  -1005, 7104,  3478,  -526,  -1154, 8158,  3994,  -604,  180, -1276, -625,  95,
    158, -1075, -611,  95,  -994,  6784,  3858,  -597,  -1142, 7790,  4430,  -685,  179, -1218, -693,  107,
    154, -1022, -672,  105, -972,  6448,  4240,  -665,  -1116, 7405,  4869,  -764,  175, -1158, -761,  119,
    149, -967,  -732,  116, -940,  6100,  4621,  -731,  -1079, 7005,  5306,  -839,  169, -1096, -830,  131,
    142, -910,  -792,  126, -898,  5741,  5000,  -792,  -1031, 6593,  5741,  -910,  161, -1031, -898,  142,
    134, -852,  -852,  134, -848,  5374,  5374,  -848,  -974,  6171,  6171,  -974,  152, -965,  -965,  152,
    126, -792,  -910,  142, -792,  5000,  5741,  -898,  -910,  5741,  6593,  -1031, 142, -898,  -1031, 161,
    116, -732,  -967,  149, -731,  4621,  6100,  -940,  -839,  5306,  7005,  -1079, 131, -830,  -1096, 169,
    105, -672,  -1022, 154, -665,  4240,  6448,  -972,  -764,  4869,  7405,  -1116, 119, -761,  -1158, 175,
    95,  -611,  -1075, 158, -597,  3858,  6784,  -994,  -685,  4430,  7790,  -1142, 107, -693,  -1218, 179,
    83,  -551,  -1126, 159, -526,  3478,  7104,  -1005, -604,  3994,  8158,  -1154, 95,  -625,  -1276, 180,
    72,  -492,  -1174, 159, -456,  3102,  7407,  -1003, -523,  3562,  8506,  -1151, 82,  -557,  -1330, 180,
    61,  -433,  -1219, 156, -386,  2731,  7692,  -986,  -443,  3137,  8833,  -1133, 69,  -491,  -1381, 177,
    50,  -375,  -1261, 151, -318,  2369,  7955,  -955,  -365,  2720,  9135,  -1096, 57,  -425,  -1429, 171,
    40,  -320,  -1299, 144, -254,  2016,  8195,  -906,  -291,  2315,  9410,  -1041, 46,  -362,  -1472, 163,
    31,  -266,  -1333, 133, -194,  1675,  8409,  -840,  -223,  1924,  9657,  -965,  35,  -301,  -1510, 151,
    22,  -214,  -1362, 120, -140,  1349,  8597,  -755,  -161,  1549,  9872,  -867,  25,  -242,  -1544, 136,
    15,  -165,  -1387, 103, -93,   1039,  8755,  -650,  -107,  1193,  10053, -746,  17,  -187,  -1572, 117,
    9,   -118,  -1407, 83,  -54,   746,   8881,  -523,  -62,   857,   10199, -600,  10,  -134,  -1595, 94,
    4,   -75,   -1422, 59,  -25,   475,   8974,  -373,  -29,   545,   10305, -428,  4,   -85,   -1612, 67,
    1,   -36,   -1431, 32,  -6,    225,   9031,  -199,  -7,    258,   10371, -229,  1,   -40,   -1622, 36,
    0,   -1323, 0,     0,   0,     8365,  0,     0,     0,     11043, 0,     0,     0,   -1701, 0,     0,
    29,  -1320, -33,   1,   -184,  8347,  208,   -6,    -243,  11019, 275,   -8,    37,  -1697, -42,   1,
    55,  -1312, -69,   4,   -345,  8294,  439,   -23,   -455,  10949, 579,   -30,   70,  -1687, -89,   5,
    76,  -1298, -109,  8,   -483,  8208,  690,   -50,   -638,  10836, 911,   -66,   98,  -1669, -140,  10,
    95,  -1280, -152,  14,  -600,  8091,  960,   -86,   -793,  10682, 1267,  -113,  122, -1645, -195,  17,
    110, -1257, -197,  20,  -698,  7945,  1247,  -129,  -921,  10489, 1646,  -171,  142, -1616, -254,  26,
    123, -1229, -245,  28,  -777,  7772,  1549,  -179,  -1025, 10260, 2044,  -237,  158, -1580, -315,  36,
    132, -1198, -295,  37,  -838,  7574,  1863,  -235,  -1106, 9999,  2460,  -310,  170, -1540, -379,  48,
    140, -1163, -346,  47,  -882,  7352,  2189,  -294,  -1165, 9706,  2890,  -388,  179, -1495, -445,  60,
    144, -1124, -399,  56,  -912,  7109,  2524,  -357,  -1203, 9385,  3333,  -471,  185, -1446, -513,  73,
    147, -1083, -453,  67,  -927,  6846,  2867,  -421,  -1223, 9038,  3785,  -556,  188, -1392, -583,  86,
    147, -1038, -508,  77,  -929,  6566,  3215,  -487,  -1226, 8668,  4244,  -642,  189, -1335, -654,  99,
    145, -992,  -564,  87,  -919,  6270,  3566,  -551,  -1213, 8277,  4707,  -728,  187, -1275, -725,  112,
    142, -943,  -620,  97,  -899,  5960,  3918,  -615,  -1186, 7868,  5173,  -812,  183, -1212, -797,  125,
    137, -892,  -675,  107, -868,  5638,  4271,  -675,  -1146, 7443,  5638,  -892,  177, -1146, -868,  137,
    131, -839,  -731,  116, -830,  5306,  4621,  -732,  -1096, 7005,  6100,  -967,  169, -1079, -940,  149,
    124, -786,  -786,  124, -784,  4967,  4967,  -784,  -1035, 6557,  6557,  -1035, 159, -1010, -1010, 159,
    116, -731,  -839,  131, -732,  4621,  5306,  -830,  -967,  6100,  7005,  -1096, 149, -940,  -1079, 169,
    107, -675,  -892,  137, -675,  4271,  5638,  -868,  -892,  5638,  7443,  -1146, 137, -868,  -1146, 177,
    97,  -620,  -943,  142, -615,  3918,  5960,  -899,  -812,  5173,  7868,  -1186, 125, -797,  -1212, 183,
    87,  -564,  -992,  145, -551,  3566,  6270,  -919,  -728,  4707,  8277,  -1213, 112, -725,  -1275, 187,
    77,  -508,  -1038, 147, -487,  3215,  6566,  -929,  -642,  4244,  8668,  -1226, 99,  -654,  -1335, 189,
    67,  -453,  -1083, 147, -421,  2867,  6846,  -927,  -556,  3785,  9038,  -1223, 86,  -583,  -1392, 188,
    56,  -399,  -1124, 144, -357,  2524,  7109,  -912,  -471,  3333,  9385,  -1203, 73,  -513,  -1446, 185,
    47,  -346,  -1163, 140, -294,  2189,  7352,  -882,  -388,  2890,  9706,  -1165, 60,  -445,  -1495, 179,
    37,  -295,  -1198, 132, -235,  1863,  7574,  -838,  -310,  2460,  9999,  -1106, 48,  -379,  -1540, 170,
    28,  -245,  -1229, 123, -179,  1549,  7772,  -777,  -237,  2044,  10260, -1025, 36,  -315,  -1580, 158,
    20,  -197,  -1257, 110, -129,  1247,  7945,  -698,  -171,  1646,  10489, -921,  26,  -254,  -1616, 142,
    14,  -152,  -1280, 95,  -86,   960,   8091,  -600,  -113,  1267,  10682, -793,  17,  -195,  -1645, 122,
    8,   -109,  -1298, 76,  -50,   690,   8208,  -483,  -66,   911,   10836, -638,  10,  -140,  -1669, 98,
    4,   -69,   -1312, 55,  -23,   439,   8294,  -345,  -30,   579,   10949, -455,  5,   -89,   -1687, 70,
    1,   -33,   -1320, 29,  -6,    208,   8347,  -184,  -8,    275,   11019, -243,  1,   -42,   -1697, 37,
    0,   -1204, 0,     0,   0,     7675,  0,     0,     0,     11673, 0,     0,     0,   -1760, 0,     0,
    26,  -1202, -30,   1,   -169,  7658,  191,   -5,    -257,  11648, 290,   -8,    39,  -1756, -44,   1,
    50,  -1194, -63,   3,   -316,  7610,  402,   -21,   -481,  11574, 612,   -32,   72,  -1745, -92,   5,
    70,  -1182, -99,   7,   -443,  7531,  633,   -46,   -674,  11454, 963,   -70,   102, -1727, -145,  11,
    86,  -1165, -138,  12,  -551,  7424,  881,   -79,   -838,  11291, 1339,  -120,  126, -1702, -202,  18,
    100, -1144, -179,  19,  -640,  7290,  1144,  -119,  -974,  11088, 1740,  -180,  147, -1672, -262,  27,
    112, -1119, -223,  26,  -712,  7131,  1421,  -164,  -1084, 10846, 2161,  -250,  163, -1635, -326,  38,
    121, -1090, -268,  34,  -769,  6949,  1710,  -215,  -1169, 10569, 2600,  -327,  176, -1593, -392,  49,
    127, -1058, -315,  42,  -809,  6745,  2009,  -270,  -1231, 10260, 3055,  -410,  186, -1547, -461,  62,
    131, -1023, -363,  51,  -836,  6522,  2316,  -327,  -1272, 9920,  3523,  -498,  192, -1496, -531,  75,
    133, -985,  -413,  61,  -850,  6281,  2630,  -386,  -1293, 9554,  4001,  -588,  195, -1440, -603,  89,
    134, -945,  -463,  70,  -852,  6024,  2949,  -446,  -1296, 9162,  4486,  -679,  195, -1381, -676,  102,
    132, -903,  -513,  79,  -843,  5752,  3272,  -506,  -1282, 8749,  4976,  -769,  193, -1319, -750,  116,
    129, -858,  -564,  88,  -824,  5468,  3595,  -564,  -1254, 8317,  5468,  -858,  189, -1254, -824,  129,
    125, -812,  -615,  97,  -797,  5173,  3918,  -620,  -1212, 7868,  5960,  -943,  183, -1186, -899,  142,
    119, -764,  -665,  105, -761,  4869,  4240,  -672,  -1158, 7405,  6448,  -1022, 175, -1116, -972,  154,
    113, -715,  -715,  113, -720,  4557,  4557,  -720,  -1094, 6931,  6931,  -1094, 165, -1045, -1045, 165,
    105, -665,  -764,  119, -672,  4240,  4869,  -761,  -1022, 6448,  7405,  -1158, 154, -972,  -1116, 175,
    97,  -615,  -812,  125, -620,  3918,  5173,  -797,  -943,  5960,  7868,  -1212, 142, -899,  -1186, 183,
    88,  -564,  -858,  129, -564,  3595,  5468,  -824,  -858,  5468,  8317,  -1254, 129, -824,  -1254, 189,
    79,  -513,  -903,  132, -506,  3272,  5752,  -843,  -769,  4976,  8749,  -1282, 116, -750,  -1319, 193,
    70,  -463,  -945,  134, -446,  2949,  6024,  -852,  -679,  4486,  9162,  -1296, 102, -676,  -1381, 195,
    61,  -413,  -985,  133, -386,  2630,  6281,  -850,  -588,  4001,  9554,  -1293, 89,  -603,  -1440, 195,
    51,  -363,  -1023, 131, -327,  2316,  6522,  -836,  -498,  3523,  9920,  -1272, 75,  -531,  -1496, 192,
    42,  -315,  -1058, 127, -270,  2009,  6745,  -809,  -410,  3055,  10260, -1231, 62,  -461,  -1547, 186,
    34,  -268,  -1090, 121, -215,  1710,  6949,  -769,  -327,  2600,  10569, -1169, 49,  -392,  -1593, 176,
    26,  -223,  -1119, 112, -164,  1421,  7131,  -712,  -250,  2161,  10846, -1084, 38,  -326,  -1635, 163,
    19,  -179,  -1144, 100, -119,  1144,  7290,  -640,  -180,  1740,  11088, -974,  27,  -262,  -1672, 147,
    12,  -138,  -1165, 86,  -79,   881,   7424,  -551,  -120,  1339,  11291, -838,  18,  -202,  -1702, 126,
    7,   -99,   -1182, 70,  -46,   633,   7531,  -443,  -70,   963,   11454, -674,  11,  -145,  -1727, 102,
    3,   -63,   -1194, 50,  -21,   402,   7610,  -316,  -32,   612,   11574, -481,  5,   -92,   -1745, 72,
    1,   -30,   -1202, 26,  -5,    191,   7658,  -169,  -8,    290,   11648, -257,  1,   -44,   -1756, 39,
    0,   -1080, 0,     0,   0,     6984,  0,     0,     0,     12280, 0,     0,     0,   -1800, 0,     0,
    24,  -1078, -27,   1,   -154,  6969,  174,   -5,    -270,  12253, 305,   -9,    40,  -1796, -45,   1,
    44,  -1071, -57,   3,   -288,  6925,  366,   -19,   -506,  12176, 644,   -34,   74,  -1785, -94,   5,
    62,  -1060, -89,   6,   -403,  6853,  576,   -42,   -709,  12050, 1013,  -73,   104, -1766, -148,  11,
    78,  -1045, -124,  11,  -501,  6756,  801,   -72,   -881,  11878, 1409,  -126,  129, -1741, -207,  18,
    90,  -1026, -161,  17,  -583,  6634,  1041,  -108,  -1024, 11664, 1830,  -190,  150, -1710, -268,  28,
    100, -1003, -200,  23,  -648,  6489,  1293,  -150,  -1140, 11410, 2273,  -263,  167, -1672, -333,  39,
    108, -978,  -241,  30,  -699,  6323,  1556,  -196,  -1230, 11119, 2735,  -344,  180, -1630, -401,  50,
    114, -949,  -283,  38,  -737,  6138,  1828,  -246,  -1295, 10793, 3214,  -432,  190, -1582, -471,  63,
    118, -918,  -326,  46,  -761,  5935,  2108,  -298,  -1338, 10436, 3706,  -524,  196, -1530, -543,  77,
    120, -884,  -370,  54,  -774,  5716,  2394,  -352,  -1360, 10050, 4209,  -618,  199, -1473, -617,  91,
    120, -848,  -415,  63,  -775,  5482,  2684,  -406,  -1363, 9639,  4719,  -714,  200, -1413, -692,  105,
    119, -809,  -460,  71,  -767,  5235,  2977,  -460,  -1349, 9204,  5235,  -809,  198, -1349, -767,  119,
    116, -769,  -506,  79,  -750,  4976,  3272,  -513,  -1319, 8749,  5752,  -903,  193, -1282, -843,  132,
    112, -728,  -551,  87,  -725,  4707,  3566,  -564,  -1275, 8277,  6270,  -992,  187, -1213, -919,  145,
    107, -685,  -597,  95,  -693,  4430,  3858,  -611,  -1218, 7790,  6784,  -1075, 179, -1142, -994,  158,
    101, -641,  -641,  101, -655,  4147,  4147,  -655,  -1151, 7291,  7291,  -1151, 169, -1069, -1069, 169,
    95,  -597,  -685,  107, -611,  3858,  4430,  -693,  -1075, 6784,  7790,  -1218, 158, -994,  -1142, 179,
    87,  -551,  -728,  112, -564,  3566,  4707,  -725,  -992,  6270,  8277,  -1275, 145, -919,  -1213, 187,
    79,  -506,  -769,  116, -513,  3272,  4976,  -750,  -903,  5752,  8749,  -1319, 132, -843,  -1282, 193,
    71,  -460,  -809,  119, -460,  2977,  5235,  -767,  -809,  5235,  9204,  -1349, 119, -767,  -1349, 198,
    63,  -415,  -848,  120, -406,  2684,  5482,  -775,  -714,  4719,  9639,  -1363, 105, -692,  -1413, 200,
    54,  -370,  -884,  120, -352,  2394,  5716,  -774,  -618,  4209,  10050, -1360, 91,  -617,  -1473, 199,
    46,  -326,  -918,  118, -298,  2108,  5935,  -761,  -524,  3706,  10436, -1338, 77,  -543,  -1530, 196,
    38,  -283,  -949,  114, -246,  1828,  6138,  -737,  -432,  3214,  10793, -1295, 63,  -471,  -1582, 190,
    30,  -241,  -978,  108, -196,  1556,  6323,  -699,  -344,  2735,  11119, -1230, 50,  -401,  -1630, 180,
    23,  -200,  -1003, 100, -150,  1293,  6489,  -648,  -263,  2273,  11410, -1140, 39,  -333,  -1672, 167,
    17,  -161,  -1026, 90,  -108,  1041,  6634,  -583,  -190,  1830,  11664, -1024, 28,  -268,  -1710, 150,
    11,  -124,  -1045, 78,  -72,   801,   6756,  -501,  -126,  1409,  11878, -881,  18,  -207,  -1741, 129,
    6,   -89,   -1060, 62,  -42,   576,   6853,  -403,  -73,   1013,  12050, -709,  11,  -148,  -1766, 104,
    3,   -57,   -1071, 44,  -19,   366,   6925,  -288,  -34,   644,   12176, -506,  5,   -94,   -1785, 74,
    1,   -27,   -1078, 24,  -5,    174,   6969,  -154,  -9,    305,   12253, -270,  1,   -45,   -1796, 40,
    0,   -953,  0,     0,   0,     6296,  0,     0,     0,     12860, 0,     0,     0,   -1819, 0,     0,
    21,  -951,  -24,   1,   -138,  6283,  157,   -4,    -283,  12832, 320,   -9,    40,  -1815, -45,   1,
    39,  -945,  -50,   3,   -259,  6243,  330,   -17,   -530,  12751, 674,   -35,   75,  -1804, -95,   5,
    55,  -935,  -79,   6,   -364,  6178,  519,   -38,   -743,  12619, 1061,  -77,   105, -1785, -150,  11,
    68,  -922,  -109,  10,  -452,  6090,  722,   -65,   -923,  12439, 1476,  -132,  131, -1760, -209,  19,
    79,  -905,  -142,  15,  -525,  5980,  938,   -97,   -1073, 12215, 1917,  -199,  152, -1728, -271,  28,
    88,  -885,  -176,  20,  -584,  5850,  1166,  -135,  -1194, 11949, 2381,  -275,  169, -1690, -337,  39,
    95,  -863,  -212,  27,  -630,  5701,  1403,  -177,  -1288, 11644, 2865,  -361,  182, -1647, -405,  51,
    100, -837,  -249,  34,  -664,  5534,  1648,  -221,  -1356, 11303, 3366,  -452,  192, -1599, -476,  64,
    104, -810,  -288,  41,  -686,  5351,  1900,  -268,  -1401, 10929, 3881,  -548,  198, -1546, -549,  78,
    106, -780,  -327,  48,  -697,  5153,  2158,  -317,  -1425, 10525, 4407,  -648,  202, -1489, -623,  92,
    106, -748,  -366,  55,  -699,  4942,  2420,  -366,  -1428, 10094, 4942,  -748,  202, -1428, -699,  106,
    105, -714,  -406,  63,  -692,  4719,  2684,  -415,  -1413, 9639,  5482,  -848,  200, -1363, -775,  120,
    102, -679,  -446,  70,  -676,  4486,  2949,  -463,  -1381, 9162,  6024,  -945,  195, -1296, -852,  134,
    99,  -642,  -487,  77,  -654,  4244,  3215,  -508,  -1335, 8668,  6566,  -1038, 189, -1226, -929,  147,
    95,  -604,  -526,  83,  -625,  3994,  3478,  -551,  -1276, 8158,  7104,  -1126, 180, -1154, -1005, 159,
    89,  -566,  -566,  89,  -590,  3738,  3738,  -590,  -1206, 7636,  7636,  -1206, 171, -1080, -1080, 171,
    83,  -526,  -604,  95,  -551,  3478,  3994,  -625,  -1126, 7104,  8158,  -1276, 159, -1005, -1154, 180,
    77,  -487,  -642,  99,  -508,  3215,  4244,  -654,  -1038, 6566,  8668,  -1335, 147, -929,  -1226, 189,
    70,  -446,  -679,  102, -463,  2949,  4486,  -676,  -945,  6024,  9162,  -1381, 134, -852,  -1296, 195,
    63,  -406,  -714,  105, -415,  2684,  4719,  -692,  -848,  5482,  9639,  -1413, 120, -775,  -1363, 200,
    55,  -366,  -748,  106, -366,  2420,  4942,  -699,  -748,  4942,  10094, -1428, 106, -699,  -1428, 202,
    48,  -327,  -780,  106, -317,  2158,  5153,  -697,  -648,  4407,  10525, -1425, 92,  -623,  -1489, 202,
    41,  -288,  -810,  104, -268,  1900,  5351,  -686,  -548,  3881,  10929, -1401, 78,  -549,  -1546, 198,
    34,  -249,  -837,  100, -221,  1648,  5534,  -664,  -452,  3366,  11303, -1356, 64,  -476,  -1599, 192,
    27,  -212,  -863,  95,  -177,  1403,  5701,  -630,  -361,  2865,  11644, -1288, 51,  -405,  -1647, 182,
    20,  -176,  -885,  88,  -135,  1166,  5850,  -584,  -275,  2381,  11949, -1194, 39,  -337,  -1690, 169,
    15,  -142,  -905,  79,  -97,   938,   5980,  -525,  -199,  1917,  12215, -1073, 28,  -271,  -1728, 152,
    10,  -109,  -922,  68,  -65,   722,   6090,  -452,  -132,  1476,  12439, -923,  19,  -209,  -1760, 131,
    6,   -79,   -935,  55,  -38,   519,   6178,  -364,  -77,   1061,  12619, -743,  11,  -150,  -1785, 105,
    3,   -50,   -945,  39,  -17,   330,   6243,  -259,  -35,   674,   12751, -530,  5,   -95,   -1804, 75,
    1,   -24,   -951,  21,  -4,    157,   6283,  -138,  -9,    320,   12832, -283,  1,   -45,   -1815, 40,
    0,   -825,  0,     0,   0,     5615,  0,     0,     0,     13409, 0,     0,     0,   -1815, 0,     0,
    18,  -823,  -21,   1,   -124,  5603,  140,   -4,    -295,  13380, 333,   -10,   40,  -1811, -45,   1,
    34,  -818,  -43,   2,   -231,  5567,  294,   -15,   -552,  13295, 703,   -37,   75,  -1800, -95,   5,
    48,  -810,  -68,   5,   -324,  5510,  463,   -34,   -774,  13158, 1106,  -80,   105, -1781, -150,  11,
    59,  -798,  -95,   8,   -403,  5431,  644,   -58,   -962,  12970, 1539,  -137,  130, -1756, -208,  19,
    69,  -784,  -123,  13,  -468,  5333,  837,   -87,   -1119, 12736, 1998,  -207,  151, -1724, -270,  28,
    77,  -767,  -153,  18,  -521,  5217,  1039,  -120,  -1245, 12459, 2482,  -287,  168, -1686, -336,  39,
    83,  -747,  -184,  23,  -562,  5084,  1251,  -157,  -1343, 12141, 2987,  -376,  182, -1643, -404,  51,
    87,  -725,  -216,  29,  -592,  4935,  1470,  -197,  -1414, 11785, 3509,  -471,  191, -1595, -475,  64,
    90,  -701,  -249,  35,  -612,  4772,  1694,  -239,  -1461, 11395, 4047,  -572,  198, -1542, -548,  77,
    91,  -675,  -283,  42,  -622,  4595,  1924,  -283,  -1485, 10974, 4595,  -675,  201, -1485, -622,  91,
    92,  -648,  -317,  48,  -623,  4407,  2158,  -327,  -1489, 10525, 5153,  -780,  202, -1425, -697,  106,
    91,  -618,  -352,  54,  -617,  4209,  2394,  -370,  -1473, 10050, 5716,  -884,  199, -1360, -774,  120,
    89,  -588,  -386,  61,  -603,  4001,  2630,  -413,  -1440, 9554,  6281,  -985,  195, -1293, -850,  133,
    86,  -556,  -421,  67,  -583,  3785,  2867,  -453,  -1392, 9038,  6846,  -1083, 188, -1223, -927,  147,
    82,  -523,  -456,  72,  -557,  3562,  3102,  -492,  -1330, 8506,  7407,  -1174, 180, -1151, -1003, 159,
    77,  -490,  -490,  77,  -526,  3334,  3334,  -526,  -1257, 7962,  7962,  -1257, 170, -1078, -1078, 170,
    72,  -456,  -523,  82,  -492,  3102,  3562,  -557,  -1174, 7407,  8506,  -1330, 159, -1003, -1151, 180,
    67,  -421,  -556,  86,  -453,  2867,  3785,  -583,  -1083, 6846,  9038,  -1392, 147, -927,  -1223, 188,
    61,  -386,  -588,  89,  -413,  2630,  4001,  -603,  -985,  6281,  9554,  -1440, 133, -850,  -1293, 195,
    54,  -352,  -618,  91,  -370,  2394,  4209,  -617,  -884,  5716,  10050, -1473, 120, -774,  -1360, 199,
    48,  -317,  -648,  92,  -327,  2158,  4407,  -623,  -780,  5153,  10525, -1489, 106, -697,  -1425, 202,
    42,  -283,  -675,  91,  -283,  1924,  4595,  -622,  -675,  4595,  10974, -1485, 91,  -622,  -1485, 201,
    35,  -249,  -701,  90,  -239,  1694,  4772,  -612,  -572,  4047,  11395, -1461, 77,  -548,  -1542, 198,
    29,  -216,  -725,  87,  -197,  1470,  4935,  -592,  -471,  3509,  11785, -1414, 64,  -475,  -1595, 191,
    23,  -184,  -747,  83,  -157,  1251,  5084,  -562,  -376,  2987,  12141, -1343, 51,  -404,  -1643, 182,
    18,  -153,  -767,  77,  -120,  1039,  5217,  -521,  -287,  2482,  12459, -1245, 39,  -336,  -1686, 168,
    13,  -123,  -784,  69,  -87,   837,   5333,  -468,  -207,  1998,  12736, -1119, 28,  -270,  -1724, 151,
    8,   -95,   -798,  59,  -58,   644,   5431,  -403,  -137,  1539,  12970, -962,  19,  -208,  -1756, 130,
    5,   -68,   -810,  48,  -34,   463,   5510,  -324,  -80,   1106,  13158, -774,  11,  -150,  -1781, 105,
    2,   -43,   -818,  34,  -15,   294,   5567,  -231,  -37,   703,   13295, -552,  5,   -95,   -1800, 75,
    1,   -21,   -823,  18,  -4,    140,   5603,  -124,  -10,   333,   13380, -295,  1,   -45,   -1811, 40,
    0,   -699,  0,     0,   0,     4944,  0,     0,     0,     13924, 0,     0,     0,   -1785, 0,     0,
    15,  -697,  -17,   0,   -109,  4934,  123,   -4,    -306,  13894, 346,   -10,   39,  -1782, -44,   1,
    29,  -693,  -37,   2,   -204,  4902,  259,   -14,   -574,  13806, 730,   -38,   74,  -1770, -94,   5,
    40,  -686,  -58,   4,   -286,  4852,  408,   -30,   -804,  13663, 1148,  -83,   103, -1752, -147,  11,
    50,  -676,  -80,   7,   -355,  4783,  567,   -51,   -999,  13468, 1598,  -143,  128, -1727, -205,  18,
    58,  -664,  -104,  11,  -412,  4696,  737,   -76,   -1162, 13225, 2075,  -215,  149, -1696, -266,  28,
    65,  -649,  -129,  15,  -459,  4594,  915,   -106,  -1293, 12937, 2578,  -298,  166, -1659, -331,  38,
    70,  -633,  -156,  20,  -495,  4477,  1101,  -139,  -1394, 12607, 3102,  -390,  179, -1617, -398,  50,
    74,  -614,  -183,  25,  -521,  4346,  1294,  -174,  -1469, 12238, 3644,  -490,  188, -1569, -467,  63,
    76,  -594,  -211,  30,  -539,  4202,  1492,  -211,  -1517, 11833, 4202,  -594,  195, -1517, -539,  76,
    77,  -572,  -239,  35,  -548,  4047,  1694,  -249,  -1542, 11395, 4772,  -701,  198, -1461, -612,  90,
    78,  -548,  -268,  41,  -549,  3881,  1900,  -288,  -1546, 10929, 5351,  -810,  198, -1401, -686,  104,
    77,  -524,  -298,  46,  -543,  3706,  2108,  -326,  -1530, 10436, 5935,  -918,  196, -1338, -761,  118,
    75,  -498,  -327,  51,  -531,  3523,  2316,  -363,  -1496, 9920,  6522,  -1023, 192, -1272, -836,  131,
    73,  -471,  -357,  56,  -513,  3333,  2524,  -399,  -1446, 9385,  7109,  -1124, 185, -1203, -912,  144,
    69,  -443,  -386,  61,  -491,  3137,  2731,  -433,  -1381, 8833,  7692,  -1219, 177, -1133, -986,  156,
    66,  -415,  -415,  66,  -464,  2936,  2936,  -464,  -1305, 8267,  8267,  -1305, 167, -1060, -1060, 167,
    61,  -386,  -443,  69,  -433,  2731,  3137,  -491,  -1219, 7692,  8833,  -1381, 156, -986,  -1133, 177,
    56,  -357,  -471,  73,  -399,  2524,  3333,  -513,  -1124, 7109,  9385,  -1446, 144, -912,  -1203, 185,
    51,  -327,  -498,  75,  -363,  2316,  3523,  -531,  -1023, 6522,  9920,  -1496, 131, -836,  -1272, 192,
    46,  -298,  -524,  77,  -326,  2108,  3706,  -543,  -918,  5935,  10436, -1530, 118, -761,  -1338, 196,
    41,  -268,  -548,  78,  -288,  1900,  3881,  -549,  -810,  5351,  10929, -1546, 104, -686,  -1401, 198,
    35,  -239,  -572,  77,  -249,  1694,  4047,  -548,  -701,  4772,  11395, -1542, 90,  -612,  -1461, 198,
    30,  -211,  -594,  76,  -211,  1492,  4202,  -539,  -594,  4202,  11833, -1517, 76,  -539,  -1517, 195,
    25,  -183,  -614,  74,  -174,  1294,  4346,  -521,  -490,  3644,  12238, -1469, 63,  -467,  -1569, 188,
    20,  -156,  -633,  70,  -139,  1101,  4477,  -495,  -390,  3102,  12607, -1394, 50,  -398,  -1617, 179,
    15,  -129,  -649,  65,  -106,  915,   4594,  -459,  -298,  2578,  12937, -1293, 38,  -331,  -1659, 166,
    11,  -104,  -664,  58,  -76,   737,   4696,  -412,  -215,  2075,  13225, -1162, 28,  -266,  -1696, 149,
    7,   -80,   -676,  50,  -51,   567,   4783,  -355,  -143,  1598,  13468, -999,  18,  -205,  -1727, 128,
    4,   -58,   -686,  40,  -30,   408,   4852,  -286,  -83,   1148,  13663, -804,  11,  -147,  -1752, 103,
    2,   -37,   -693,  29,  -14,   259,   4902,  -204,  -38,   730,   13806, -574,  5,   -94,   -1770, 74,
    0,   -17,   -697,  15,  -4,    123,   4934,  -109,  -10,   346,   13894, -306,  1,   -44,   -1782, 39,
    0,   -576,  0,     0,   0,     4288,  0,     0,     0,     14400, 0,     0,     0,   -1728, 0,     0,
    13,  -575,  -14,   0,   -94,   4279,  107,   -3,    -317,  14369, 358,   -10,   38,  -1724, -43,   1,
    24,  -571,  -30,   2,   -177,  4252,  225,   -12,   -593,  14278, 755,   -40,   71,  -1713, -91,   5,
    33,  -565,  -47,   3,   -248,  4208,  354,   -26,   -832,  14130, 1188,  -86,   100, -1696, -143,  10,
    41,  -557,  -66,   6,   -308,  4148,  492,   -44,   -1034, 13929, 1652,  -148,  124, -1671, -198,  18,
    48,  -547,  -86,   9,   -358,  4073,  639,   -66,   -1201, 13678, 2146,  -222,  144, -1641, -258,  27,
    53,  -535,  -107,  12,  -398,  3984,  794,   -92,   -1337, 13380, 2666,  -308,  160, -1606, -320,  37,
    58,  -522,  -128,  16,  -429,  3882,  955,   -120,  -1442, 13038, 3208,  -404,  173, -1565, -385,  48,
    61,  -506,  -151,  20,  -452,  3769,  1122,  -151,  -1519, 12656, 3769,  -506,  182, -1519, -452,  61,
    63,  -490,  -174,  25,  -467,  3644,  1294,  -183,  -1569, 12238, 4346,  -614,  188, -1469, -521,  74,
    64,  -471,  -197,  29,  -475,  3509,  1470,  -216,  -1595, 11785, 4935,  -725,  191, -1414, -592,  87,
    64,  -452,  -221,  34,  -476,  3366,  1648,  -249,  -1599, 11303, 5534,  -837,  192, -1356, -664,  100,
    63,  -432,  -246,  38,  -471,  3214,  1828,  -283,  -1582, 10793, 6138,  -949,  190, -1295, -737,  114,
    62,  -410,  -270,  42,  -461,  3055,  2009,  -315,  -1547, 10260, 6745,  -1058, 186, -1231, -809,  127,
    60,  -388,  -294,  47,  -445,  2890,  2189,  -346,  -1495, 9706,  7352,  -1163, 179, -1165, -882,  140,
    57,  -365,  -318,  50,  -425,  2720,  2369,  -375,  -1429, 9135,  7955,  -1261, 171, -1096, -955,  151,
    54,  -342,  -342,  54,  -402,  2546,  2546,  -402,  -1350, 8550,  8550,  -1350, 162, -1026, -1026, 162,
    50,  -318,  -365,  57,  -375,  2369,  2720,  -425,  -1261, 7955,  9135,  -1429, 151, -955,  -1096, 171,
    47,  -294,  -388,  60,  -346,  2189,  2890,  -445,  -1163, 7352,  9706,  -1495, 140, -882,  -1165, 179,
    42,  -270,  -410,  62,  -315,  2009,  3055,  -461,  -1058, 6745,  10260, -1547, 127, -809,  -1231, 186,
    38,  -246,  -432,  63,  -283,  1828,  3214,  -471,  -949,  6138,  10793, -1582, 114, -737,  -1295, 190,
    34,  -221,  -452,  64,  -249,  1648,  3366,  -476,  -837,  5534,  11303, -1599, 100, -664,  -1356, 192,
    29,  -197,  -471,  64,  -216,  1470,  3509,  -475,  -725,  4935,  11785, -1595, 87,  -592,  -1414, 191,
    25,  -174,  -490,  63,  -183,  1294,  3644,  -467,  -614,  4346,  12238, -1569, 74,  -521,  -1469, 188,
    20,  -151,  -506,  61,  -151,  1122,  3769,  -452,  -506,  3769,  12656, -1519, 61,  -452,  -1519, 182,
    16,  -128,  -522,  58,  -120,  955,   3882,  -429,  -404,  3208,  13038, -1442, 48,  -385,  -1565, 173,
    12,  -107,  -535,  53,  -92,   794,   3984,  -398,  -308,  2666,  13380, -1337, 37,  -320,  -1606, 160,
    9,   -86,   -547,  48,  -66,   639,   4073,  -358,  -222,  2146,  13678, -1201, 27,  -258,  -1641, 144,
    6,   -66,   -557,  41,  -44,   492,   4148,  -308,  -148,  1652,  13929, -1034, 18,  -198,  -1671, 124,
    3,   -47,   -565,  33,  -26,   354,   4208,  -248,  -86,   1188,  14130, -832,  10,  -143,  -1696, 100,
    2,   -30,   -571,  24,  -12,   225,   4252,  -177,  -40,   755,   14278, -593,  5,   -91,   -1713, 71,
    0,   -14,   -575,  13,  -3,    107,   4279,  -94,   -10,   358,   14369, -317,  1,   -43,   -1724, 38,
    0,   -459,  0,     0,   0,     3650,  0,     0,     0,     14834, 0,     0,     0,   -1641, 0,     0,
    10,  -458,  -11,   0,   -80,   3642,  91,    -3,    -326,  14802, 369,   -11,   36,  -1637, -41,   1,
    19,  -455,  -24,   1,   -150,  3619,  191,   -10,   -611,  14709, 778,   -41,   68,  -1627, -86,   5,
    27,  -451,  -38,   3,   -211,  3581,  301,   -22,   -857,  14556, 1223,  -89,   95,  -1610, -135,  10,
    33,  -444,  -53,   5,   -262,  3530,  419,   -37,   -1065, 14349, 1702,  -152,  118, -1587, -188,  17,
    38,  -436,  -68,   7,   -304,  3467,  544,   -56,   -1238, 14090, 2211,  -229,  137, -1558, -245,  25,
    43,  -427,  -85,   10,  -339,  3391,  676,   -78,   -1377, 13783, 2746,  -318,  152, -1524, -304,  35,
    46,  -416,  -102,  13,  -365,  3304,  813,   -102,  -1485, 13431, 3304,  -416,  164, -1485, -365,  46,
    48,  -404,  -120,  16,  -385,  3208,  955,   -128,  -1565, 13038, 3882,  -522,  173, -1442, -429,  58,
    50,  -390,  -139,  20,  -398,  3102,  1101,  -156,  -1617, 12607, 4477,  -633,  179, -1394, -495,  70,
    51,  -376,  -157,  23,  -404,  2987,  1251,  -184,  -1643, 12141, 5084,  -747,  182, -1343, -562,  83,
    51,  -361,  -177,  27,  -405,  2865,  1403,  -212,  -1647, 11644, 5701,  -863,  182, -1288, -630,  95,
    50,  -344,  -196,  30,  -401,  2735,  1556,  -241,  -1630, 11119, 6323,  -978,  180, -1230, -699,  108,
    49,  -327,  -215,  34,  -392,  2600,  1710,  -268,  -1593, 10569, 6949,  -1090, 176, -1169, -769,  121,
    48,  -310,  -235,  37,  -379,  2460,  1863,  -295,  -1540, 9999,  7574,  -1198, 170, -1106, -838,  132,
    46,  -291,  -254,  40,  -362,  2315,  2016,  -320,  -1472, 9410,  8195,  -1299, 163, -1041, -906,  144,
    43,  -273,  -273,  43,  -342,  2167,  2167,  -342,  -1391, 8808,  8808,  -1391, 154, -974,  -974,  154,
    40,  -254,  -291,  46,  -320,  2016,  2315,  -362,  -1299, 8195,  9410,  -1472, 144, -906,  -1041, 163,
    37,  -235,  -310,  48,  -295,  1863,  2460,  -379,  -1198, 7574,  9999,  -1540, 132, -838,  -1106, 170,
    34,  -215,  -327,  49,  -268,  1710,  2600,  -392,  -1090, 6949,  10569, -1593, 121, -769,  -1169, 176,
    30,  -196,  -344,  50,  -241,  1556,  2735,  -401,  -978,  6323,  11119, -1630, 108, -699,  -1230, 180,
    27,  -177,  -361,  51,  -212,  1403,  2865,  -405,  -863,  5701,  11644, -1647, 95,  -630,  -1288, 182,
    23,  -157,  -376,  51,  -184,  1251,  2987,  -404,  -747,  5084,  12141, -1643, 83,  -562,  -1343, 182,
    20,  -139,  -390,  50,  -156,  1101,  3102,  -398,  -633,  4477,  12607, -1617, 70,  -495,  -1394, 179,
    16,  -120,  -404,  48,  -128,  955,   3208,  -385,  -522,  3882,  13038, -1565, 58,  -429,  -1442, 173,
    13,  -102,  -416,  46,  -102,  813,   3304,  -365,  -416,  3304,  13431, -1485, 46,  -365,  -1485, 164,
    10,  -85,   -427,  43,  -78,   676,   3391,  -339,  -318,  2746,  13783, -1377, 35,  -304,  -1524, 152,
    7,   -68,   -436,  38,  -56,   544,   3467,  -304,  -229,  2211,  14090, -1238, 25,  -245,  -1558, 137,
    5,   -53,   -444,  33,  -37,   419,   3530,  -262,  -152,  1702,  14349, -1065, 17,  -188,  -1587, 118,
    3,   -38,   -451,  27,  -22,   301,   3581,  -211,  -89,   1223,  14556, -857,  10,  -135,  -1610, 95,
    1,   -24,   -455,  19,  -10,   191,   3619,  -150,  -41,   778,   14709, -611,  5,   -86,   -1627, 68,
    0,   -11,   -458,  10,  -3,    91,    3642,  -80,   -11,   369,   14802, -326,  1,   -41,   -1637, 36,
    0,   -351,  0,     0,   0,     3033,  0,     0,     0,     15223, 0,     0,     0,   -1521, 0,     0,
    8,   -350,  -9,    0,   -67,   3026,  75,    -2,    -335,  15190, 379,   -11,   33,  -1518, -38,   1,
    14,  -348,  -18,   1,   -125,  3007,  159,   -8,    -627,  15094, 798,   -42,   63,  -1508, -80,   4,
    20,  -344,  -29,   2,   -175,  2976,  250,   -18,   -879,  14938, 1255,  -91,   88,  -1492, -125,  9,
    25,  -340,  -40,   4,   -218,  2934,  348,   -31,   -1093, 14725, 1747,  -156,  109, -1471, -175,  16,
    29,  -333,  -52,   5,   -253,  2881,  452,   -47,   -1270, 14459, 2269,  -235,  127, -1445, -227,  23,
    33,  -326,  -65,   8,   -282,  2818,  561,   -65,   -1413, 14144, 2818,  -326,  141, -1413, -282,  33,
    35,  -318,  -78,   10,  -304,  2746,  676,   -85,   -1524, 13783, 3391,  -427,  152, -1377, -339,  43,
    37,  -308,  -92,   12,  -320,  2666,  794,   -107,  -1606, 13380, 3984,  -535,  160, -1337, -398,  53,
    38,  -298,  -106,  15,  -331,  2578,  915,   -129,  -1659, 12937, 4594,  -649,  166, -1293, -459,  65,
    39,  -287,  -120,  18,  -336,  2482,  1039,  -153,  -1686, 12459, 5217,  -767,  168, -1245, -521,  77,
    39,  -275,  -135,  20,  -337,  2381,  1166,  -176,  -1690, 11949, 5850,  -885,  169, -1194, -584,  88,
    39,  -263,  -150,  23,  -333,  2273,  1293,  -200,  -1672, 11410, 6489,  -1003, 167, -1140, -648,  100,
    38,  -250,  -164,  26,  -326,  2161,  1421,  -223,  -1635, 10846, 7131,  -1119, 163, -1084, -712,  112,
    36,  -237,  -179,  28,  -315,  2044,  1549,  -245,  -1580, 10260, 7772,  -1229, 158, -1025, -777,  123,
    35,  -223,  -194,  31,  -301,  1924,  1675,  -266,  -1510, 9657,  8409,  -1333, 151, -965,  -840,  133,
    33,  -208,  -208,  33,  -284,  1801,  1801,  -284,  -1427, 9039,  9039,  -1427, 143, -903,  -903,  143,
    31,  -194,  -223,  35,  -266,  1675,  1924,  -301,  -1333, 8409,  9657,  -1510, 133, -840,  -965,  151,
    28,  -179,  -237,  36,  -245,  1549,  2044,  -315,  -1229, 7772,  10260, -1580, 123, -777,  -1025, 158,
    26,  -164,  -250,  38,  -223,  1421,  2161,  -326,  -1119, 7131,  10846, -1635, 112, -712,  -1084, 163,
    23,  -150,  -263,  39,  -200,  1293,  2273,  -333,  -1003, 6489,  11410, -1672, 100, -648,  -1140, 167,
    20,  -135,  -275,  39,  -176,  1166,  2381,  -337,  -885,  5850,  11949, -1690, 88,  -584,  -1194, 169,
    18,  -120,  -287,  39,  -153,  1039,  2482,  -336,  -767,  5217,  12459, -1686, 77,  -521,  -1245, 168,
    15,  -106,  -298,  38,  -129,  915,   2578,  -331,  -649,  4594,  12937, -1659, 65,  -459,  -1293, 166,
    12,  -92,   -308,  37,  -107,  794,   2666,  -320,  -535,  3984,  13380, -1606, 53,  -398,  -1337, 160,
    10,  -78,   -318,  35,  -85,   676,   2746,  -304,  -427,  3391,  13783, -1524, 43,  -339,  -1377, 152,
    8,   -65,   -326,  33,  -65,   561,   2818,  -282,  -326,  2818,  14144, -1413, 33,  -282,  -1413, 141,
    5,   -52,   -333,  29,  -47,   452,   2881,  -253,  -235,  2269,  14459, -1270, 23,  -227,  -1445, 127,
    4,   -40,   -340,  25,  -31,   348,   2934,  -218,  -156,  1747,  14725, -1093, 16,  -175,  -1471, 109,
    2,   -29,   -344,  20,  -18,   250,   2976,  -175,  -91,   1255,  14938, -879,  9,   -125,  -1492, 88,
    1,   -18,   -348,  14,  -8,    159,   3007,  -125,  -42,   798,   15094, -627,  4,   -80,   -1508, 63,
    0,   -9,    -350,  8,   -2,    75,    3026,  -67,   -11,   379,   15190, -335,  1,   -38,   -1518, 33,
    0,   -253,  0,     0,   0,     2442,  0,     0,     0,     15562, 0,     0,     0,   -1367, 0,     0,
    6,   -253,  -6,    0,   -54,   2437,  61,    -2,    -342,  15529, 387,   -11,   30,  -1364, -34,   1,
    10,  -251,  -13,   1,   -101,  2421,  128,   -7,    -641,  15430, 816,   -43,   56,  -1355, -72,   4,
    15,  -248,  -21,   2,   -141,  2396,  201,   -15,   -899,  15270, 1283,  -93,   79,  -1341, -113,  8,
    18,  -245,  -29,   3,   -175,  2362,  280,   -25,   -1117, 15053, 1786,  -160,  98,  -1322, -157,  14,
    21,  -240,  -38,   4,   -204,  2319,  364,   -38,   -1298, 14781, 2319,  -240,  114, -1298, -204,  21,
    23,  -235,  -47,   5,   -227,  2269,  452,   -52,   -1445, 14459, 2881,  -333,  127, -1270, -253,  29,
    25,  -229,  -56,   7,   -245,  2211,  544,   -68,   -1558, 14090, 3467,  -436,  137, -1238, -304,  38,
    27,  -222,  -66,   9,   -258,  2146,  639,   -86,   -1641, 13678, 4073,  -547,  144, -1201, -358,  48,
    28,  -215,  -76,   11,  -266,  2075,  737,   -104,  -1696, 13225, 4696,  -664,  149, -1162, -412,  58,
    28,  -207,  -87,   13,  -270,  1998,  837,   -123,  -1724, 12736, 5333,  -784,  151, -1119, -468,  69,
    28,  -199,  -97,   15,  -271,  1917,  938,   -142,  -1728, 12215, 5980,  -905,  152, -1073, -525,  79,
    28,  -190,  -108,  17,  -268,  1830,  1041,  -161,  -1710, 11664, 6634,  -1026, 150, -1024, -583,  90,
    27,  -180,  -119,  19,  -262,  1740,  1144,  -179,  -1672, 11088, 7290,  -1144, 147, -974,  -640,  100,
    26,  -171,  -129,  20,  -254,  1646,  1247,  -197,  -1616, 10489, 7945,  -1257, 142, -921,  -698,  110,
    25,  -161,  -140,  22,  -242,  1549,  1349,  -214,  -1544, 9872,  8597,  -1362, 136, -867,  -755,  120,
    24,  -150,  -150,  24,  -229,  1450,  1450,  -229,  -1459, 9240,  9240,  -1459, 128, -812,  -812,  128,
    22,  -140,  -161,  25,  -214,  1349,  1549,  -242,  -1362, 8597,  9872,  -1544, 120, -755,  -867,  136,
    20,  -129,  -171,  26,  -197,  1247,  1646,  -254,  -1257, 7945,  10489, -1616, 110, -698,  -921,  142,
    19,  -119,  -180,  27,  -179,  1144,  1740,  -262,  -1144, 7290,  11088, -1672, 100, -640,  -974,  147,
    17,  -108,  -190,  28,  -161,  1041,  1830,  -268,  -1026, 6634,  11664, -1710, 90,  -583,  -1024, 150,
    15,  -97,   -199,  28,  -142,  938,   1917,  -271,  -905,  5980,  12215, -1728, 79,  -525,  -1073, 152,
    13,  -87,   -207,  28,  -123,  837,   1998,  -270,  -784,  5333,  12736, -1724, 69,  -468,  -1119, 151,
    11,  -76,   -215,  28,  -104,  737,   2075,  -266,  -664,  4696,  13225, -1696, 58,  -412,  -1162, 149,
    9,   -66,   -222,  27,  -86,   639,   2146,  -258,  -547,  4073,  13678, -1641, 48,  -358,  -1201, 144,
    7,   -56,   -229,  25,  -68,   544,   2211,  -245,  -436,  3467,  14090, -1558, 38,  -304,  -1238, 137,
    5,   -47,   -235,  23,  -52,   452,   2269,  -227,  -333,  2881,  14459, -1445, 29,  -253,  -1270, 127,
    4,   -38,   -240,  21,  -38,   364,   2319,  -204,  -240,  2319,  14781, -1298, 21,  -204,  -1298, 114,
    3,   -29,   -245,  18,  -25,   280,   2362,  -175,  -160,  1786,  15053, -1117, 14,  -157,  -1322, 98,
    2,   -21,   -248,  15,  -15,   201,   2396,  -141,  -93,   1283,  15270, -899,  8,   -113,  -1341, 79,
    1,   -13,   -251,  10,  -7,    128,   2421,  -101,  -43,   816,   15430, -641,  4,   -72,   -1355, 56,
    0,   -6,    -253,  6,   -2,    61,    2437,  -54,   -11,   387,   15529, -342,  1,   -34,   -1364, 30,
    0,   -168,  0,     0,   0,     1880,  0,     0,     0,     15848, 0,     0,     0,   -1176, 0,     0,
    4,   -168,  -4,    0,   -41,   1876,  47,    -1,    -349,  15814, 394,   -11,   26,  -1173, -29,   1,
    7,   -167,  -9,    0,   -77,   1864,  99,    -5,    -653,  15714, 831,   -44,   48,  -1166, -62,   3,
    10,  -165,  -14,   1,   -109,  1845,  155,   -11,   -915,  15551, 1307,  -95,   68,  -1154, -97,   7,
    12,  -162,  -19,   2,   -135,  1818,  216,   -19,   -1138, 15330, 1818,  -162,  84,  -1138, -135,  12,
    14,  -160,  -25,   3,   -157,  1786,  280,   -29,   -1322, 15053, 2362,  -245,  98,  -1117, -175,  18,
    16,  -156,  -31,   4,   -175,  1747,  348,   -40,   -1471, 14725, 2934,  -340,  109, -1093, -218,  25,
    17,  -152,  -37,   5,   -188,  1702,  419,   -53,   -1587, 14349, 3530,  -444,  118, -1065, -262,  33,
    18,  -148,  -44,   6,   -198,  1652,  492,   -66,   -1671, 13929, 4148,  -557,  124, -1034, -308,  41,
    18,  -143,  -51,   7,   -205,  1598,  567,   -80,   -1727, 13468, 4783,  -676,  128, -999,  -355,  50,
    19,  -137,  -58,   8,   -208,  1539,  644,   -95,   -1756, 12970, 5431,  -798,  130, -962,  -403,  59,
    19,  -132,  -65,   10,  -209,  1476,  722,   -109,  -1760, 12439, 6090,  -922,  131, -923,  -452,  68,
    18,  -126,  -72,   11,  -207,  1409,  801,   -124,  -1741, 11878, 6756,  -1045, 129, -881,  -501,  78,
    18,  -120,  -79,   12,  -202,  1339,  881,   -138,  -1702, 11291, 7424,  -1165, 126, -838,  -551,  86,
    17,  -113,  -86,   14,  -195,  1267,  960,   -152,  -1645, 10682, 8091,  -1280, 122, -793,  -600,  95,
    17,  -107,  -93,   15,  -187,  1193,  1039,  -165,  -1572, 10053, 8755,  -1387, 117, -746,  -650,  103,
    16,  -100,  -100,  16,  -176,  1116,  1116,  -176,  -1486, 9410,  9410,  -1486, 110, -698,  -698,  110,
    15,  -93,   -107,  17,  -165,  1039,  1193,  -187,  -1387, 8755,  10053, -1572, 103, -650,  -746,  117,
    14,  -86,   -113,  17,  -152,  960,   1267,  -195,  -1280, 8091,  10682, -1645, 95,  -600,  -793,  122,
    12,  -79,   -120,  18,  -138,  881,   1339,  -202,  -1165, 7424,  11291, -1702, 86,  -551,  -838,  126,
    11,  -72,   -126,  18,  -124,  801,   1409,  -207,  -1045, 6756,  11878, -1741, 78,  -501,  -881,  129,
    10,  -65,   -132,  19,  -109,  722,   1476,  -209,  -922,  6090,  12439, -1760, 68,  -452,  -923,  131,
    8,   -58,   -137,  19,  -95,   644,   1539,  -208,  -798,  5431,  12970, -1756, 59,  -403,  -962,  130,
    7,   -51,   -143,  18,  -80,   567,   1598,  -205,  -676,  4783,  13468, -1727, 50,  -355,  -999,  128,
    6,   -44,   -148,  18,  -66,   492,   1652,  -198,  -557,  4148,  13929, -1671, 41,  -308,  -1034, 124,
    5,   -37,   -152,  17,  -53,   419,   1702,  -188,  -444,  3530,  14349, -1587, 33,  -262,  -1065, 118,
    4,   -31,   -156,  16,  -40,   348,   1747,  -175,  -340,  2934,  14725, -1471, 25,  -218,  -1093, 109,
    3,   -25,   -160,  14,  -29,   280,   1786,  -157,  -245,  2362,  15053, -1322, 18,  -175,  -1117, 98,
    2,   -19,   -162,  12,  -19,   216,   1818,  -135,  -162,  1818,  15330, -1138, 12,  -135,  -1138, 84,
    1,   -14,   -165,  10,  -11,   155,   1845,  -109,  -95,   1307,  15551, -915,  7,   -97,   -1154, 68,
    0,   -9,    -167,  7,   -5,    99,    1864,  -77,   -44,   831,   15714, -653,  3,   -62,   -1166, 48,
    0,   -4,    -168,  4,   -1,    47,    1876,  -41,   -11,   394,   15814, -349,  1,   -29,   -1173, 26,
    0,   -98,   0,     0,   0,     1351,  0,     0,     0,     16077, 0,     0,     0,   -946,  0,     0,
    2,   -98,   -2,    0,   -30,   1348,  34,    -1,    -354,  16042, 400,   -11,   21,  -944,  -24,   1,
    4,   -97,   -5,    0,   -56,   1340,  71,    -4,    -662,  15940, 843,   -44,   39,  -938,  -50,   3,
    6,   -96,   -8,    1,   -78,   1326,  111,   -8,    -928,  15776, 1326,  -96,   55,  -928,  -78,   6,
    7,   -95,   -11,   1,   -97,   1307,  155,   -14,   -1154, 15551, 1845,  -165,  68,  -915,  -109,  10,
    8,   -93,   -15,   2,   -113,  1283,  201,   -21,   -1341, 15270, 2396,  -248,  79,  -899,  -141,  15,
    9,   -91,   -18,   2,   -125,  1255,  250,   -29,   -1492, 14938, 2976,  -344,  88,  -879,  -175,  20,
    10,  -89,   -22,   3,   -135,  1223,  301,   -38,   -1610, 14556, 3581,  -451,  95,  -857,  -211,  27,
    10,  -86,   -26,   3,   -143,  1188,  354,   -47,   -1696, 14130, 4208,  -565,  100, -832,  -248,  33,
    11,  -83,   -30,   4,   -147,  1148,  408,   -58,   -1752, 13663, 4852,  -686,  103, -804,  -286,  40,
    11,  -80,   -34,   5,   -150,  1106,  463,   -68,   -1781, 13158, 5510,  -810,  105, -774,  -324,  48,
    11,  -77,   -38,   6,   -150,  1061,  519,   -79,   -1785, 12619, 6178,  -935,  105, -743,  -364,  55,
    11,  -73,   -42,   6,   -148,  1013,  576,   -89,   -1766, 12050, 6853,  -1060, 104, -709,  -403,  62,
    11,  -70,   -46,   7,   -145,  963,   633,   -99,   -1727, 11454, 7531,  -1182, 102, -674,  -443,  70,
    10,  -66,   -50,   8,   -140,  911,   690,   -109,  -1669, 10836, 8208,  -1298, 98,  -638,  -483,  76,
    10,  -62,   -54,   9,   -134,  857,   746,   -118,  -1595, 10199, 8881,  -1407, 94,  -600,  -523,  83,
    9,   -58,   -58,   9,   -127,  802,   802,   -127,  -1507, 9546,  9546,  -1507, 89,  -562,  -562,  89,
    9,   -54,   -62,   10,  -118,  746,   857,   -134,  -1407, 8881,  10199, -1595, 83,  -523,  -600,  94,
    8,   -50,   -66,   10,  -109,  690,   911,   -140,  -1298, 8208,  10836, -1669, 76,  -483,  -638,  98,
    7,   -46,   -70,   11,  -99,   633,   963,   -145,  -1182, 7531,  11454, -1727, 70,  -443,  -674,  102,
    6,   -42,   -73,   11,  -89,   576,   1013,  -148,  -1060, 6853,  12050, -1766, 62,  -403,  -709,  104,
    6,   -38,   -77,   11,  -79,   519,   1061,  -150,  -935,  6178,  12619, -1785, 55,  -364,  -743,  105,
    5,   -34,   -80,   11,  -68,   463,   1106,  -150,  -810,  5510,  13158, -1781, 48,  -324,  -774,  105,
    4,   -30,   -83,   11,  -58,   408,   1148,  -147,  -686,  4852,  13663, -1752, 40,  -286,  -804,  103,
    3,   -26,   -86,   10,  -47,   354,   1188,  -143,  -565,  4208,  14130, -1696, 33,  -248,  -832,  100,
    3,   -22,   -89,   10,  -38,   301,   1223,  -135,  -451,  3581,  14556, -1610, 27,  -211,  -857,  95,
    2,   -18,   -91,   9,   -29,   250,   1255,  -125,  -344,  2976,  14938, -1492, 20,  -175,  -879,  88,
    2,   -15,   -93,   8,   -21,   201,   1283,  -113,  -248,  2396,  15270, -1341, 15,  -141,  -899,  79,
    1,   -11,   -95,   7,   -14,   155,   1307,  -97,   -165,  1845,  15551, -1154, 10,  -109,  -915,  68,
    1,   -8,    -96,   6,   -8,    111,   1326,  -78,   -96,   1326,  15776, -928,  6,   -78,   -928,  55,
    0,   -5,    -97,   4,   -4,    71,    1340,  -56,   -44,   843,   15940, -662,  3,   -50,   -938,  39,
    0,   -2,    -98,   2,   -1,    34,    1348,  -30,   -11,   400,   16042, -354,  1,   -24,   -944,  21,
    0,   -45,   0,     0,   0,     859,   0,     0,     0,     16245, 0,     0,     0,   -675,  0,     0,
    1,   -45,   -1,    0,   -19,   857,   21,    -1,    -357,  16210, 404,   -12,   15,  -674,  -17,   0,
    2,   -45,   -2,    0,   -35,   852,   45,    -2,    -669,  16107, 852,   -45,   28,  -669,  -35,   2,
    3,   -44,   -4,    0,   -50,   843,   71,    -5,    -938,  15940, 1340,  -97,   39,  -662,  -56,   4,
    3,   -44,   -5,    0,   -62,   831,   99,    -9,    -1166, 15714, 1864,  -167,  48,  -653,  -77,   7,
    4,   -43,   -7,    1,   -72,   816,   128,   -13,   -1355, 15430, 2421,  -251,  56,  -641,  -101,  10,
    4,   -42,   -8,    1,   -80,   798,   159,   -18,   -1508, 15094, 3007,  -348,  63,  -627,  -125,  14,
    5,   -41,   -10,   1,   -86,   778,   191,   -24,   -1627, 14709, 3619,  -455,  68,  -611,  -150,  19,
    5,   -40,   -12,   2,   -91,   755,   225,   -30,   -1713, 14278, 4252,  -571,  71,  -593,  -177,  24,
    5,   -38,   -14,   2,   -94,   730,   259,   -37,   -1770, 13806, 4902,  -693,  74,  -574,  -204,  29,
    5,   -37,   -15,   2,   -95,   703,   294,   -43,   -1800, 13295, 5567,  -818,  75,  -552,  -231,  34,
    5,   -35,   -17,   3,   -95,   674,   330,   -50,   -1804, 12751, 6243,  -945,  75,  -530,  -259,  39,
    5,   -34,   -19,   3,   -94,   644,   366,   -57,   -1785, 12176, 6925,  -1071, 74,  -506,  -288,  44,
    5,   -32,   -21,   3,   -92,   612,   402,   -63,   -1745, 11574, 7610,  -1194, 72,  -481,  -316,  50,
    5,   -30,   -23,   4,   -89,   579,   439,   -69,   -1687, 10949, 8294,  -1312, 70,  -455,  -345,  55,
    4,   -29,   -25,   4,   -85,   545,   475,   -75,   -1612, 10305, 8974,  -1422, 67,  -428,  -373,  59,
    4,   -27,   -27,   4,   -81,   510,   510,   -81,   -1523, 9645,  9645,  -1523, 63,  -401,  -401,  63,
    4,   -25,   -29,   4,   -75,   475,   545,   -85,   -1422, 8974,  10305, -1612, 59,  -373,  -428,  67,
    4,   -23,   -30,   5,   -69,   439,   579,   -89,   -1312, 8294,  10949, -1687, 55,  -345,  -455,  70,
    3,   -21,   -32,   5,   -63,   402,   612,   -92,   -1194, 7610,  11574, -1745, 50,  -316,  -481,  72,
    3,   -19,   -34,   5,   -57,   366,   644,   -94,   -1071, 6925,  12176, -1785, 44,  -288,  -506,  74,
    3,   -17,   -35,   5,   -50,   330,   674,   -95,   -945,  6243,  12751, -1804, 39,  -259,  -530,  75,
    2,   -15,   -37,   5,   -43,   294,   703,   -95,   -818,  5567,  13295, -1800, 34,  -231,  -552,  75,
    2,   -14,   -38,   5,   -37,   259,   730,   -94,   -693,  4902,  13806, -1770, 29,  -204,  -574,  74,
    2,   -12,   -40,   5,   -30,   225,   755,   -91,   -571,  4252,  14278, -1713, 24,  -177,  -593,  71,
    1,   -10,   -41,   5,   -24,   191,   778,   -86,   -455,  3619,  14709, -1627, 19,  -150,  -611,  68,
    1,   -8,    -42,   4,   -18,   159,   798,   -80,   -348,  3007,  15094, -1508, 14,  -125,  -627,  63,
    1,   -7,    -43,   4,   -13,   128,   816,   -72,   -251,  2421,  15430, -1355, 10,  -101,  -641,  56,
    0,   -5,    -44,   3,   -9,    99,    831,   -62,   -167,  1864,  15714, -1166, 7,   -77,   -653,  48,
    0,   -4,    -44,   3,   -5,    71,    843,   -50,   -97,   1340,  15940, -938,  4,   -56,   -662,  39,
    0,   -2,    -45,   2,   -2,    45,    852,   -35,   -45,   852,   16107, -669,  2,   -35,   -669,  28,
    0,   -1,    -45,   1,   -1,    21,    857,   -19,   -12,   404,   16210, -357,  0,   -17,   -674,  15,
    0,   -12,   0,     0,   0,     407,   0,     0,     0,     16349, 0,     0,     0,   -360,  0,     0,
    0,   -12,   0,     0,   -9,    407,   10,    0,     -360,  16313, 407,   -12,   8,   -360,  -9,    0,
    0,   -12,   -1,    0,   -17,   404,   21,    -1,    -674,  16210, 857,   -45,   15,  -357,  -19,   1,
    1,   -11,   -1,    0,   -24,   400,   34,    -2,    -944,  16042, 1348,  -98,   21,  -354,  -30,   2,
    1,   -11,   -1,    0,   -29,   394,   47,    -4,    -1173, 15814, 1876,  -168,  26,  -349,  -41,   4,
    1,   -11,   -2,    0,   -34,   387,   61,    -6,    -1364, 15529, 2437,  -253,  30,  -342,  -54,   6,
    1,   -11,   -2,    0,   -38,   379,   75,    -9,    -1518, 15190, 3026,  -350,  33,  -335,  -67,   8,
    1,   -11,   -3,    0,   -41,   369,   91,    -11,   -1637, 14802, 3642,  -458,  36,  -326,  -80,   10,
    1,   -10,   -3,    0,   -43,   358,   107,   -14,   -1724, 14369, 4279,  -575,  38,  -317,  -94,   13,
    1,   -10,   -4,    0,   -44,   346,   123,   -17,   -1782, 13894, 4934,  -697,  39,  -306,  -109,  15,
    1,   -10,   -4,    1,   -45,   333,   140,   -21,   -1811, 13380, 5603,  -823,  40,  -295,  -124,  18,
    1,   -9,    -4,    1,   -45,   320,   157,   -24,   -1815, 12832, 6283,  -951,  40,  -283,  -138,  21,
    1,   -9,    -5,    1,   -45,   305,   174,   -27,   -1796, 12253, 6969,  -1078, 40,  -270,  -154,  24,
    1,   -8,    -5,    1,   -44,   290,   191,   -30,   -1756, 11648, 7658,  -1202, 39,  -257,  -169,  26,
    1,   -8,    -6,    1,   -42,   275,   208,   -33,   -1697, 11019, 8347,  -1320, 37,  -243,  -184,  29,
    1,   -7,    -6,    1,   -40,   258,   225,   -36,   -1622, 10371, 9031,  -1431, 36,  -229,  -199,  32,
    1,   -7,    -7,    1,   -38,   242,   242,   -38,   -1533, 9707,  9707,  -1533, 34,  -214,  -214,  34,
    1,   -6,    -7,    1,   -36,   225,   258,   -40,   -1431, 9031,  10371, -1622, 32,  -199,  -229,  36,
    1,   -6,    -8,    1,   -33,   208,   275,   -42,   -1320, 8347,  11019, -1697, 29,  -184,  -243,  37,
    1,   -5,    -8,    1,   -30,   191,   290,   -44,   -1202, 7658,  11648, -1756, 26,  -169,  -257,  39,
    1,   -5,    -9,    1,   -27,   174,   305,   -45,   -1078, 6969,  12253, -1796, 24,  -154,  -270,  40,
    1,   -4,    -9,    1,   -24,   157,   320,   -45,   -951,  6283,  12832, -1815, 21,  -138,  -283,  40,
    1,   -4,    -10,   1,   -21,   140,   333,   -45,   -823,  5603,  13380, -1811, 18,  -124,  -295,  40,
    0,   -4,    -10,   1,   -17,   123,   346,   -44,   -697,  4934,  13894, -1782, 15,  -109,  -306,  39,
    0,   -3,    -10,   1,   -14,   107,   358,   -43,   -575,  4279,  14369, -1724, 13,  -94,   -317,  38,
    0,   -3,    -11,   1,   -11,   91,    369,   -41,   -458,  3642,  14802, -1637, 10,  -80,   -326,  36,
    0,   -2,    -11,   1,   -9,    75,    379,   -38,   -350,  3026,  15190, -1518, 8,   -67,   -335,  33,
    0,   -2,    -11,   1,   -6,    61,    387,   -34,   -253,  2437,  15529, -1364, 6,   -54,   -342,  30,
    0,   -1,    -11,   1,   -4,    47,    394,   -29,   -168,  1876,  15814, -1173, 4,   -41,   -349,  26,
    0,   -1,    -11,   1,   -2,    34,    400,   -24,   -98,   1348,  16042, -944,  2,   -30,   -354,  21,
    0,   -1,    -12,   0,   -1,    21,    404,   -17,   -45,   857,   16210, -674,  1,   -19,   -357,  15,
    0,   0,     -12,   0,   0,     10,    407,   -9,    -12,   407,   16313, -360,  0,   -9,    -360,  8};

#define _RNDSATURN_TPLT_DEC template <int IN_BW, int OUT_BW, int IN_FBITS, int OUT_FBITS, bool EN_RND = 1>
namespace xf {
namespace cv {

// ======================================================================================
// A generic structure for REMAP operation
// --------------------------------------------------------------------------------------
// Template Args:-
//	SRC_T : Data type of source image element
//	DST_T : Data type of destination image element
//	FLOW_T : Data type of Flow vector element
//	MVF : Max Flow Value
//      ROWS : Image height
//      COLS : Image width
//      K_ROWS : filter height
//      K_COLS : filter width
//      NPPC : No.of pixels per clock
//      BORDER_T : Type of border to be used for edge pixel(s) computation
//		USE_URAM : use URAM resources for line buffer
// 		USE_MAT : use MAT
// ......................................................................................

// Some macros related to template (for easiness of coding)
#define _GENERIC_REMAP_TPLT_DEC                                                                                    \
    template <typename F, int SRC_T, int DST_T, int FLOW_T, int MFV, int U_FBITS, int I_FBITS, int ROWS, int COLS, \
              int K_ROWS, int K_COLS, int NPPC = 1, int XFCVDEPTH_src = _XFCVDEPTH_DEFAULT,                        \
              int XFCVDEPTH_Ux = _XFCVDEPTH_DEFAULT, int XFCVDEPTH_Uy = _XFCVDEPTH_DEFAULT,                        \
              int XFCVDEPTH_dst = _XFCVDEPTH_DEFAULT, int BORDER_T = XF_BORDER_REFLECT_101, int USE_URAM = 0,      \
              int USE_MAT = 1>
#define _GENERIC_REMAP_TPLT                                                                                        \
    template <typename F, int SRC_T, int DST_T, int FLOW_T, int MFV, int U_FBITS, int I_FBITS, int ROWS, int COLS, \
              int K_ROWS, int K_COLS, int NPPC, int XFCVDEPTH_src, int XFCVDEPTH_Ux, int XFCVDEPTH_Uy,             \
              int XFCVDEPTH_dst, int BORDER_T, int USE_URAM, int USE_MAT>
#define _GENERIC_REMAP                                                                                            \
    GenericREMAP<F, SRC_T, DST_T, FLOW_T, MFV, U_FBITS, I_FBITS, ROWS, COLS, K_ROWS, K_COLS, NPPC, XFCVDEPTH_src, \
                 XFCVDEPTH_Ux, XFCVDEPTH_Uy, XFCVDEPTH_dst, BORDER_T, USE_URAM, USE_MAT>

// Some global constants
#define CH_IDX_T uint8_t
#define K_ROW_IDX_T uint8_t
#define K_COL_IDX_T uint8_t
#define COL_IDX_T uint16_t // Support upto 65,535
#define ROW_IDX_T uint16_t // Support upto 65,535
#define SIZE_IDX_T uint32_t
#define BICUBIC_FILTER 4 // Bicubic Filter size

// Some internal constants
#define _NPPC (XF_NPIXPERCYCLE(NPPC))       // Number of pixel per clock to be processed
#define _NPPC_SHIFT_VAL (XF_BITSHIFT(NPPC)) // Gives log base 2 on NPPC; Used for shifting purpose in case of division
#define _ECPR ((((MFV + BICUBIC_FILTER - 2) + (_NPPC - 1)) / _NPPC)) // Extra clocks required for processing a row

#define _DST_PIX_WIDTH (XF_PIXELDEPTH(XF_DEPTH(DST_T, NPPC))) // destination pixel width

_GENERIC_REMAP_TPLT_DEC class GenericREMAP {
   public:
    // Internal regsiters/buffers
    xf::cv::Window<K_ROWS, XF_NPIXPERCYCLE(NPPC) + (K_COLS - 1), XF_DTUNAME(SRC_T, NPPC)>
        src_blk; // Kernel sized image block with pixel parallelism
    xf::cv::LineBuffer<K_ROWS - 1,
                       (COLS >> _NPPC_SHIFT_VAL),
                       XF_TNAME(SRC_T, NPPC),
                       (USE_URAM ? RAM_S2P_URAM : RAM_S2P_BRAM),
                       (USE_URAM ? K_ROWS - 1 : 1)>
        buff; // Line Buffer for K_ROWS from the image

    // Internal Registers
    COL_IDX_T num_clks_per_row;   // No.of clocks required for processing one row
    SIZE_IDX_T rd_ptr_remap;      // Read pointer
    SIZE_IDX_T rd_flow_ptr_remap; // Read pointer
    SIZE_IDX_T wr_ptr_remap;      // Write pointer

    // Default Constructor
    GenericREMAP() {
        num_clks_per_row = 0;
        rd_ptr_remap = 0;
        rd_flow_ptr_remap = 0;
        wr_ptr_remap = 0;
    }

    // Internal functions
    void initialize(xf::cv::Mat<SRC_T, ROWS, COLS, NPPC, XFCVDEPTH_src>& _src);

    void process_row_remap(ROW_IDX_T rin,
                           ROW_IDX_T rout,
                           xf::cv::Mat<SRC_T, ROWS, COLS, NPPC, XFCVDEPTH_src>& _src,
                           xf::cv::Mat<FLOW_T, ROWS, COLS, NPPC, XFCVDEPTH_Ux>& _Ux,
                           xf::cv::Mat<FLOW_T, ROWS, COLS, NPPC, XFCVDEPTH_Uy>& _Uy,
                           xf::cv::Mat<DST_T, ROWS, COLS, NPPC, XFCVDEPTH_dst>& _dst);
    void process_image_remap(xf::cv::Mat<SRC_T, ROWS, COLS, NPPC, XFCVDEPTH_src>& _src,
                             xf::cv::Mat<FLOW_T, ROWS, COLS, NPPC, XFCVDEPTH_Ux>& _Ux,
                             xf::cv::Mat<FLOW_T, ROWS, COLS, NPPC, XFCVDEPTH_Uy>& _Uy,
                             xf::cv::Mat<DST_T, ROWS, COLS, NPPC, XFCVDEPTH_dst>& _dst);
};

// -----------------------------------------------------------------------------------
// Function to initialize internal registers and buffers
// -----------------------------------------------------------------------------------
_GENERIC_REMAP_TPLT void _GENERIC_REMAP::initialize(xf::cv::Mat<SRC_T, ROWS, COLS, NPPC, XFCVDEPTH_src>& _src) {
// clang-format off
#pragma HLS inline
    // clang-format on

    // Computing no.of clocks required for processing a row of given image dimensions
    num_clks_per_row = (_src.cols + _NPPC - 1) >> _NPPC_SHIFT_VAL;

    // Read/Write pointer set to start location of input image
    rd_ptr_remap = 0;
    rd_flow_ptr_remap = 0;
    wr_ptr_remap = 0;

    return;
} // End of initialize()

_RNDSATURN_TPLT_DEC ap_int<OUT_BW> rounding_n_saturation(ap_int<IN_BW> input) {
    ap_int<IN_BW> round_out;

    if (EN_RND) {
        ap_int<IN_BW> abs_in;
        if (input[IN_BW - 1] == 0)
            abs_in = input;
        else
            abs_in = -input;

        ap_int<IN_BW> add_tmp;
        ap_int<IN_BW> abs_out;

        if (IN_FBITS >= OUT_FBITS) {
            if (abs_in == (1 << (IN_FBITS - OUT_FBITS - 1)))
                add_tmp = 0;
            else
                add_tmp = abs_in + (1 << (IN_FBITS - OUT_FBITS - 1));

            abs_out = add_tmp >> (IN_FBITS - OUT_FBITS);
        } else {
            add_tmp = abs_in;
            abs_out = add_tmp << (OUT_FBITS - IN_FBITS);
        }
        if (input[IN_BW - 1] == 0)
            round_out = abs_out;
        else
            round_out = -abs_out;
    } else {
        if (IN_FBITS >= OUT_FBITS) {
            round_out = input >> (IN_FBITS - OUT_FBITS);
        } else {
            round_out = input << (OUT_FBITS - IN_FBITS);
        }
    }

    ap_int<IN_BW> saturate_signed;
    if (round_out > ((1 << (OUT_BW - 1)) - 1))
        saturate_signed = ((1 << (OUT_BW - 1)) - 1);
    else if (round_out < -(1 << (OUT_BW - 1)))
        saturate_signed = -(1 << (OUT_BW - 1));
    else
        saturate_signed = round_out;

    return (ap_int<OUT_BW>)saturate_signed;
}

// -----------------------------------------------------------------------------------
// Function to process a row
// -----------------------------------------------------------------------------------
_GENERIC_REMAP_TPLT void _GENERIC_REMAP::process_row_remap(ROW_IDX_T rin,
                                                           ROW_IDX_T rout,
                                                           xf::cv::Mat<SRC_T, ROWS, COLS, NPPC, XFCVDEPTH_src>& _src,
                                                           xf::cv::Mat<FLOW_T, ROWS, COLS, NPPC, XFCVDEPTH_Ux>& _Ux,
                                                           xf::cv::Mat<FLOW_T, ROWS, COLS, NPPC, XFCVDEPTH_Uy>& _Uy,
                                                           xf::cv::Mat<DST_T, ROWS, COLS, NPPC, XFCVDEPTH_dst>& _dst) {
// clang-format off
#pragma HLS inline
    // clang-format on

    // --------------------------------------
    // Constants
    // --------------------------------------
    const uint32_t _TC = (COLS >> _NPPC_SHIFT_VAL) + (K_COLS >> 1); // MAX Trip Count per row
    const int CHANNEL_NUM = XF_CHANNELS(FLOW_T, NPPC);
    const int FLOW_BW = XF_PIXELWIDTH(FLOW_T, NPPC) / CHANNEL_NUM;

    // --------------------------------------
    // Internal variables
    // --------------------------------------
    // Loop count variable
    COL_IDX_T col_loop_cnt = num_clks_per_row + _ECPR;
    COL_IDX_T cout = 0;

    // To store out pixels in packed format
    XF_TNAME(DST_T, NPPC) out_pixels;
    XF_TNAME(SRC_T, NPPC) in_pixel;
    XF_TNAME(FLOW_T, NPPC) in_Ux;
    XF_TNAME(FLOW_T, NPPC) in_Uy;

// --------------------------------------
// Initialize source block buffer to all zeros
// --------------------------------------
SRC_INIT_LOOP:
    for (K_ROW_IDX_T kr = 0; kr < K_ROWS; kr++) {
// clang-format off
#pragma HLS UNROLL
        // clang-format on

        for (K_COL_IDX_T kc = 0; kc < (_NPPC + K_COLS - 1); kc++) {
// clang-format off
#pragma HLS UNROLL
            // clang-format on
            src_blk.val[kr][kc] = 0;
        }
    }

// --------------------------------------
// Process columns of the row
// --------------------------------------
COL_LOOP:
    for (COL_IDX_T c = 0; c < col_loop_cnt; c++) {
// clang-format off
#pragma HLS PIPELINE II=1
#pragma HLS LOOP_TRIPCOUNT min=1 max=_TC
#pragma HLS DEPENDENCE variable=buff.val inter false
        // clang-format on

        // Fetch next pixel of current row
        // .........................................................
        in_pixel = ((rin < _src.rows) && (c < num_clks_per_row)) ? _src.read(rd_ptr_remap++) : (XF_TNAME(SRC_T, NPPC))0;
        in_Ux = (c >= _ECPR) ? _Ux.read(rd_flow_ptr_remap) : (XF_TNAME(FLOW_T, NPPC))0;
        in_Uy = (c >= _ECPR) ? _Uy.read(rd_flow_ptr_remap++) : (XF_TNAME(FLOW_T, NPPC))0;
    // rd_ptr_remap++;

    // Fetch data from RAMs and store in 'src_blk' for processing
    // .........................................................
    BUFF_RD_LOOP:
        for (K_ROW_IDX_T kr = 0; kr < K_ROWS; kr++) {
// clang-format off
#pragma HLS UNROLL
            // clang-format on

            XF_TNAME(SRC_T, NPPC) tmp_rd_buff;

            // Read packed data
            tmp_rd_buff =
                (kr == (K_ROWS - 1)) ? in_pixel : (c < num_clks_per_row) ? buff.val[kr][c] : (XF_TNAME(SRC_T, NPPC))0;

            // Extract pixels from packed data and store in 'src_blk'
            xfExtractPixels<NPPC, XF_WORDWIDTH(SRC_T, NPPC), XF_DEPTH(SRC_T, NPPC)>(
                (XF_PTNAME(XF_DEPTH(SRC_T, NPPC))*)src_blk.val[kr], tmp_rd_buff, (K_COLS - 1));
        }

    // Process the kernel block
    // ........................
    PROCESS_BLK_LOOP:
        for (int pix_idx = 0, bit = 0; pix_idx < _NPPC; pix_idx++, bit += FLOW_BW) {
// clang-format off
#pragma HLS UNROLL
            // clang-format on

            XF_DTUNAME(DST_T, NPPC) out_pix;

            XF_DTUNAME(SRC_T, NPPC) NxM_src_blk[K_ROWS][K_COLS];
// clang-format off
#pragma HLS ARRAY_PARTITION variable=NxM_src_blk complete dim=1
#pragma HLS ARRAY_PARTITION variable=NxM_src_blk complete dim=2
        // clang-format on

        // Extract _NPPC, NxM-blocks from 'src_blk'
        REARRANGE_LOOP:
            for (K_ROW_IDX_T krow = 0; krow < K_ROWS; krow++) {
// clang-format off
#pragma HLS UNROLL
                // clang-format on
                for (K_COL_IDX_T kcol = 0; kcol < K_COLS; kcol++) {
// clang-format off
#pragma HLS UNROLL
                    // clang-format on
                    NxM_src_blk[krow][kcol] = src_blk.val[krow][pix_idx + kcol];
                }
            }

            XF_PTNAME(XF_DEPTH(FLOW_T, NPPC)) ux_value = in_Ux.range(bit + FLOW_BW - 1, bit);
            XF_PTNAME(XF_DEPTH(FLOW_T, NPPC)) uy_value = in_Uy.range(bit + FLOW_BW - 1, bit);

            ROW_IDX_T Yout_idx = rout;
            COL_IDX_T Xout_idx = cout + pix_idx;

            // Apply the filter on the NxM_src_blk
            F oper;
            oper.apply_remap(NxM_src_blk, ux_value, uy_value, Xout_idx, Yout_idx, out_pix, wr_ptr_remap);

            // Start packing the out pixel value every clock of NPPC
            out_pixels.range(((pix_idx + 1) * _DST_PIX_WIDTH) - 1, (pix_idx * _DST_PIX_WIDTH)) = out_pix;
        }

        // Write the data out to DDR
        // .........................
        if (c >= _ECPR) {
            _dst.write(wr_ptr_remap++, out_pixels);
            cout += _NPPC;
        }

        // Move the data in Line Buffers
        // ...........................................
        if (c < num_clks_per_row) {
        BUFF_WR_LOOP:
            for (K_ROW_IDX_T kr = 0; kr < K_ROWS - 1; kr++) {
// clang-format off
#pragma HLS UNROLL
                // clang-format on
                buff.val[kr][c] = src_blk.val[kr + 1][K_COLS - 1];
            }
        }

    // Now get ready for next cycle of coputation. So copy the last K_COLS-1 data to start location of 'src_blk'
    // ...........................................
    SHIFT_LOOP:
        for (K_ROW_IDX_T kr = 0; kr < K_ROWS; kr++) {
// clang-format off
#pragma HLS UNROLL
            // clang-format on
            for (K_COL_IDX_T kc = 0; kc < K_COLS - 1; kc++) {
// clang-format off
#pragma HLS UNROLL
                // clang-format on
                src_blk.val[kr][kc] = src_blk.val[kr][_NPPC + kc];
            }
        }
    }

    return;
} // End of process_row_remap()

// -----------------------------------------------------------------------------------
// Main function that runs the filter over the image
// -----------------------------------------------------------------------------------
_GENERIC_REMAP_TPLT void _GENERIC_REMAP::process_image_remap(
    xf::cv::Mat<SRC_T, ROWS, COLS, NPPC, XFCVDEPTH_src>& _src,
    xf::cv::Mat<FLOW_T, ROWS, COLS, NPPC, XFCVDEPTH_Ux>& _Ux,
    xf::cv::Mat<FLOW_T, ROWS, COLS, NPPC, XFCVDEPTH_Uy>& _Uy,
    xf::cv::Mat<DST_T, ROWS, COLS, NPPC, XFCVDEPTH_dst>& _dst) {
// clang-format off
#pragma HLS inline off

#pragma HLS ARRAY_PARTITION variable=cubic_wts cyclic factor=16 dim=1 partition
    // clang-format on

    // Constant declaration
    const uint32_t _TC =
        ((COLS >> _NPPC_SHIFT_VAL) + (K_COLS >> 1)) / NPPC; // MAX Trip Count per row considering N-Pixel parallelsim

    // ----------------------------------
    // Start process with initialization
    // ----------------------------------
    initialize(_src);

// ----------------------------------
// Initialize Line Buffer
// ----------------------------------
// Part1: Initialize the buffer with 1st (kernel height)/2 rows of image
//        Start filling rows from (kernel height)/2 and rest depending on border type
READ_LINES_INIT:
    for (K_ROW_IDX_T r = (MFV + 1), rinn = 0; r < (K_ROWS - 1); r++, rinn++) { // Note: Ignoring last row
        for (COL_IDX_T c = 0; c < num_clks_per_row; c++) {
// clang-format off
#pragma HLS PIPELINE
#pragma HLS LOOP_TRIPCOUNT min=1 max=_TC
            // clang-format on
            buff.val[r][c] = _src.read(rd_ptr_remap++); // Reading the rows of image
        }
    }
// Part2: Take care of borders depending on border type.
//        In border replicate mode, fill with 1st row of the image.
BORDER_INIT:
    for (K_ROW_IDX_T r = 0; r < (MFV + 1); r++) {
        for (COL_IDX_T c = 0; c < num_clks_per_row; c++) {
// clang-format off
#pragma HLS PIPELINE
#pragma HLS LOOP_TRIPCOUNT min=1 max=_TC
            // clang-format on
            buff.val[r][c] = (BORDER_T == XF_BORDER_REPLICATE) ? buff.val[(MFV + 1)][c] : (XF_TNAME(SRC_T, NPPC))0;
        }
    }

// ----------------------------------
// Processing each row of the image
// ----------------------------------
ROW_LOOP:
    for (ROW_IDX_T rin = (MFV + BICUBIC_FILTER - 2), rout = 0; rout < _dst.rows; rin++, rout++) {
// clang-format off
#pragma HLS LOOP_TRIPCOUNT min=1 max=ROWS
        // clang-format on

        process_row_remap(rin, rout, _src, _Ux, _Uy, _dst);
    }

    return;
} // End of process_image_remap()

// ======================================================================================

// ======================================================================================
// Class for REMAP computation
// ======================================================================================

template <int SRC_T, int DST_T, int FLOW_T, int U_FBITS, int I_FBITS, int K_ROWS, int K_COLS, int NPPC, int MFV>
class REMAP {
   public:
    // -------------------------------------------------------------------------
    // Creating apply function (applying remap bicubic interpolation)
    // -------------------------------------------------------------------------
    void apply_remap(XF_DTUNAME(SRC_T, NPPC) patch[K_ROWS][K_COLS],
                     XF_PTNAME(XF_DEPTH(FLOW_T, NPPC)) Ux,
                     XF_PTNAME(XF_DEPTH(FLOW_T, NPPC)) Uy,
                     COL_IDX_T xIDX,
                     ROW_IDX_T yIDX,
                     XF_DTUNAME(DST_T, NPPC) & pix,
                     int wr_ptr_remap) {
// clang-format off
#pragma HLS inline off
        // clang-format on

        const int NUM_CH = XF_CHANNELS(SRC_T, NPPC);
        const int IN_BW = XF_PIXELWIDTH(SRC_T, NPPC);

        XF_PTNAME(XF_DEPTH(FLOW_T, NPPC)) Max_Ux = MFV << U_FBITS;
        XF_PTNAME(XF_DEPTH(FLOW_T, NPPC)) Max_Uy = MFV << U_FBITS;

        if (Ux > Max_Ux) {
            Ux = Max_Ux;
        } else if (Ux < -Max_Ux) {
            Ux = -Max_Ux;
        }

        if (Uy > Max_Uy) {
            Uy = Max_Uy;
        } else if (Uy < -Max_Uy) {
            Uy = -Max_Uy;
        }

        ap_int<32> cx = (ap_int<32>)Ux + (((ap_int<32>)xIDX) << U_FBITS);
        ap_int<32> cy = (ap_int<32>)Uy + (((ap_int<32>)yIDX) << U_FBITS);

        ap_int<32> cx_Qxp5 = rounding_n_saturation<32, 32, U_FBITS, 5>(cx);
        ap_int<32> cy_Qxp5 = rounding_n_saturation<32, 32, U_FBITS, 5>(cy);

        ap_uint<5> cx_fbits = cx_Qxp5.range(4, 0);
        ap_uint<5> cy_fbits = cy_Qxp5.range(4, 0);
        short wts_offset = (cy_fbits * 32) + cx_fbits;

        XF_PTNAME(XF_DEPTH(SRC_T, NPPC)) patch_extract_Q8p0[(MFV * 2) + 1][(MFV * 2) + 1][16];
        ap_int<16> patch_extract_Q9p7[(MFV * 2) + 1][(MFV * 2) + 1][16];
// clang-format off
#pragma HLS ARRAY_PARTITION variable=patch_extract_Q8p0 dim=0
#pragma HLS ARRAY_PARTITION variable=patch_extract_Q9p7 dim=0
        // clang-format on

        for (int sy_idx = 0; sy_idx < (MFV * 2) + 1; sy_idx++) {
// clang-format off
#pragma HLS UNROLL
            // clang-format on
            for (int sx_idx = 0; sx_idx < (MFV * 2) + 1; sx_idx++) {
// clang-format off
#pragma HLS UNROLL
                // clang-format on
                for (ap_uint<8> acc_cnt = 0; acc_cnt < 16; acc_cnt++) {
// clang-format off
#pragma HLS UNROLL
                    // clang-format on
                    ap_uint<8> x_cnt = acc_cnt.range(1, 0);
                    ap_uint<8> y_cnt = acc_cnt.range(3, 2);
                    XF_PTNAME(XF_DEPTH(SRC_T, NPPC))
                    pixel_read = patch[y_cnt + sy_idx][x_cnt + sx_idx].range(0 + IN_BW - 1, 0);
                    XF_PTNAME(XF_DEPTH(SRC_T, NPPC)) pixel_read_Qxp7 = pixel_read >> (I_FBITS - 7);
                    patch_extract_Q9p7[sy_idx][sx_idx][acc_cnt] = (ap_int<16>)(pixel_read_Qxp7);
                }
            }
        }

        ap_int<32> posx_window = (ap_int<32>)Max_Uy + (ap_int<32>)Ux;
        ap_int<32> posy_window = (ap_int<32>)Max_Uy + (ap_int<32>)Uy;

        unsigned int Yidx_Qxp5 = rounding_n_saturation<32, 32, U_FBITS, 5>(posy_window);
        unsigned int Xidx_Qxp5 = rounding_n_saturation<32, 32, U_FBITS, 5>(posx_window);
        unsigned int Yidx_t = Yidx_Qxp5 >> 5;
        unsigned int Xidx_t = Xidx_Qxp5 >> 5;

        ap_int<48> sum1 = 0;
        ap_int<48> sum2 = 0;
        for (ap_uint<8> acc_cnt = 0, w_bits = 0; acc_cnt < 16; acc_cnt++, w_bits += 16) {
// clang-format off
#pragma HLS UNROLL
            // clang-format on
            ap_uint<8> x_cnt = acc_cnt.range(1, 0);
            ap_uint<8> y_cnt = acc_cnt.range(3, 2);
            ap_int<16> weight_t = cubic_wts[(wts_offset * 16) + acc_cnt];
            ap_int<16> input_Q9p7 = patch_extract_Q9p7[Yidx_t][Xidx_t][acc_cnt];
            sum2 += input_Q9p7 * weight_t;
        }

        XF_PTNAME(XF_DEPTH(SRC_T, NPPC)) out_t;
        out_t = rounding_n_saturation<48, IN_BW, 14, 0>(sum2 << (I_FBITS - 7));
        pix.range(0 + IN_BW - 1, 0) = out_t;

        return;
    }
};

// ======================================================================================
// Top REMAP API
// --------------------------------------------------------------------------------------
// Template Args:-
//         IN_TYPE : Data type of source image element
//         OUT_TYPE : Data type of destination image element
//         FLOW_TYPE : Data type of flow element
//         ROWS : Image height
//         COLS : Image width
//         K_SIZE : Bicubic window size
//         NPPC : No.of pixels per clock
//     	   BORDER_T : Type of border to be used for edge pixel(s) computation
//                (XF_BORDER_REPLICATE, XF_BORDER_CONSTANT, XF_BORDER_REFLECT_101, XF_BORDER_REFLECT)
//         USE_URAM : URAM use enable
//         MAXFLOWVALUE : Max Flow Value
//         FLOW_FBITS : Fraction bits of flow elements
//         IMG_FBITS : Fraction bits of flow elements
//         U_FIFODEPTH : stream FIFO depth of flow elements
//         OUT_FIFODEPTH : stream FIFO depth of output elements
// ......................................................................................
#define _REMAP_ REMAP<IN_TYPE, OUT_TYPE, FLOW_TYPE, FLOW_FBITS, IMG_FBITS, K_SIZE, K_SIZE, NPPC, MAXFLOWVALUE>

// --------------------------------------------------------------------------------------
// Function to compute REMAP using Bicubic interpotaion
// --------------------------------------------------------------------------------------
template <int IN_TYPE,
          int OUT_TYPE,
          int FLOW_TYPE,
          int ROWS,
          int COLS,
          int K_SIZE,
          int NPPC = 1,
          int XFCVDEPTH_src = _XFCVDEPTH_DEFAULT,
          int XFCVDEPTH_Ux = _XFCVDEPTH_DEFAULT,
          int XFCVDEPTH_Uy = _XFCVDEPTH_DEFAULT,
          int XFCVDEPTH_dst = _XFCVDEPTH_DEFAULT,
          int BORDER_T = XF_BORDER_REFLECT_101,
          int USE_URAM = 0,
          int MAXFLOWVALUE,
          int FLOW_FBITS,
          int IMG_FBITS>
void Remap_Bicubic(xf::cv::Mat<IN_TYPE, ROWS, COLS, NPPC, XFCVDEPTH_src>& _src,
                   xf::cv::Mat<FLOW_TYPE, ROWS, COLS, NPPC, XFCVDEPTH_Ux>& _Ux,
                   xf::cv::Mat<FLOW_TYPE, ROWS, COLS, NPPC, XFCVDEPTH_Uy>& _Uy,
                   xf::cv::Mat<OUT_TYPE, ROWS, COLS, NPPC, XFCVDEPTH_dst>& _dst) {
// clang-format off
#pragma HLS inline off
    // clang-format on

    xf::cv::GenericREMAP<_REMAP_, IN_TYPE, OUT_TYPE, FLOW_TYPE, MAXFLOWVALUE, FLOW_FBITS, IMG_FBITS, ROWS, COLS, K_SIZE,
                         K_SIZE, NPPC, XFCVDEPTH_src, XFCVDEPTH_Ux, XFCVDEPTH_Uy, XFCVDEPTH_dst, BORDER_T, USE_URAM, 1>
        remap;

    remap.process_image_remap(_src, _Ux, _Uy, _dst);

    return;
}

#undef _REMAP_

template <int IMG_FBITS = 0,
          int FLOW_FBITS = 8,
          int IMG_T = XF_8UC1,
          int FLOW_T = XF_16SC1,
          int ROWS = 126,
          int COLS = 224,
          int NPC = 1,
          int XFCVDEPTH_I0 = _XFCVDEPTH_DEFAULT,
          int XFCVDEPTH_I1w = _XFCVDEPTH_DEFAULT,
          int XFCVDEPTH_I1wx = _XFCVDEPTH_DEFAULT,
          int XFCVDEPTH_I1wy = _XFCVDEPTH_DEFAULT,
          int XFCVDEPTH_U1 = _XFCVDEPTH_DEFAULT,
          int XFCVDEPTH_U2 = _XFCVDEPTH_DEFAULT,
          int XFCVDEPTH_grad = _XFCVDEPTH_DEFAULT,
          int XFCVDEPTH_rhoc = _XFCVDEPTH_DEFAULT,
          int ERR_BW = 32>
int calcgrad(xf::cv::Mat<IMG_T, ROWS, COLS, NPC, XFCVDEPTH_I0>& I0,
             xf::cv::Mat<FLOW_T, ROWS, COLS, NPC, XFCVDEPTH_I1w>& I1w,
             xf::cv::Mat<FLOW_T, ROWS, COLS, NPC, XFCVDEPTH_I1wx>& I1wx,
             xf::cv::Mat<FLOW_T, ROWS, COLS, NPC, XFCVDEPTH_I1wy>& I1wy,
             xf::cv::Mat<FLOW_T, ROWS, COLS, NPC, XFCVDEPTH_U1>& U1,
             xf::cv::Mat<FLOW_T, ROWS, COLS, NPC, XFCVDEPTH_U2>& U2,
             xf::cv::Mat<FLOW_T, ROWS, COLS, NPC, XFCVDEPTH_grad>& grad,
             xf::cv::Mat<FLOW_T, ROWS, COLS, NPC, XFCVDEPTH_rhoc>& rhoc,
             unsigned short height,
             unsigned short width_ncpr) {
// clang-format off
#pragma HLS inline off
    // clang-format on
    enum {
        PLANES = XF_CHANNELS(IMG_T, NPC),
        DEPTH_SRC1 = XF_DEPTH(IMG_T, NPC),
        DEPTH_SRC2 = XF_DEPTH(FLOW_T, NPC),
        DEPTH_DST = XF_DEPTH(FLOW_T, NPC),
        WORDWIDTH_SRC1 = XF_WORDWIDTH(IMG_T, NPC),
        WORDWIDTH_SRC2 = XF_WORDWIDTH(FLOW_T, NPC),
        WORDWIDTH_DST = XF_WORDWIDTH(FLOW_T, NPC),
        TC = COLS >> XF_BITSHIFT(NPC),
        IMG_BW = XF_PIXELWIDTH(IMG_T, NPC) / PLANES,
        FLOW_BW = XF_PIXELWIDTH(FLOW_T, NPC) / PLANES,
        INT_BW = 2 * FLOW_BW
    };

    XF_SNAME(WORDWIDTH_DST) pxl_pack_out_grad, pxl_pack_out_rhoc;
    XF_SNAME(WORDWIDTH_SRC1) pxl_pack_in_I0;
    XF_SNAME(WORDWIDTH_SRC2) pxl_pack_in_I1wx, pxl_pack_in_I1wy, pxl_pack_in_I1w;
    XF_SNAME(WORDWIDTH_SRC2) pxl_pack_in_U1, pxl_pack_in_U2;

    int read_ptr = 0;
    int write_ptr = 0;
RowLoop:
    for (short i = 0; i < height; i++) {
// clang-format off
#pragma HLS LOOP_TRIPCOUNT min=ROWS max=ROWS
    // clang-format on
    ColLoop:
        for (short j = 0; j < width_ncpr; j++) {
// clang-format off
#pragma HLS LOOP_TRIPCOUNT min=TC max=TC
#pragma HLS pipeline II=1
            // clang-format on

            // Read input stream
            pxl_pack_in_I0 = (XF_SNAME(WORDWIDTH_SRC1))(I0.read(read_ptr));
            pxl_pack_in_I1w = (XF_SNAME(WORDWIDTH_SRC2))(I1w.read(read_ptr));
            pxl_pack_in_I1wx = (XF_SNAME(WORDWIDTH_SRC2))(I1wx.read(read_ptr));
            pxl_pack_in_I1wy = (XF_SNAME(WORDWIDTH_SRC2))(I1wy.read(read_ptr));
            pxl_pack_in_U1 = (XF_SNAME(WORDWIDTH_SRC2))(U1.read(read_ptr));
            pxl_pack_in_U2 = (XF_SNAME(WORDWIDTH_SRC2))(U2.read(read_ptr));
            read_ptr++;

        ProcLoop:
            for (int bit_in1 = 0, bit_in2 = 0, bit_out = 0; bit_in1 < ((IMG_BW << XF_BITSHIFT(NPC)) * PLANES);
                 bit_in1 += IMG_BW, bit_in2 += FLOW_BW, bit_out += FLOW_BW) {
// clang-format off
#pragma HLS unroll
                // clang-format on
                // Extract pixels
                XF_PTNAME(DEPTH_SRC1) I0_pxl = pxl_pack_in_I0.range(bit_in1 + IMG_BW - 1, bit_in1);
                XF_PTNAME(DEPTH_SRC2) I1w_pxl = pxl_pack_in_I1w.range(bit_in2 + FLOW_BW - 1, bit_in2);
                XF_PTNAME(DEPTH_SRC2) I1wx_pxl = pxl_pack_in_I1wx.range(bit_in2 + FLOW_BW - 1, bit_in2);
                XF_PTNAME(DEPTH_SRC2) I1wy_pxl = pxl_pack_in_I1wy.range(bit_in2 + FLOW_BW - 1, bit_in2);
                XF_PTNAME(DEPTH_SRC2) U1_pxl = pxl_pack_in_U1.range(bit_in2 + FLOW_BW - 1, bit_in2);
                XF_PTNAME(DEPTH_SRC2) U2_pxl = pxl_pack_in_U2.range(bit_in2 + FLOW_BW - 1, bit_in2);

                //*********  Computation:
                //*********  grad(i,j) = (I_1wx (i,j))^2 + (I_1wy (i,j))^2
                ap_int<INT_BW> I1wx_pow_2 = I1wx_pxl * I1wx_pxl;
                ap_int<INT_BW> I1wy_pow_2 = I1wy_pxl * I1wy_pxl;
                ap_int<INT_BW> grad_t1 = I1wx_pow_2 + I1wy_pow_2;

                ap_int<FLOW_BW> grad_t2 = rounding_n_saturation<INT_BW, FLOW_BW, FLOW_FBITS * 2, FLOW_FBITS>(grad_t1);
                pxl_pack_out_grad.range(bit_out + FLOW_BW - 1, bit_out) = grad_t2;

                //*********  Computation:
                //*********  rho_c (i,j) = I_1w (i,j) - I_1wx (i,j) * u1(i,j) - I_1wy (i,j) * u2(i,j) - I_0 (i,j)
                ap_int<INT_BW> mul1 = I1wx_pxl * U1_pxl;
                ap_int<INT_BW> mul2 = I1wy_pxl * U2_pxl;
                ap_int<INT_BW> I1w_t = ((ap_int<INT_BW>)I1w_pxl) << (FLOW_FBITS);
                ap_int<INT_BW> I0_t = ((ap_int<INT_BW>)I0_pxl) << (2 * FLOW_FBITS - IMG_FBITS);
                ap_int<INT_BW> rhoc_t1 = I1w_t - mul1 - mul2 - I0_t;

                ap_int<FLOW_BW> rhoc_t2 = rounding_n_saturation<INT_BW, FLOW_BW, FLOW_FBITS * 2, FLOW_FBITS>(rhoc_t1);
                pxl_pack_out_rhoc.range(bit_out + FLOW_BW - 1, bit_out) = rhoc_t2; // out Q8.8
            }

            // writing into output stream
            grad.write(write_ptr, (XF_SNAME(WORDWIDTH_DST))pxl_pack_out_grad);
            rhoc.write(write_ptr, (XF_SNAME(WORDWIDTH_DST))pxl_pack_out_rhoc);
            write_ptr++;
        }
    }
    return 0;
}

template <int IN1_BW, int IN2_BW, int OUT_BW, int IN1_FBITS, int IN2_FBITS, int OUT_FBITS, int DNR_FBITS>
ap_int<OUT_BW> fxdpt_div(ap_int<IN1_BW> in1, ap_int<IN2_BW> in2) {
// clang-format off
#pragma HLS inline
    // clang-format on

    ap_int<17> devisor_Q6p11 = rounding_n_saturation<IN2_BW, 17, IN2_FBITS, DNR_FBITS>(in2);
    ;
    ap_uint<16> devisor_abs_Q5p11;
    if (devisor_Q6p11[16] == 0)
        devisor_abs_Q5p11 = (devisor_Q6p11);
    else
        devisor_abs_Q5p11 = (-devisor_Q6p11);
    char div_fbits;
    ap_uint<32> inv_abs = (ap_uint<32>)Inverse((unsigned short)devisor_abs_Q5p11, 16 - DNR_FBITS, &div_fbits);
    ap_uint<5> opt_div_fbits = div_fbits;
    ap_int<33> inv_val;
    if (devisor_Q6p11[16] == 0)
        inv_val = inv_abs;
    else
        inv_val = -inv_abs;

    ap_int<IN1_BW + 33> mul_out = inv_val * in1;
    ap_int<IN1_BW + 33> mac_out = mul_out + (1 << (opt_div_fbits + IN1_FBITS - OUT_FBITS - 1));
    ap_int<IN1_BW + 33> out_tmp = mac_out >> (opt_div_fbits + IN1_FBITS - OUT_FBITS);
    ap_int<OUT_BW> div_out = out_tmp;

    ap_int<IN1_BW + 33> mul_out_tmp = inv_val * in1;

    return div_out;
}

template <int IMG_FBITS = 0,
          int FLOW_FBITS = 8,
          int IMG_T = XF_8UC1,
          int FLOW_T = XF_16SC1,
          int ROWS = 126,
          int COLS = 224,
          int NPC = 1,
          int XFCVDEPTH_Iwx = _XFCVDEPTH_DEFAULT,
          int XFCVDEPTH_Iwy = _XFCVDEPTH_DEFAULT,
          int XFCVDEPTH_U1 = _XFCVDEPTH_DEFAULT,
          int XFCVDEPTH_U2 = _XFCVDEPTH_DEFAULT,
          int XFCVDEPTH_U1_pass = _XFCVDEPTH_DEFAULT,
          int XFCVDEPTH_U2_pass = _XFCVDEPTH_DEFAULT,
          int XFCVDEPTH_grad = _XFCVDEPTH_DEFAULT,
          int XFCVDEPTH_rhoc = _XFCVDEPTH_DEFAULT,
          int XFCVDEPTH_V1 = _XFCVDEPTH_DEFAULT,
          int XFCVDEPTH_V2 = _XFCVDEPTH_DEFAULT,
          int ERR_BW = 32,
          int FLOW_BW>
int estimateV(xf::cv::Mat<FLOW_T, ROWS, COLS, NPC, XFCVDEPTH_Iwx>& Iwx,
              xf::cv::Mat<FLOW_T, ROWS, COLS, NPC, XFCVDEPTH_Iwy>& Iwy,
              xf::cv::Mat<FLOW_T, ROWS, COLS, NPC, XFCVDEPTH_U1>& U1,
              xf::cv::Mat<FLOW_T, ROWS, COLS, NPC, XFCVDEPTH_U2>& U2,
              xf::cv::Mat<FLOW_T, ROWS, COLS, NPC, XFCVDEPTH_U1_pass>& U1_pass,
              xf::cv::Mat<FLOW_T, ROWS, COLS, NPC, XFCVDEPTH_U2_pass>& U2_pass,
              xf::cv::Mat<FLOW_T, ROWS, COLS, NPC, XFCVDEPTH_grad>& grad,
              xf::cv::Mat<FLOW_T, ROWS, COLS, NPC, XFCVDEPTH_rhoc>& rhoc,
              xf::cv::Mat<FLOW_T, ROWS, COLS, NPC, XFCVDEPTH_V1>& V1,
              xf::cv::Mat<FLOW_T, ROWS, COLS, NPC, XFCVDEPTH_V2>& V2,
              ap_int<FLOW_BW> _lt,
              unsigned short height,
              unsigned short width) {
// clang-format off
#pragma HLS inline off
    // clang-format on
    enum {
        PLANES = XF_CHANNELS(IMG_T, NPC),
        DEPTH_SRC1 = XF_DEPTH(IMG_T, NPC),
        DEPTH_SRC2 = XF_DEPTH(FLOW_T, NPC),
        DEPTH_DST = XF_DEPTH(FLOW_T, NPC),
        WORDWIDTH_SRC1 = XF_WORDWIDTH(IMG_T, NPC),
        WORDWIDTH_SRC2 = XF_WORDWIDTH(FLOW_T, NPC),
        WORDWIDTH_DST = XF_WORDWIDTH(FLOW_T, NPC),
        TC = COLS >> XF_BITSHIFT(NPC),
        IMG_BW = XF_PIXELWIDTH(IMG_T, NPC) / PLANES,
        INT_BW = 2 * FLOW_BW,
        INT_BW_temp_rho_by_grad = 2 * FLOW_FBITS + 2 * FLOW_BW - FLOW_FBITS + 2 * FLOW_FBITS - FLOW_FBITS,
        LTC = ROWS * TC
    };

    XF_SNAME(WORDWIDTH_SRC2)
    pxl_pack_in_Iwx, pxl_pack_in_Iwy, pxl_pack_in_U1, pxl_pack_in_U2, pxl_pack_in_grad, pxl_pack_in_rhoc;
    XF_SNAME(WORDWIDTH_DST) pxl_pack_out_V1, pxl_pack_out_V2;

    int read_ptr = 0;
    int write_ptr = 0;

    int i, j, k;

    int loopbound = height * width;
    int count = 0;
RowColLoop:
    for (i = 0; i < loopbound; i++) {
// clang-format off
#pragma HLS LOOP_TRIPCOUNT min=LTC max=LTC
#pragma HLS pipeline II=1
        // clang-format on

        // Read input stream
        pxl_pack_in_Iwx = (XF_SNAME(WORDWIDTH_SRC2))(Iwx.read(read_ptr));
        pxl_pack_in_Iwy = (XF_SNAME(WORDWIDTH_SRC2))(Iwy.read(read_ptr));
        pxl_pack_in_U1 = (XF_SNAME(WORDWIDTH_SRC2))(U1.read(read_ptr));
        pxl_pack_in_U2 = (XF_SNAME(WORDWIDTH_SRC2))(U2.read(read_ptr));
        pxl_pack_in_grad = (XF_SNAME(WORDWIDTH_SRC2))(grad.read(read_ptr));
        pxl_pack_in_rhoc = (XF_SNAME(WORDWIDTH_SRC2))(rhoc.read(read_ptr));
        read_ptr++;

    ProcLoop:
        for (int bit_in1 = 0, bit_out = 0; bit_in1 < ((FLOW_BW << XF_BITSHIFT(NPC)) * PLANES);
             bit_in1 += FLOW_BW, bit_out += FLOW_BW) {
// clang-format off
#pragma HLS UNROLL
            // clang-format on

            // Extract pixels
            XF_PTNAME(DEPTH_SRC2) Iwx_pxl = pxl_pack_in_Iwx.range(bit_in1 + FLOW_BW - 1, bit_in1);
            XF_PTNAME(DEPTH_SRC2) Iwy_pxl = pxl_pack_in_Iwy.range(bit_in1 + FLOW_BW - 1, bit_in1);
            XF_PTNAME(DEPTH_SRC2) U1_pxl = pxl_pack_in_U1.range(bit_in1 + FLOW_BW - 1, bit_in1);
            XF_PTNAME(DEPTH_SRC2) U2_pxl = pxl_pack_in_U2.range(bit_in1 + FLOW_BW - 1, bit_in1);
            XF_PTNAME(DEPTH_SRC2) grad_pxl = pxl_pack_in_grad.range(bit_in1 + FLOW_BW - 1, bit_in1);
            XF_PTNAME(DEPTH_SRC2) rhoc_pxl = pxl_pack_in_rhoc.range(bit_in1 + FLOW_BW - 1, bit_in1);

            //*********  Computation:
            //*********  rho = rhoc(i,j) + ( Iwx(i,j)*u1(i,j) + Iwy(i,j)*u2(i,j) )
            ap_int<INT_BW> Iwx_U1_mul;
            ap_int<INT_BW> Iwy_U2_mul;
// clang-format off
#pragma HLS BIND_OP variable=Iwx_U1_mul op=mul latency=3
#pragma HLS BIND_OP variable=Iwy_U2_mul op=mul latency=3
            // clang-format on
            Iwx_U1_mul = Iwx_pxl * U1_pxl;
            Iwy_U2_mul = Iwy_pxl * U2_pxl;
            ap_int<INT_BW> rho_INT_BW = (((ap_int<INT_BW>)rhoc_pxl) << (FLOW_FBITS)) + (Iwx_U1_mul + Iwy_U2_mul);
            ap_int<FLOW_BW> rho = rounding_n_saturation<INT_BW, FLOW_BW, FLOW_FBITS * 2, FLOW_FBITS, 0>(rho_INT_BW);
            ap_int<INT_BW> ltInt_grad_INT_BW;
// clang-format off
#pragma HLS BIND_OP variable=ltInt_grad_INT_BW op=mul latency=3
            // clang-format on
            ltInt_grad_INT_BW = _lt * grad_pxl;
            ap_int<FLOW_BW> ltInt_grad =
                rounding_n_saturation<INT_BW, FLOW_BW, FLOW_FBITS * 2, FLOW_FBITS, 0>(ltInt_grad_INT_BW);

            ap_int<FLOW_BW> mul_tmp_FLOW_TYPE =
                fxdpt_div<FLOW_BW, FLOW_BW, FLOW_BW, FLOW_FBITS, FLOW_FBITS, FLOW_FBITS, 2>(rho, grad_pxl);

            ap_int<FLOW_BW> temp_rho_by_grad;
            if (grad_pxl)
                temp_rho_by_grad = (ap_int<FLOW_BW>)(mul_tmp_FLOW_TYPE);
            else
                temp_rho_by_grad = 0x7FFF;

            ap_int<FLOW_BW> tmp_multiplier;

            if (rho < -ltInt_grad) {
                tmp_multiplier = _lt;
            } else if (rho > ltInt_grad) {
                tmp_multiplier = -_lt;
            } else if (grad_pxl > 0) {
                tmp_multiplier = -temp_rho_by_grad;
            } else {
                tmp_multiplier = 0;
            }
            ap_int<INT_BW> d1, d2;
// clang-format off
#pragma HLS BIND_OP variable=d1 op=mul latency=3
#pragma HLS BIND_OP variable=d2 op=mul latency=3
            // clang-format on
            d1 = tmp_multiplier * Iwx_pxl;
            d2 = tmp_multiplier * Iwy_pxl;

            ap_int<INT_BW> U1_d1_t1 = (((ap_int<INT_BW>)U1_pxl) << (FLOW_FBITS)) + d1;
            ap_int<INT_BW> U2_d2_t1 = (((ap_int<INT_BW>)U2_pxl) << (FLOW_FBITS)) + d2;

            ap_int<FLOW_BW> U1_d1_t2 = rounding_n_saturation<INT_BW, FLOW_BW, FLOW_FBITS * 2, FLOW_FBITS, 0>(U1_d1_t1);
            ap_int<FLOW_BW> U2_d2_t2 = rounding_n_saturation<INT_BW, FLOW_BW, FLOW_FBITS * 2, FLOW_FBITS, 0>(U2_d2_t1);

            pxl_pack_out_V1.range(bit_out + FLOW_BW - 1, bit_out) = U1_d1_t2;
            pxl_pack_out_V2.range(bit_out + FLOW_BW - 1, bit_out) = U2_d2_t2;

            count++;
        }
        // writing to output stream
        V1.write(write_ptr, (XF_SNAME(WORDWIDTH_DST))pxl_pack_out_V1);
        V2.write(write_ptr, (XF_SNAME(WORDWIDTH_DST))pxl_pack_out_V2);
        U1_pass.write(write_ptr, (XF_SNAME(WORDWIDTH_DST))pxl_pack_in_U1);
        U2_pass.write(write_ptr, (XF_SNAME(WORDWIDTH_DST))pxl_pack_in_U2);
        write_ptr++;
    }

    return 0;
} // estimateV

template <int IMG_FBITS = 0,
          int FLOW_FBITS = 8,
          int IMG_T = XF_8UC1,
          int FLOW_T = XF_16SC1,
          int ROWS = 126,
          int COLS = 224,
          int NPC = 1,
          int XFCVDEPTH_P1 = _XFCVDEPTH_DEFAULT,
          int XFCVDEPTH_P2 = _XFCVDEPTH_DEFAULT,
          int XFCVDEPTH_divP = _XFCVDEPTH_DEFAULT,
          int XFCVDEPTH_P1_pass = _XFCVDEPTH_DEFAULT,
          int XFCVDEPTH_P2_pass = _XFCVDEPTH_DEFAULT,
          int ERR_BW = 32>
int divergence(xf::cv::Mat<FLOW_T, ROWS, COLS, NPC, XFCVDEPTH_P1>& P1,
               xf::cv::Mat<FLOW_T, ROWS, COLS, NPC, XFCVDEPTH_P2>& P2,
               xf::cv::Mat<FLOW_T, ROWS, COLS, NPC, XFCVDEPTH_divP>& divP,
               xf::cv::Mat<FLOW_T, ROWS, COLS, NPC, XFCVDEPTH_P1_pass>& P1_pass,
               xf::cv::Mat<FLOW_T, ROWS, COLS, NPC, XFCVDEPTH_P2_pass>& P2_pass,
               unsigned short height,
               unsigned short width,
               bool intilize_P_with_zeros) {
// clang-format off
#pragma HLS inline off
    // clang-format on
    enum {
        PLANES = XF_CHANNELS(IMG_T, NPC),
        DEPTH_SRC1 = XF_DEPTH(IMG_T, NPC),
        DEPTH_SRC2 = XF_DEPTH(FLOW_T, NPC),
        DEPTH_DST = XF_DEPTH(FLOW_T, NPC),
        WORDWIDTH_SRC1 = XF_WORDWIDTH(IMG_T, NPC),
        WORDWIDTH_SRC2 = XF_WORDWIDTH(FLOW_T, NPC),
        WORDWIDTH_DST = XF_WORDWIDTH(FLOW_T, NPC),
        TC = COLS >> XF_BITSHIFT(NPC),
        IMG_BW = XF_PIXELWIDTH(IMG_T, NPC) / PLANES,
        FLOW_BW = XF_PIXELWIDTH(FLOW_T, NPC) / PLANES,
        INT_BW = 2 * FLOW_BW,
        NPPC = NPC
    };

    XF_SNAME(WORDWIDTH_SRC2) pxl_pack_in_P1, pxl_pack_in_P2;
    XF_SNAME(WORDWIDTH_DST) pxl_pack_out_divP;

    int read_ptr = 0;
    int write_ptr = 0;

    int i, j, k;
    ap_int<2 * INT_BW> tmp_error = 0;
    // Line Buffer for 1 row from the image
    xf::cv::LineBuffer<1, (COLS >> _NPPC_SHIFT_VAL), XF_SNAME(WORDWIDTH_SRC2), RAM_S2P_BRAM, 1> line_buff;

    XF_PTNAME(DEPTH_SRC2) prev_P1_pxl = 0;
    XF_SNAME(WORDWIDTH_SRC2) prev_pxl_pack_in_P2 = 0;
    int row_count = 0;
    int col_count = 0;

RowColLoop:
    for (int idx = 0; idx < height * width; idx++) {
// clang-format off
#pragma HLS LOOP_TRIPCOUNT min=ROWS*TC max=ROWS*TC
#pragma HLS pipeline II=1
        // clang-format on

        // Read input stream
        pxl_pack_in_P1 = (XF_SNAME(WORDWIDTH_SRC2))(P1.read(read_ptr)); // Q8.8
        pxl_pack_in_P2 = (XF_SNAME(WORDWIDTH_SRC2))(P2.read(read_ptr)); // Q8.8
        read_ptr++;
        prev_pxl_pack_in_P2 = (row_count == 0) ? (XF_SNAME(WORDWIDTH_SRC2))0 : line_buff(0, col_count);

    ProcLoop:
        for (int bit_in1 = 0, bit_out = 0; bit_in1 < ((FLOW_BW << XF_BITSHIFT(NPC)) * PLANES);
             bit_in1 += FLOW_BW, bit_out += FLOW_BW) {
// clang-format off
#pragma HLS UNROLL
            // clang-format on

            // Extract pixels
            XF_PTNAME(DEPTH_SRC2) P1_pxl_i_j = pxl_pack_in_P1.range(bit_in1 + FLOW_BW - 1, bit_in1);
            XF_PTNAME(DEPTH_SRC2) P2_pxl_i_j = pxl_pack_in_P2.range(bit_in1 + FLOW_BW - 1, bit_in1);

            XF_PTNAME(DEPTH_SRC2)
            P1_pxl_im1_j = (bit_in1 == 0) ? prev_P1_pxl : pxl_pack_in_P1.range(bit_in1 - 1, bit_in1 - FLOW_BW);
            XF_PTNAME(DEPTH_SRC2) P2_pxl_i_jm1 = prev_pxl_pack_in_P2.range(bit_in1 + FLOW_BW - 1, bit_in1);

            ap_int<INT_BW> v1x_pxl = P1_pxl_i_j - P1_pxl_im1_j;
            ap_int<INT_BW> v1y_pxl = P2_pxl_i_j - P2_pxl_i_jm1;
            ap_int<INT_BW> divP_pxl_t1 = v1x_pxl + v1y_pxl;

            ap_int<FLOW_BW> divP_pxl_t2 = rounding_n_saturation<INT_BW, FLOW_BW, FLOW_FBITS, FLOW_FBITS>(divP_pxl_t1);
            pxl_pack_out_divP.range(bit_out + FLOW_BW - 1, bit_out) = divP_pxl_t2;
        }
        if (col_count != (width - 1))
            prev_P1_pxl = pxl_pack_in_P1.range(FLOW_BW * NPC - 1, FLOW_BW * (NPC - 1));
        else
            prev_P1_pxl = 0;

        line_buff(0, col_count) = pxl_pack_in_P2;

        XF_SNAME(WORDWIDTH_SRC2) pxl_pack_out_divP_wr;
        if (intilize_P_with_zeros == 0)
            pxl_pack_out_divP_wr = pxl_pack_out_divP;
        else
            pxl_pack_out_divP_wr = 0;

        // writing to output stream
        divP.write(write_ptr, (XF_SNAME(WORDWIDTH_SRC2))pxl_pack_out_divP_wr);
        P1_pass.write(write_ptr, (XF_SNAME(WORDWIDTH_SRC2))pxl_pack_in_P1);
        P2_pass.write(write_ptr, (XF_SNAME(WORDWIDTH_SRC2))pxl_pack_in_P2);
        write_ptr++;

        if (col_count == width - 1) {
            col_count = 0;
            row_count++;
        } else {
            col_count++;
        }
    }

    return 0;
} // divergence

template <int IMG_FBITS = 0,
          int FLOW_FBITS = 8,
          int IMG_T = XF_8UC1,
          int FLOW_T = XF_16SC1,
          int ROWS = 126,
          int COLS = 224,
          int NPC = 1,
          int XFCVDEPTH_V1 = _XFCVDEPTH_DEFAULT,
          int XFCVDEPTH_V2 = _XFCVDEPTH_DEFAULT,
          int XFCVDEPTH_divP1 = _XFCVDEPTH_DEFAULT,
          int XFCVDEPTH_divP2 = _XFCVDEPTH_DEFAULT,
          int XFCVDEPTH_U1_in = _XFCVDEPTH_DEFAULT,
          int XFCVDEPTH_U2_in = _XFCVDEPTH_DEFAULT,
          int XFCVDEPTH_U1_out = _XFCVDEPTH_DEFAULT,
          int XFCVDEPTH_U2_out = _XFCVDEPTH_DEFAULT,
          int XFCVDEPTH_U1_out_ddr = _XFCVDEPTH_DEFAULT,
          int XFCVDEPTH_U2_out_ddr = _XFCVDEPTH_DEFAULT,
          int XFCVDEPTH_P11_in = _XFCVDEPTH_DEFAULT,
          int XFCVDEPTH_P12_in = _XFCVDEPTH_DEFAULT,
          int XFCVDEPTH_P21_in = _XFCVDEPTH_DEFAULT,
          int XFCVDEPTH_P22_in = _XFCVDEPTH_DEFAULT,
          int XFCVDEPTH_P11_pass = _XFCVDEPTH_DEFAULT,
          int XFCVDEPTH_P12_pass = _XFCVDEPTH_DEFAULT,
          int XFCVDEPTH_P21_pass = _XFCVDEPTH_DEFAULT,
          int XFCVDEPTH_P22_pass = _XFCVDEPTH_DEFAULT,
          int ERR_BW = 32,
          int FLOW_BW>
int updateU(xf::cv::Mat<FLOW_T, ROWS, COLS, NPC, XFCVDEPTH_V1>& V1,
            xf::cv::Mat<FLOW_T, ROWS, COLS, NPC, XFCVDEPTH_V2>& V2,
            xf::cv::Mat<FLOW_T, ROWS, COLS, NPC, XFCVDEPTH_divP1>& divP1,
            xf::cv::Mat<FLOW_T, ROWS, COLS, NPC, XFCVDEPTH_divP2>& divP2,
            xf::cv::Mat<FLOW_T, ROWS, COLS, NPC, XFCVDEPTH_U1_in>& U1_in,
            xf::cv::Mat<FLOW_T, ROWS, COLS, NPC, XFCVDEPTH_U2_in>& U2_in,
            xf::cv::Mat<FLOW_T, ROWS, COLS, NPC, XFCVDEPTH_U1_out>& U1_out,
            xf::cv::Mat<FLOW_T, ROWS, COLS, NPC, XFCVDEPTH_U2_out>& U2_out,
            xf::cv::Mat<FLOW_T, ROWS, COLS, NPC, XFCVDEPTH_U1_out_ddr>& U1_out_ddr,
            xf::cv::Mat<FLOW_T, ROWS, COLS, NPC, XFCVDEPTH_U2_out_ddr>& U2_out_ddr,
            xf::cv::Mat<FLOW_T, ROWS, COLS, NPC, XFCVDEPTH_P11_in>& P11_in,
            xf::cv::Mat<FLOW_T, ROWS, COLS, NPC, XFCVDEPTH_P12_in>& P12_in,
            xf::cv::Mat<FLOW_T, ROWS, COLS, NPC, XFCVDEPTH_P21_in>& P21_in,
            xf::cv::Mat<FLOW_T, ROWS, COLS, NPC, XFCVDEPTH_P22_in>& P22_in,
            xf::cv::Mat<FLOW_T, ROWS, COLS, NPC, XFCVDEPTH_P11_pass>& P11_pass,
            xf::cv::Mat<FLOW_T, ROWS, COLS, NPC, XFCVDEPTH_P12_pass>& P12_pass,
            xf::cv::Mat<FLOW_T, ROWS, COLS, NPC, XFCVDEPTH_P21_pass>& P21_pass,
            xf::cv::Mat<FLOW_T, ROWS, COLS, NPC, XFCVDEPTH_P22_pass>& P22_pass,
            ap_int<ERR_BW>* error,
            ap_int<FLOW_BW> _theta,
            unsigned short height,
            unsigned short width) {
// clang-format off
#pragma HLS inline off
    // clang-format on

    enum {
        PLANES = XF_CHANNELS(IMG_T, NPC),
        DEPTH_SRC1 = XF_DEPTH(IMG_T, NPC),
        DEPTH_SRC2 = XF_DEPTH(FLOW_T, NPC),
        DEPTH_DST = XF_DEPTH(FLOW_T, NPC),
        WORDWIDTH_SRC1 = XF_WORDWIDTH(IMG_T, NPC),
        WORDWIDTH_SRC2 = XF_WORDWIDTH(FLOW_T, NPC),
        WORDWIDTH_DST = XF_WORDWIDTH(FLOW_T, NPC),
        TC = COLS >> XF_BITSHIFT(NPC),
        IMG_BW = XF_PIXELWIDTH(IMG_T, NPC) / PLANES,
        INT_BW = 2 * FLOW_BW,
    };

    XF_SNAME(WORDWIDTH_SRC2)
    pxl_pack_in_V1, pxl_pack_in_V2, pxl_pack_in_divP1, pxl_pack_in_divP2, pxl_pack_in_U1_in, pxl_pack_in_U2_in;
    XF_SNAME(WORDWIDTH_SRC2) pxl_pack_out_U1, pxl_pack_out_U2;
    XF_SNAME(WORDWIDTH_SRC2) pxl_pack_in_p11, pxl_pack_in_p12, pxl_pack_in_p21, pxl_pack_in_p22;

    int read_ptr = 0;
    int write_ptr = 0;

    int i, j, k;
    ap_int<ERR_BW> tmp_errorInt_t1 = 0;

RowColLoop:
    for (int idx = 0; idx < height * width; idx++) {
// clang-format off
#pragma HLS LOOP_TRIPCOUNT min=ROWS*TC max=ROWS*TC
#pragma HLS pipeline II=1
        // clang-format on

        // Read input stream
        pxl_pack_in_V1 = (XF_SNAME(WORDWIDTH_SRC2))(V1.read(idx));
        pxl_pack_in_V2 = (XF_SNAME(WORDWIDTH_SRC2))(V2.read(idx));
        pxl_pack_in_divP1 = (XF_SNAME(WORDWIDTH_SRC2))(divP1.read(idx));
        pxl_pack_in_divP2 = (XF_SNAME(WORDWIDTH_SRC2))(divP2.read(idx));
        pxl_pack_in_U1_in = (XF_SNAME(WORDWIDTH_SRC2))(U1_in.read(idx));
        pxl_pack_in_U2_in = (XF_SNAME(WORDWIDTH_SRC2))(U2_in.read(idx));
        pxl_pack_in_p11 = (XF_SNAME(WORDWIDTH_SRC2))(P11_in.read(idx));
        pxl_pack_in_p12 = (XF_SNAME(WORDWIDTH_SRC2))(P12_in.read(idx));
        pxl_pack_in_p21 = (XF_SNAME(WORDWIDTH_SRC2))(P21_in.read(idx));
        pxl_pack_in_p22 = (XF_SNAME(WORDWIDTH_SRC2))(P22_in.read(idx));

    ProcLoop:
        for (int bit_in1 = 0, bit_out = 0; bit_in1 < ((FLOW_BW << XF_BITSHIFT(NPC)) * PLANES);
             bit_in1 += FLOW_BW, bit_out += FLOW_BW) {
// clang-format off
#pragma HLS UNROLL
            // clang-format on

            // Extract pixels
            XF_PTNAME(DEPTH_SRC2) V1_pxl = pxl_pack_in_V1.range(bit_in1 + FLOW_BW - 1, bit_in1);
            XF_PTNAME(DEPTH_SRC2) V2_pxl = pxl_pack_in_V2.range(bit_in1 + FLOW_BW - 1, bit_in1);
            XF_PTNAME(DEPTH_SRC2) divP1_pxl = pxl_pack_in_divP1.range(bit_in1 + FLOW_BW - 1, bit_in1);
            XF_PTNAME(DEPTH_SRC2) divP2_pxl = pxl_pack_in_divP2.range(bit_in1 + FLOW_BW - 1, bit_in1);
            XF_PTNAME(DEPTH_SRC2) U1_pxl = pxl_pack_in_U1_in.range(bit_in1 + FLOW_BW - 1, bit_in1);
            XF_PTNAME(DEPTH_SRC2) U2_pxl = pxl_pack_in_U2_in.range(bit_in1 + FLOW_BW - 1, bit_in1);

            XF_PTNAME(DEPTH_SRC2) U1k_pxl, U2k_pxl;
            U1k_pxl = U1_pxl;
            U2k_pxl = U2_pxl;

            ap_int<INT_BW> U1_pxl_t1 = (((ap_int<INT_BW>)V1_pxl) << (FLOW_FBITS)) + _theta * divP1_pxl;
            ap_int<INT_BW> U2_pxl_t1 = (((ap_int<INT_BW>)V2_pxl) << (FLOW_FBITS)) + _theta * divP2_pxl;

            ap_int<INT_BW> U1_V1_pxl_t1 = (((ap_int<INT_BW>)(V1_pxl - U1_pxl)) << (FLOW_FBITS)) + _theta * divP1_pxl;
            ap_int<INT_BW> U2_V2_pxl_t1 = (((ap_int<INT_BW>)(V2_pxl - U2_pxl)) << (FLOW_FBITS)) + _theta * divP2_pxl;

            ap_int<FLOW_BW> U1_V1_pxl_t2 =
                rounding_n_saturation<INT_BW, FLOW_BW, FLOW_FBITS * 2, FLOW_FBITS, 0>(U1_V1_pxl_t1);
            ap_int<FLOW_BW> U2_V2_pxl_t2 =
                rounding_n_saturation<INT_BW, FLOW_BW, FLOW_FBITS * 2, FLOW_FBITS, 0>(U2_V2_pxl_t1);

            ap_int<INT_BW> U1_V1_pxl_t2_sq = U1_V1_pxl_t2 * U1_V1_pxl_t2;
            ap_int<INT_BW> U2_V2_pxl_t2_sq = U2_V2_pxl_t2 * U2_V2_pxl_t2;

            ap_int<INT_BW> add_U1_V1_U2_V2 = U1_V1_pxl_t2_sq + U2_V2_pxl_t2_sq;
            ap_int<ERR_BW> add_U1_V1_U2_V2_t1 =
                rounding_n_saturation<INT_BW, ERR_BW, 2 * FLOW_FBITS, ERR_BW / 2, 0>(add_U1_V1_U2_V2);
            tmp_errorInt_t1 += add_U1_V1_U2_V2_t1;

            ap_int<FLOW_BW> U1_pxl_t2 =
                rounding_n_saturation<INT_BW, FLOW_BW, FLOW_FBITS * 2, FLOW_FBITS, 0>(U1_pxl_t1);
            ap_int<FLOW_BW> U2_pxl_t2 =
                rounding_n_saturation<INT_BW, FLOW_BW, FLOW_FBITS * 2, FLOW_FBITS, 0>(U2_pxl_t1);

            pxl_pack_out_U1.range(bit_in1 + FLOW_BW - 1, bit_in1) = U1_pxl_t2;
            pxl_pack_out_U2.range(bit_in1 + FLOW_BW - 1, bit_in1) = U2_pxl_t2;
        }
        // writing to output stream
        U1_out.write(idx, (XF_SNAME(WORDWIDTH_SRC2))pxl_pack_out_U1);
        U2_out.write(idx, (XF_SNAME(WORDWIDTH_SRC2))pxl_pack_out_U2);
        U1_out_ddr.write(idx, (XF_SNAME(WORDWIDTH_SRC2))pxl_pack_out_U1);
        U2_out_ddr.write(idx, (XF_SNAME(WORDWIDTH_SRC2))pxl_pack_out_U2);
        P11_pass.write(idx, (XF_SNAME(WORDWIDTH_SRC2))pxl_pack_in_p11);
        P12_pass.write(idx, (XF_SNAME(WORDWIDTH_SRC2))pxl_pack_in_p12);
        P21_pass.write(idx, (XF_SNAME(WORDWIDTH_SRC2))pxl_pack_in_p21);
        P22_pass.write(idx, (XF_SNAME(WORDWIDTH_SRC2))pxl_pack_in_p22);
    }
    *error = tmp_errorInt_t1;

    return 0;
} // updateU

template <int IMG_FBITS = 0,
          int FLOW_FBITS = 8,
          int IMG_T = XF_8UC1,
          int FLOW_T = XF_16SC1,
          int ROWS = 126,
          int COLS = 224,
          int NPC = 1,
          int XFCVDEPTH_U1 = _XFCVDEPTH_DEFAULT,
          int XFCVDEPTH_U1x = _XFCVDEPTH_DEFAULT,
          int XFCVDEPTH_U1y = _XFCVDEPTH_DEFAULT,
          int XFCVDEPTH_P1 = _XFCVDEPTH_DEFAULT,
          int XFCVDEPTH_P2 = _XFCVDEPTH_DEFAULT,
          int XFCVDEPTH_P1_pass = _XFCVDEPTH_DEFAULT,
          int XFCVDEPTH_P2_pass = _XFCVDEPTH_DEFAULT,
          int ERR_BW = 32>
int forwardgradient(xf::cv::Mat<FLOW_T, ROWS, COLS, NPC, XFCVDEPTH_U1>& U1,
                    xf::cv::Mat<FLOW_T, ROWS, COLS, NPC, XFCVDEPTH_U1x>& U1x,
                    xf::cv::Mat<FLOW_T, ROWS, COLS, NPC, XFCVDEPTH_U1y>& U1y,
                    xf::cv::Mat<FLOW_T, ROWS, COLS, NPC, XFCVDEPTH_P1>& P1,
                    xf::cv::Mat<FLOW_T, ROWS, COLS, NPC, XFCVDEPTH_P2>& P2,
                    xf::cv::Mat<FLOW_T, ROWS, COLS, NPC, XFCVDEPTH_P1_pass>& P1_pass,
                    xf::cv::Mat<FLOW_T, ROWS, COLS, NPC, XFCVDEPTH_P2_pass>& P2_pass,
                    unsigned short height,
                    unsigned short width) {
// clang-format off
#pragma HLS inline off
    // clang-format on
    enum {
        PLANES = XF_CHANNELS(IMG_T, NPC),
        DEPTH_SRC1 = XF_DEPTH(IMG_T, NPC),
        DEPTH_SRC2 = XF_DEPTH(FLOW_T, NPC),
        DEPTH_DST = XF_DEPTH(FLOW_T, NPC),
        WORDWIDTH_SRC1 = XF_WORDWIDTH(IMG_T, NPC),
        WORDWIDTH_SRC2 = XF_WORDWIDTH(FLOW_T, NPC),
        WORDWIDTH_DST = XF_WORDWIDTH(FLOW_T, NPC),
        TC = COLS >> XF_BITSHIFT(NPC),
        IMG_BW = XF_PIXELWIDTH(IMG_T, NPC) / PLANES,
        FLOW_BW = XF_PIXELWIDTH(FLOW_T, NPC) / PLANES,
        INT_BW = 2 * FLOW_BW,
        NPPC = NPC
    };

    XF_SNAME(WORDWIDTH_SRC2) pxl_pack_in_U1;
    XF_SNAME(WORDWIDTH_DST) pxl_pack_out_U1x, pxl_pack_out_U1y;
    XF_SNAME(WORDWIDTH_SRC2) pxl_pack_in_P1, pxl_pack_in_P2;
    XF_SNAME(WORDWIDTH_SRC2) pxl_pack_out_P1, pxl_pack_out_P2;

    int read_ptr = 0;
    int write_ptr = 0;

    int i, j, k;
    ap_int<2 * INT_BW> tmp_error = 0;
    xf::cv::LineBuffer<1, (COLS >> _NPPC_SHIFT_VAL), XF_SNAME(WORDWIDTH_SRC2), RAM_S2P_BRAM, 1> line_buff;
    xf::cv::LineBuffer<1, (COLS >> _NPPC_SHIFT_VAL), XF_SNAME(WORDWIDTH_SRC2), RAM_S2P_BRAM, 1> line_buff_P1;
    xf::cv::LineBuffer<1, (COLS >> _NPPC_SHIFT_VAL), XF_SNAME(WORDWIDTH_SRC2), RAM_S2P_BRAM, 1> line_buff_P2;

    XF_SNAME(WORDWIDTH_SRC2) curr_pxl_pack_in_U1, next_pxl_pack_in_U1, pxl0_pack_in_U1;

    for (int c = 0; c < width; c++) {
// clang-format off
#pragma HLS PIPELINE
#pragma HLS LOOP_TRIPCOUNT min=1 max=TC
        // clang-format on
        // Reading the rows of image
        line_buff(0, c) = U1.read(read_ptr);
        line_buff_P1(0, c) = P1.read(read_ptr);
        line_buff_P2(0, c) = P2.read(read_ptr++);
    }

    curr_pxl_pack_in_U1 = line_buff(0, 0);
    pxl0_pack_in_U1 = 0;
    int col_count = 0;
    int row_count = 0;

RowColLoop:
    for (int idx = 0; idx < height * width; idx++) {
// clang-format off
#pragma HLS LOOP_TRIPCOUNT min=ROWS*TC max=ROWS*TC
#pragma HLS pipeline II=1
        // clang-format on
        // Read input stream
        pxl_pack_in_U1 =
            (row_count == height - 1) ? curr_pxl_pack_in_U1 : (XF_SNAME(WORDWIDTH_SRC2))(U1.read(read_ptr));
        if (row_count != (height - 1)) {
            pxl_pack_in_P1 = (XF_SNAME(WORDWIDTH_SRC2))(P1.read(read_ptr));
            pxl_pack_in_P2 = (XF_SNAME(WORDWIDTH_SRC2))(P2.read(read_ptr));
        } else {
            pxl_pack_in_P1 = 0;
            pxl_pack_in_P2 = 0;
        }
        read_ptr++;

        pxl_pack_out_P1 = line_buff_P1(0, col_count);
        pxl_pack_out_P2 = line_buff_P2(0, col_count);

        line_buff_P1(0, col_count) = pxl_pack_in_P1;
        line_buff_P2(0, col_count) = pxl_pack_in_P2;

        next_pxl_pack_in_U1 = (col_count == width - 1) ? pxl0_pack_in_U1 : line_buff(0, col_count + 1);

        line_buff(0, col_count) = pxl_pack_in_U1;

        if (col_count == 0) pxl0_pack_in_U1 = pxl_pack_in_U1;

    ProcLoop:

        for (int k = 0; k < XF_NPIXPERCYCLE(NPC); k++) {
// clang-format off
#pragma HLS UNROLL
            // clang-format on

            // Extract pixels
            XF_PTNAME(DEPTH_SRC2) U1_pxl_i_j = curr_pxl_pack_in_U1.range((k + 1) * FLOW_BW - 1, k * FLOW_BW);
            XF_PTNAME(DEPTH_SRC2)
            tmp_U1_pxl_ip1_j = (k == (XF_NPIXPERCYCLE(NPC) - 1))
                                   ? next_pxl_pack_in_U1.range(FLOW_BW - 1, 0)
                                   : curr_pxl_pack_in_U1.range((k + 2) * FLOW_BW - 1, (k + 1) * FLOW_BW);
            XF_PTNAME(DEPTH_SRC2)
            U1_pxl_ip1_j =
                ((col_count == width - 1) && (k == (XF_NPIXPERCYCLE(NPC) - 1))) ? U1_pxl_i_j : tmp_U1_pxl_ip1_j;
            XF_PTNAME(DEPTH_SRC2) U1_pxl_i_jp1 = pxl_pack_in_U1.range((k + 1) * FLOW_BW - 1, k * FLOW_BW);

            ap_int<INT_BW> U1x_pxl_t1 = U1_pxl_ip1_j - U1_pxl_i_j;
            ap_int<INT_BW> U1y_pxl_t1 = U1_pxl_i_jp1 - U1_pxl_i_j;
            ap_int<FLOW_BW> U1x_pxl_t2 = rounding_n_saturation<INT_BW, FLOW_BW, FLOW_FBITS, FLOW_FBITS>(U1x_pxl_t1);
            ap_int<FLOW_BW> U1y_pxl_t2 = rounding_n_saturation<INT_BW, FLOW_BW, FLOW_FBITS, FLOW_FBITS>(U1y_pxl_t1);
            pxl_pack_out_U1x.range((k + 1) * FLOW_BW - 1, k * FLOW_BW) = U1x_pxl_t2;
            pxl_pack_out_U1y.range((k + 1) * FLOW_BW - 1, k * FLOW_BW) = U1y_pxl_t2;
        }

        curr_pxl_pack_in_U1 = next_pxl_pack_in_U1;

        U1x.write(write_ptr, (XF_SNAME(WORDWIDTH_SRC2))pxl_pack_out_U1x);
        U1y.write(write_ptr, (XF_SNAME(WORDWIDTH_SRC2))pxl_pack_out_U1y);
        P1_pass.write(write_ptr, (XF_SNAME(WORDWIDTH_SRC2))pxl_pack_out_P1);
        P2_pass.write(write_ptr, (XF_SNAME(WORDWIDTH_SRC2))pxl_pack_out_P2);
        write_ptr++;

        if (col_count == width - 1) {
            col_count = 0;
            row_count++;
        } else {
            col_count++;
        }
    }

    return 0;
} // forwardgradient

template <int IMG_FBITS = 0,
          int FLOW_FBITS = 8,
          int IMG_T = XF_8UC1,
          int FLOW_T = XF_16SC1,
          int ROWS = 126,
          int COLS = 224,
          int NPC = 1,
          int XFCVDEPTH_I1 = _XFCVDEPTH_DEFAULT,
          int XFCVDEPTH_I1x = _XFCVDEPTH_DEFAULT,
          int XFCVDEPTH_I1y = _XFCVDEPTH_DEFAULT,
          int ERR_BW = 32>
int centeredgradient(xf::cv::Mat<IMG_T, ROWS, COLS, NPC, XFCVDEPTH_I1>& I1,
                     xf::cv::Mat<FLOW_T, ROWS, COLS, NPC, XFCVDEPTH_I1x>& I1x,
                     xf::cv::Mat<FLOW_T, ROWS, COLS, NPC, XFCVDEPTH_I1y>& I1y,
                     unsigned short height,
                     unsigned short width_ncpr) {
// clang-format off
#pragma HLS inline off
    // clang-format on
    enum {
        PLANES = XF_CHANNELS(IMG_T, NPC),
        DEPTH_SRC1 = XF_DEPTH(IMG_T, NPC),
        DEPTH_SRC2 = XF_DEPTH(FLOW_T, NPC),
        DEPTH_DST = XF_DEPTH(FLOW_T, NPC),
        WORDWIDTH_SRC1 = XF_WORDWIDTH(IMG_T, NPC),
        WORDWIDTH_SRC2 = XF_WORDWIDTH(FLOW_T, NPC),
        WORDWIDTH_DST = XF_WORDWIDTH(FLOW_T, NPC),
        TC = COLS >> XF_BITSHIFT(NPC),
        IMG_BW = XF_PIXELWIDTH(IMG_T, NPC) / PLANES,
        FLOW_BW = XF_PIXELWIDTH(FLOW_T, NPC) / PLANES,
        INT_BW = 2 * FLOW_BW,
        NPPC = NPC
    };

    unsigned short width = I1.cols;
    unsigned short valid_pix_last_col_NPC = (width_ncpr << NPC) - width;
    XF_SNAME(WORDWIDTH_SRC1) pxl_pack_in_I1;
    XF_SNAME(WORDWIDTH_DST) pxl_pack_out_I1x, pxl_pack_out_I1y;
    int read_ptr = 0;
    int write_ptr = 0;
    ap_uint<16> i, j, k;
    ap_int<2 * INT_BW> tmp_error = 0;
    XF_SNAME(WORDWIDTH_SRC1) prev_line_pxl_pack_in_I1, curr_pxl_pack_in_I1, next_pxl_pack_in_I1, pxl0_pack_in_I1;
    XF_SNAME(WORDWIDTH_SRC1) prev_I1_pxl = 0;

    // Line Buffer for 1 row from the image
    xf::cv::LineBuffer<ROWS, (COLS >> _NPPC_SHIFT_VAL), XF_SNAME(WORDWIDTH_SRC1), RAM_S2P_BRAM, 1> line_buff;
// Intialize line buffer
READ_LINES_INIT:
    for (int c = 0; c < width_ncpr; c++) {
// clang-format off
#pragma HLS PIPELINE
#pragma HLS LOOP_TRIPCOUNT min=1 max=TC
        // clang-format on
        // Reading the rows of image
        line_buff(0, c) = I1.read(read_ptr++);
    }
    curr_pxl_pack_in_I1 = line_buff(0, 0);
    pxl0_pack_in_I1 = 0;

RowLoop:
    for (i = 0; i < height; i++) {
// clang-format off
#pragma HLS LOOP_TRIPCOUNT min=ROWS max=ROWS
    // clang-format on

    ColLoop:
        for (j = 0; j < (width_ncpr); j++) {
// clang-format off
#pragma HLS LOOP_TRIPCOUNT min=TC max=TC
#pragma HLS pipeline II=1
            // clang-format on

            // Read input stream
            pxl_pack_in_I1 = (i == height - 1) ? curr_pxl_pack_in_I1 : (XF_SNAME(WORDWIDTH_SRC1))(I1.read(read_ptr++));

            if (i[0] == 0) {
                prev_line_pxl_pack_in_I1 = line_buff(1, j);
                next_pxl_pack_in_I1 = (j == width_ncpr - 1) ? pxl0_pack_in_I1 : line_buff(0, j + 1);

                line_buff(1, j) = pxl_pack_in_I1;
            } else {
                prev_line_pxl_pack_in_I1 = line_buff(0, j);
                next_pxl_pack_in_I1 = (j == width_ncpr - 1) ? pxl0_pack_in_I1 : line_buff(1, j + 1);

                line_buff(0, j) = pxl_pack_in_I1;
            }

            if (j == 0) pxl0_pack_in_I1 = pxl_pack_in_I1;

        ProcLoop:

            for (int k = 0; k < XF_NPIXPERCYCLE(NPC); k++) {
// clang-format off
#pragma HLS UNROLL
                // clang-format on

                // Extract right_pixel, left_pixel, bottom_pixel & top_pixel pixels for computation.
                unsigned short in_col_id = (j * XF_NPIXPERCYCLE(NPC) + k);
                bool en_last_pixel_in_row = (in_col_id == (width - 1));
                XF_PTNAME(DEPTH_SRC1)
                tmp_I1_pxl_ip1_j = (k == (XF_NPIXPERCYCLE(NPC) - 1))
                                       ? next_pxl_pack_in_I1.range(IMG_BW - 1, 0)
                                       : curr_pxl_pack_in_I1.range((k + 2) * IMG_BW - 1, (k + 1) * IMG_BW);
                XF_PTNAME(DEPTH_SRC1)
                tmp_I1_pxl_im1_j = (k == 0) ? prev_I1_pxl : curr_pxl_pack_in_I1.range(k * IMG_BW - 1, (k - 1) * IMG_BW);
                XF_PTNAME(DEPTH_SRC1)
                I1_pxl_ip1_j = (en_last_pixel_in_row) ? curr_pxl_pack_in_I1.range((k + 1) * IMG_BW - 1, k * IMG_BW)
                                                      : tmp_I1_pxl_ip1_j;
                XF_PTNAME(DEPTH_SRC1)
                I1_pxl_im1_j = ((j == 0) && (k == 0)) ? curr_pxl_pack_in_I1.range(IMG_BW - 1, 0) : tmp_I1_pxl_im1_j;
                XF_PTNAME(DEPTH_SRC1) I1_pxl_i_jp1 = pxl_pack_in_I1.range((k + 1) * IMG_BW - 1, k * IMG_BW);
                XF_PTNAME(DEPTH_SRC2)
                I1_pxl_i_jm1 = (i == 0) ? curr_pxl_pack_in_I1.range((k + 1) * IMG_BW - 1, k * IMG_BW)
                                        : prev_line_pxl_pack_in_I1.range((k + 1) * IMG_BW - 1, k * IMG_BW);

                // computation.
                // dx = ( right_pixel - left_pixel ) / 2
                // dy = ( bottom_pixel - top_pixel ) / 2
                ap_int<INT_BW> I1x_pxl_t1 =
                    ((((ap_int<INT_BW>)I1_pxl_ip1_j) << 1) - (((ap_int<INT_BW>)I1_pxl_im1_j) << 1)) / 2;
                ap_int<INT_BW> I1y_pxl_t1 =
                    ((((ap_int<INT_BW>)I1_pxl_i_jp1) << 1) - (((ap_int<INT_BW>)I1_pxl_i_jm1) << 1)) / 2;

                // output round & saturation.
                ap_int<FLOW_BW> I1x_pxl_t2 =
                    rounding_n_saturation<INT_BW, FLOW_BW, (IMG_FBITS + 1), FLOW_FBITS>(I1x_pxl_t1);
                ap_int<FLOW_BW> I1y_pxl_t2 =
                    rounding_n_saturation<INT_BW, FLOW_BW, (IMG_FBITS + 1), FLOW_FBITS>(I1y_pxl_t1);

                // Padding for last invalid pixels of a row
                if (in_col_id > (width - 1)) {
                    I1x_pxl_t2 = 0;
                    I1y_pxl_t2 = 0;
                }

                // output data packing
                pxl_pack_out_I1x.range((k + 1) * FLOW_BW - 1, k * FLOW_BW) = I1x_pxl_t2;
                pxl_pack_out_I1y.range((k + 1) * FLOW_BW - 1, k * FLOW_BW) = I1y_pxl_t2;
            }
            prev_I1_pxl = curr_pxl_pack_in_I1.range(NPC * XF_PIXELWIDTH(IMG_T, NPC) - 1,
                                                    NPC * XF_PIXELWIDTH(IMG_T, NPC) - IMG_BW);
            curr_pxl_pack_in_I1 = next_pxl_pack_in_I1;

            // write output stream
            I1x.write(write_ptr, (XF_SNAME(WORDWIDTH_DST))pxl_pack_out_I1x);
            I1y.write(write_ptr, (XF_SNAME(WORDWIDTH_DST))pxl_pack_out_I1y);
            write_ptr++;
        }
    }

    return 0;
} // Centeredgradient

template <int NUMBITS_C = 32>
ap_int<32> tvl_isqrt(ap_int<32> num) {
// clang-format off
#pragma HLS inline
    // clang-format on

    bool compute;
    ap_int<32> res = 0;
    ap_int<32> bit = 1 << (NUMBITS_C - 2);
    // The second-to-top bit is set.
    // Same as ((unsigned) INT32_MAX + 1) / 2.

    compute = (bit <= num);

    for (uint8_t i = 0; i < NUMBITS_C / 2; i++) {
// clang-format off
#pragma HLS unroll
        // clang-format on
        if (compute) {
            if (num >= res + bit) {
                num -= res + bit;
                res = (res >> 1) + bit;
            } else {
                res >>= 1;
            }
        }
        bit >>= 2;
        // "bit" starts at the highest power of four <= the argument.
        if (!compute) compute = (bit <= num);
    }
    return res;
} // tvl_isqrt

template <int IMG_FBITS = 0,
          int FLOW_FBITS = 8,
          int IMG_T = XF_8UC1,
          int FLOW_T = XF_16SC1,
          int ROWS = 126,
          int COLS = 224,
          int NPC = 1,
          int XFCVDEPTH_U1x = _XFCVDEPTH_DEFAULT,
          int XFCVDEPTH_U1y = _XFCVDEPTH_DEFAULT,
          int XFCVDEPTH_U2x = _XFCVDEPTH_DEFAULT,
          int XFCVDEPTH_U2y = _XFCVDEPTH_DEFAULT,
          int XFCVDEPTH_P11_in = _XFCVDEPTH_DEFAULT,
          int XFCVDEPTH_P12_in = _XFCVDEPTH_DEFAULT,
          int XFCVDEPTH_P21_in = _XFCVDEPTH_DEFAULT,
          int XFCVDEPTH_P22_in = _XFCVDEPTH_DEFAULT,
          int XFCVDEPTH_P11_out = _XFCVDEPTH_DEFAULT,
          int XFCVDEPTH_P12_out = _XFCVDEPTH_DEFAULT,
          int XFCVDEPTH_P21_out = _XFCVDEPTH_DEFAULT,
          int XFCVDEPTH_P22_out = _XFCVDEPTH_DEFAULT,
          int ERR_BW = 32,
          int FLOW_BW>
int estimatedualvariables(xf::cv::Mat<FLOW_T, ROWS, COLS, NPC, XFCVDEPTH_U1x>& U1x,
                          xf::cv::Mat<FLOW_T, ROWS, COLS, NPC, XFCVDEPTH_U1y>& U1y,
                          xf::cv::Mat<FLOW_T, ROWS, COLS, NPC, XFCVDEPTH_U2x>& U2x,
                          xf::cv::Mat<FLOW_T, ROWS, COLS, NPC, XFCVDEPTH_U2y>& U2y,
                          xf::cv::Mat<FLOW_T, ROWS, COLS, NPC, XFCVDEPTH_P11_in>& P11_in,
                          xf::cv::Mat<FLOW_T, ROWS, COLS, NPC, XFCVDEPTH_P12_in>& P12_in,
                          xf::cv::Mat<FLOW_T, ROWS, COLS, NPC, XFCVDEPTH_P21_in>& P21_in,
                          xf::cv::Mat<FLOW_T, ROWS, COLS, NPC, XFCVDEPTH_P22_in>& P22_in,
                          xf::cv::Mat<FLOW_T, ROWS, COLS, NPC, XFCVDEPTH_P11_out>& P11_out,
                          xf::cv::Mat<FLOW_T, ROWS, COLS, NPC, XFCVDEPTH_P12_out>& P12_out,
                          xf::cv::Mat<FLOW_T, ROWS, COLS, NPC, XFCVDEPTH_P21_out>& P21_out,
                          xf::cv::Mat<FLOW_T, ROWS, COLS, NPC, XFCVDEPTH_P22_out>& P22_out,
                          ap_int<FLOW_BW> taut,
                          bool intilize_P_with_zeros,
                          unsigned short height,
                          unsigned short width) {
// clang-format off
#pragma HLS inline off
    // clang-format on
    enum {
        PLANES = XF_CHANNELS(IMG_T, NPC),
        DEPTH_SRC1 = XF_DEPTH(IMG_T, NPC),
        DEPTH_SRC2 = XF_DEPTH(FLOW_T, NPC),
        DEPTH_DST = XF_DEPTH(FLOW_T, NPC),
        WORDWIDTH_SRC1 = XF_WORDWIDTH(IMG_T, NPC),
        WORDWIDTH_SRC2 = XF_WORDWIDTH(FLOW_T, NPC),
        WORDWIDTH_DST = XF_WORDWIDTH(FLOW_T, NPC),
        TC = COLS >> XF_BITSHIFT(NPC),
        IMG_BW = XF_PIXELWIDTH(IMG_T, NPC) / PLANES,
        INT_BW = 2 * FLOW_BW,
    };

    XF_SNAME(WORDWIDTH_SRC2) pxl_pack_in_U1x, pxl_pack_in_U1y, pxl_pack_in_U2x, pxl_pack_in_U2y;
    XF_SNAME(WORDWIDTH_SRC2) pxl_pack_in_P11_in, pxl_pack_in_P12_in, pxl_pack_in_P21_in, pxl_pack_in_P22_in;
    XF_SNAME(WORDWIDTH_DST) pxl_pack_out_P11_out, pxl_pack_out_P12_out, pxl_pack_out_P21_out, pxl_pack_out_P22_out;
    ap_int<INT_BW> pxl_pack_out_P11_out_t1, pxl_pack_out_P12_out_t1, pxl_pack_out_P21_out_t1, pxl_pack_out_P22_out_t1;

    int rd_ptr = 0;
    int wr_ptr = 0;

    int i, j, k;
    int count = 0;

// wr_ptr = 0 ;
EstDualRowColLoop:
    for (int idx = 0; idx < height * width; idx++) {
// clang-format off
#pragma HLS LOOP_TRIPCOUNT min=ROWS*TC max=ROWS*TC
#pragma HLS pipeline II=1
        // clang-format on

        pxl_pack_in_U1x = (XF_SNAME(WORDWIDTH_SRC2))(U1x.read(idx));
        pxl_pack_in_U1y = (XF_SNAME(WORDWIDTH_SRC2))(U1y.read(idx));
        pxl_pack_in_U2x = (XF_SNAME(WORDWIDTH_SRC2))(U2x.read(idx));
        pxl_pack_in_U2y = (XF_SNAME(WORDWIDTH_SRC2))(U2y.read(idx));
        pxl_pack_in_P11_in = (XF_SNAME(WORDWIDTH_SRC2))(P11_in.read(idx));
        pxl_pack_in_P12_in = (XF_SNAME(WORDWIDTH_SRC2))(P12_in.read(idx));
        pxl_pack_in_P21_in = (XF_SNAME(WORDWIDTH_SRC2))(P21_in.read(idx));
        pxl_pack_in_P22_in = (XF_SNAME(WORDWIDTH_SRC2))(P22_in.read(idx));

    ProcLoop:
        for (int npc_count = 0, bit_in1 = 0, bit_out = 0; npc_count < NPC;
             npc_count++, bit_in1 += FLOW_BW, bit_out += FLOW_BW) {
// clang-format off
#pragma HLS UNROLL
            // clang-format on

            // Extract pixels
            XF_PTNAME(DEPTH_SRC2) U1x_pxl = pxl_pack_in_U1x.range(bit_in1 + FLOW_BW - 1, bit_in1);
            XF_PTNAME(DEPTH_SRC2) U1y_pxl = pxl_pack_in_U1y.range(bit_in1 + FLOW_BW - 1, bit_in1);
            XF_PTNAME(DEPTH_SRC2) U2x_pxl = pxl_pack_in_U2x.range(bit_in1 + FLOW_BW - 1, bit_in1);
            XF_PTNAME(DEPTH_SRC2) U2y_pxl = pxl_pack_in_U2y.range(bit_in1 + FLOW_BW - 1, bit_in1);
            XF_PTNAME(DEPTH_SRC2) P11_in_pxl = pxl_pack_in_P11_in.range(bit_in1 + FLOW_BW - 1, bit_in1);
            XF_PTNAME(DEPTH_SRC2) P12_in_pxl = pxl_pack_in_P12_in.range(bit_in1 + FLOW_BW - 1, bit_in1);
            XF_PTNAME(DEPTH_SRC2) P21_in_pxl = pxl_pack_in_P21_in.range(bit_in1 + FLOW_BW - 1, bit_in1);
            XF_PTNAME(DEPTH_SRC2) P22_in_pxl = pxl_pack_in_P22_in.range(bit_in1 + FLOW_BW - 1, bit_in1);

            ap_int<INT_BW> U1x_pxl_sq = U1x_pxl * U1x_pxl;
            ap_int<INT_BW> U1y_pxl_sq = U1y_pxl * U1y_pxl;
            ap_int<INT_BW> U2x_pxl_sq = U2x_pxl * U2x_pxl;
            ap_int<INT_BW> U2y_pxl_sq = U2y_pxl * U2y_pxl;

            ap_int<INT_BW> sum_sq_U1 = U1x_pxl_sq + U1y_pxl_sq;
            ap_int<INT_BW> sum_sq_U2 = U2x_pxl_sq + U2y_pxl_sq;
            ap_int<32> sum_sq_1_Q16p16 = sum_sq_U1 >> (2 * FLOW_FBITS - 16);
            ap_int<32> sum_sq_2_Q16p16 = sum_sq_U2 >> (2 * FLOW_FBITS - 16);

            ap_int<32> g1_Q24p8 = tvl_isqrt(sum_sq_1_Q16p16);
            ap_int<32> g2_Q24p8 = tvl_isqrt(sum_sq_2_Q16p16);

            ap_int<18> g1_Q10p8 = (ap_int<18>)g1_Q24p8;
            ap_int<18> g2_Q10p8 = (ap_int<18>)g2_Q24p8;

            ap_int<INT_BW> one_INT_BW = 0;
            one_INT_BW[FLOW_FBITS + 8] = 1;
            ap_int<INT_BW> ng1_INT_BW = one_INT_BW + (taut * g1_Q10p8);
            ap_int<INT_BW> ng2_INT_BW = one_INT_BW + (taut * g2_Q10p8);

            ap_int<FLOW_BW> ng1 = ng1_INT_BW >> 8;
            ap_int<FLOW_BW> ng2 = ng2_INT_BW >> 8;

            ap_int<INT_BW> taut_U1x_t1 = taut * U1x_pxl;
            ap_int<INT_BW> taut_U1y_t1 = taut * U1y_pxl;
            ap_int<INT_BW> taut_U2x_t1 = taut * U2x_pxl;
            ap_int<INT_BW> taut_U2y_t1 = taut * U2y_pxl;

            ap_int<FLOW_BW> taut_U1x_t2 = taut_U1x_t1 >> FLOW_FBITS;
            ap_int<FLOW_BW> taut_U1y_t2 = taut_U1y_t1 >> FLOW_FBITS;
            ap_int<FLOW_BW> taut_U2x_t2 = taut_U2x_t1 >> FLOW_FBITS;
            ap_int<FLOW_BW> taut_U2y_t2 = taut_U2y_t1 >> FLOW_FBITS;

            ap_int<FLOW_BW> taut_U1x_t3, taut_U1y_t3;
            ap_int<FLOW_BW> taut_U2x_t3, taut_U2y_t3;
            if (intilize_P_with_zeros == true) {
                taut_U1x_t3 = taut_U1x_t2;
                taut_U1y_t3 = taut_U1y_t2;
                taut_U2x_t3 = taut_U2x_t2;
                taut_U2y_t3 = taut_U2y_t2;
            } else {
                taut_U1x_t3 = (P11_in_pxl + taut_U1x_t2);
                taut_U1y_t3 = (P12_in_pxl + taut_U1y_t2);
                taut_U2x_t3 = (P21_in_pxl + taut_U2x_t2);
                taut_U2y_t3 = (P22_in_pxl + taut_U2y_t2);
            }

            ap_int<FLOW_BW> p11_out_t1 =
                fxdpt_div<FLOW_BW, FLOW_BW, FLOW_BW, FLOW_FBITS, FLOW_FBITS, FLOW_FBITS, 11>(taut_U1x_t3, ng1);
            ap_int<FLOW_BW> p12_out_t1 =
                fxdpt_div<FLOW_BW, FLOW_BW, FLOW_BW, FLOW_FBITS, FLOW_FBITS, FLOW_FBITS, 11>(taut_U1y_t3, ng1);
            ap_int<FLOW_BW> p21_out_t1 =
                fxdpt_div<FLOW_BW, FLOW_BW, FLOW_BW, FLOW_FBITS, FLOW_FBITS, FLOW_FBITS, 11>(taut_U2x_t3, ng2);
            ap_int<FLOW_BW> p22_out_t1 =
                fxdpt_div<FLOW_BW, FLOW_BW, FLOW_BW, FLOW_FBITS, FLOW_FBITS, FLOW_FBITS, 11>(taut_U2y_t3, ng2);

            pxl_pack_out_P11_out.range(bit_out + FLOW_BW - 1, bit_out) = p11_out_t1;
            pxl_pack_out_P12_out.range(bit_out + FLOW_BW - 1, bit_out) = p12_out_t1;
            pxl_pack_out_P21_out.range(bit_out + FLOW_BW - 1, bit_out) = p21_out_t1;
            pxl_pack_out_P22_out.range(bit_out + FLOW_BW - 1, bit_out) = p22_out_t1;
        }
        // writing to output stream
        P11_out.write(wr_ptr, (XF_SNAME(WORDWIDTH_DST))pxl_pack_out_P11_out);
        P12_out.write(wr_ptr, (XF_SNAME(WORDWIDTH_DST))pxl_pack_out_P12_out);
        P21_out.write(wr_ptr, (XF_SNAME(WORDWIDTH_DST))pxl_pack_out_P21_out);
        P22_out.write(wr_ptr, (XF_SNAME(WORDWIDTH_DST))pxl_pack_out_P22_out);
        wr_ptr++;
    }

    return 0;
} // estimateDualVariables

template <int TYPE = XF_16SC1,
          int ROWS = 224,
          int COLS = 224,
          int NPC = 1,
          int XFCVDEPTH_Min = _XFCVDEPTH_DEFAULT,
          int XFCVDEPTH_Mout1 = _XFCVDEPTH_DEFAULT,
          int XFCVDEPTH_Mout2 = _XFCVDEPTH_DEFAULT>
int dupMat(xf::cv::Mat<TYPE, ROWS, COLS, NPC, XFCVDEPTH_Min>& Min,
           xf::cv::Mat<TYPE, ROWS, COLS, NPC, XFCVDEPTH_Mout1>& Mout1,
           xf::cv::Mat<TYPE, ROWS, COLS, NPC, XFCVDEPTH_Mout2>& Mout2,
           unsigned short height,
           unsigned short width) {
// clang-format off
#pragma HLS inline off
    // clang-format on
    enum {
        WORDWIDTH_SRC = XF_WORDWIDTH(TYPE, NPC),
    };

    int loopbound = height * width;

RowColLoop:
    for (int idx = 0; idx < loopbound; idx++) {
// clang-format off
#pragma HLS LOOP_TRIPCOUNT min=ROWS*COLS/NPC max=ROWS*COLS/NPC
#pragma HLS pipeline II=1
        // clang-format on

        // Read input stream
        XF_SNAME(WORDWIDTH_SRC) pxl_pack_in_1 = Min.read(idx);

        // writing into output stream
        Mout1.write(idx, pxl_pack_in_1);
        Mout2.write(idx, pxl_pack_in_1);
    }
    return 0;
} // dupMat

template <int TYPE = XF_16SC1,
          int ROWS = 224,
          int COLS = 224,
          int NPC = 1,
          int XFCVDEPTH_Min = _XFCVDEPTH_DEFAULT,
          int XFCVDEPTH_Mout1 = _XFCVDEPTH_DEFAULT,
          int XFCVDEPTH_Mout2 = _XFCVDEPTH_DEFAULT,
          int XFCVDEPTH_Mout3 = _XFCVDEPTH_DEFAULT,
          int XFCVDEPTH_Mout4 = _XFCVDEPTH_DEFAULT>
int dupMat(xf::cv::Mat<TYPE, ROWS, COLS, NPC, XFCVDEPTH_Min>& Min,
           xf::cv::Mat<TYPE, ROWS, COLS, NPC, XFCVDEPTH_Mout1>& Mout1,
           xf::cv::Mat<TYPE, ROWS, COLS, NPC, XFCVDEPTH_Mout2>& Mout2,
           xf::cv::Mat<TYPE, ROWS, COLS, NPC, XFCVDEPTH_Mout3>& Mout3,
           xf::cv::Mat<TYPE, ROWS, COLS, NPC, XFCVDEPTH_Mout4>& Mout4,
           unsigned short height,
           unsigned short width) {
// clang-format off
#pragma HLS inline off
    // clang-format on

    enum {
        WORDWIDTH_SRC = XF_WORDWIDTH(TYPE, NPC),
    };
    int loopbound = height * width;

RowColLoop:
    for (int idx = 0; idx < loopbound; idx++) {
// clang-format off
#pragma HLS LOOP_TRIPCOUNT min=ROWS*COLS/NPC max=ROWS*COLS/NPC
#pragma HLS pipeline II=1
        // clang-format on

        // Read input stream
        XF_SNAME(WORDWIDTH_SRC) pxl_pack_in_1 = Min.read(idx);

        // writing into output stream
        Mout1.write(idx, pxl_pack_in_1);
        Mout2.write(idx, pxl_pack_in_1);
        Mout3.write(idx, pxl_pack_in_1);
        Mout4.write(idx, pxl_pack_in_1);
    }
    return 0;
} // dupMat

template <int FLOW_T = XF_16SC1,
          int FLOW_FBITS = 8,
          int ROWS = 126,
          int COLS = 224,
          int NPC = 1,
          int XFCVDEPTH_U1_in = _XFCVDEPTH_DEFAULT,
          int XFCVDEPTH_U2_in = _XFCVDEPTH_DEFAULT,
          int XFCVDEPTH_U1_out = _XFCVDEPTH_DEFAULT,
          int XFCVDEPTH_U2_out = _XFCVDEPTH_DEFAULT,
          int SCALE_BW = 16>
int multiplyU(xf::cv::Mat<FLOW_T, ROWS, COLS, NPC, XFCVDEPTH_U1_in>& U1_in,
              xf::cv::Mat<FLOW_T, ROWS, COLS, NPC, XFCVDEPTH_U2_in>& U2_in,
              xf::cv::Mat<FLOW_T, ROWS, COLS, NPC, XFCVDEPTH_U1_out>& U1_out,
              xf::cv::Mat<FLOW_T, ROWS, COLS, NPC, XFCVDEPTH_U2_out>& U2_out,
              ap_int<SCALE_BW> scale,
              unsigned short height,
              unsigned short width_ncpr) {
// clang-format off
#pragma HLS inline off
    // clang-format on

    enum {
        DEPTH_SRC2 = XF_DEPTH(FLOW_T, NPC),
        DEPTH_DST = XF_DEPTH(FLOW_T, NPC),
        WORDWIDTH_SRC2 = XF_WORDWIDTH(FLOW_T, NPC),
        WORDWIDTH_DST = XF_WORDWIDTH(FLOW_T, NPC),
        TC = COLS >> XF_BITSHIFT(NPC),
        FLOW_BW = XF_PIXELWIDTH(FLOW_T, NPC),
        INT_BW = 2 * FLOW_BW
    };

    XF_SNAME(WORDWIDTH_DST) pxl_pack_out_U1, pxl_pack_out_U2;
    XF_SNAME(WORDWIDTH_SRC2) pxl_pack_in_U1, pxl_pack_in_U2;

    int read_ptr = 0;
    int write_ptr = 0;

RowLoop:
    for (short i = 0; i < height; i++) {
// clang-format off
#pragma HLS LOOP_TRIPCOUNT min=ROWS max=ROWS
    // clang-format on
    ColLoop:
        for (short j = 0; j < width_ncpr; j++) {
// clang-format off
#pragma HLS LOOP_TRIPCOUNT min=TC max=TC
#pragma HLS pipeline II=1
            // clang-format on

            // Read input stream
            pxl_pack_in_U1 = (XF_SNAME(WORDWIDTH_SRC2))(U1_in.read(read_ptr));
            pxl_pack_in_U2 = (XF_SNAME(WORDWIDTH_SRC2))(U2_in.read(read_ptr));
            read_ptr++;

        ProcLoop:
            for (int bit_in = 0, bit_out = 0; bit_in < ((FLOW_BW << XF_BITSHIFT(NPC)));
                 bit_in += FLOW_BW, bit_out += FLOW_BW) {
// clang-format off
#pragma HLS unroll
                // clang-format on
                // Extract pixels
                XF_PTNAME(DEPTH_SRC2) U1_pxl = pxl_pack_in_U1.range(bit_in + FLOW_BW - 1, bit_in);
                XF_PTNAME(DEPTH_SRC2) U2_pxl = pxl_pack_in_U2.range(bit_in + FLOW_BW - 1, bit_in);

                //*********  Computation:
                //*********  out = in * scale
                ap_int<INT_BW> U1s = U1_pxl * scale;
                ap_int<INT_BW> U2s = U2_pxl * scale;

                // round & saturation
                ap_int<FLOW_BW> U1s_out = rounding_n_saturation<INT_BW, FLOW_BW, FLOW_FBITS * 2, FLOW_FBITS>(U1s);
                ap_int<FLOW_BW> U2s_out = rounding_n_saturation<INT_BW, FLOW_BW, FLOW_FBITS * 2, FLOW_FBITS>(U2s);
                pxl_pack_out_U1.range(bit_out + FLOW_BW - 1, bit_out) = U1s_out;
                pxl_pack_out_U2.range(bit_out + FLOW_BW - 1, bit_out) = U2s_out;
            }
            // writing into output stream
            U1_out.write(write_ptr, (XF_SNAME(WORDWIDTH_DST))pxl_pack_out_U1);
            U2_out.write(write_ptr, (XF_SNAME(WORDWIDTH_DST))pxl_pack_out_U2);
            write_ptr++;
        }
    }
    return 0;
} // multiplyU

template <int FLOW_T,
          int OUT_T,
          int ROWS,
          int COLS,
          int NPC,
          int XFCVDEPTH_U1 = _XFCVDEPTH_DEFAULT,
          int XFCVDEPTH_U2 = _XFCVDEPTH_DEFAULT,
          int XFCVDEPTH_U12 = _XFCVDEPTH_DEFAULT,
          int FLOW_FBITS>
int mergeU(xf::cv::Mat<FLOW_T, ROWS, COLS, NPC, XFCVDEPTH_U1>& U1,
           xf::cv::Mat<FLOW_T, ROWS, COLS, NPC, XFCVDEPTH_U2>& U2,
           xf::cv::Mat<OUT_T, ROWS, COLS, NPC, XFCVDEPTH_U12>& U12,
           unsigned short height,
           unsigned short width) {
// clang-format off
#pragma HLS inline off
    // clang-format on
    enum {
        PLANES = XF_CHANNELS(FLOW_T, NPC),
        DEPTH_SRC2 = XF_DEPTH(FLOW_T, NPC),
        DEPTH_DST = XF_DEPTH(FLOW_T, NPC),
        WORDWIDTH_SRC2 = XF_WORDWIDTH(FLOW_T, NPC),
        WORDWIDTH_DST = XF_WORDWIDTH(FLOW_T, NPC),
        TC = COLS >> XF_BITSHIFT(NPC),
        FLOW_BW = XF_PIXELWIDTH(FLOW_T, NPC) / PLANES,
        INT_BW = 2 * FLOW_BW
    };

    ap_uint<64 * NPC> pxl_pack_out;
    XF_SNAME(WORDWIDTH_SRC2) pxl_pack_in_U1, pxl_pack_in_U2;

    int read_ptr = 0;
    int write_ptr = 0;

RowColLoop:
    for (int i = 0; i < height * width; i++) {
// clang-format off
#pragma HLS LOOP_TRIPCOUNT min=ROWS*TC max=ROWS*TC
#pragma HLS pipeline II=1
        // clang-format on

        // Read input stream
        pxl_pack_in_U1 = (XF_SNAME(WORDWIDTH_SRC2))(U1.read(read_ptr));
        pxl_pack_in_U2 = (XF_SNAME(WORDWIDTH_SRC2))(U2.read(read_ptr));
        read_ptr++;

    ProcLoop:
        for (int n = 0, bit_in = 0, bit_out = 0; n < NPC; n++, bit_in += FLOW_BW, bit_out += 64) {
// clang-format off
#pragma HLS unroll
            // clang-format on
            // Extract pixels
            XF_PTNAME(DEPTH_SRC2) U1_pxl = pxl_pack_in_U1.range(bit_in + FLOW_BW - 1, bit_in);
            XF_PTNAME(DEPTH_SRC2) U2_pxl = pxl_pack_in_U2.range(bit_in + FLOW_BW - 1, bit_in);

            float U1_val = (float)U1_pxl / (1 << FLOW_FBITS);
            float U2_val = (float)U2_pxl / (1 << FLOW_FBITS);

            ap_uint<32>* U1_int = (ap_uint<32>*)(&U1_val);
            ap_uint<32>* U2_int = (ap_uint<32>*)(&U2_val);

            ap_uint<64> merge;
            merge.range(31, 0) = *U1_int;
            merge.range(63, 32) = *U2_int;

            pxl_pack_out.range(bit_out + 64 - 1, bit_out) = merge;
        }
        // writing into output stream
        U12.write(write_ptr++, pxl_pack_out);
    }
    return 0;
} // mergeU

template <int IN_T,
          int OUT_T,
          int ROWS,
          int COLS,
          int NPC,
          int XFCVDEPTH_in = _XFCVDEPTH_DEFAULT,
          int XFCVDEPTH_out = _XFCVDEPTH_DEFAULT,
          int IN_FBITS,
          int OUT_FBITS>
int ConvertType(xf::cv::Mat<IN_T, ROWS, COLS, NPC, XFCVDEPTH_in>& in,
                xf::cv::Mat<OUT_T, ROWS, COLS, NPC, XFCVDEPTH_out>& out,
                unsigned short height,
                unsigned short width_ncpr) {
// clang-format off
#pragma HLS inline off
    // clang-format on

    enum {
        DEPTH_SRC = XF_DEPTH(IN_T, NPC),
        DEPTH_DST = XF_DEPTH(OUT_T, NPC),
        WORDWIDTH_SRC = XF_WORDWIDTH(IN_T, NPC),
        WORDWIDTH_DST = XF_WORDWIDTH(OUT_T, NPC),
        TC = COLS >> XF_BITSHIFT(NPC),
        IN_BW = XF_PIXELWIDTH(IN_T, NPC),
        OUT_BW = XF_PIXELWIDTH(OUT_T, NPC)
    };

    XF_SNAME(WORDWIDTH_DST) pxl_pack_out;
    XF_SNAME(WORDWIDTH_SRC) pxl_pack_in;

    int read_ptr = 0;
    int write_ptr = 0;
RowLoop:
    for (short i = 0; i < height; i++) {
// clang-format off
#pragma HLS LOOP_TRIPCOUNT min=ROWS max=ROWS
    // clang-format on
    ColLoop:
        for (short j = 0; j < width_ncpr; j++) {
// clang-format off
#pragma HLS LOOP_TRIPCOUNT min=TC max=TC
#pragma HLS pipeline II=1
            // clang-format on

            // Read input stream
            pxl_pack_in = (XF_SNAME(WORDWIDTH_SRC))(in.read(read_ptr));
            read_ptr++;

        ProcLoop:
            for (int npc_cnt = 0, bit_in = 0, bit_out = 0; npc_cnt < NPC;
                 npc_cnt++, bit_in += IN_BW, bit_out += OUT_BW) {
// clang-format off
#pragma HLS unroll
                // clang-format on
                // Extract pixels
                XF_PTNAME(DEPTH_SRC) in_pxl = pxl_pack_in.range(bit_in + IN_BW - 1, bit_in);
                XF_PTNAME(DEPTH_DST) out_pxl;
                if (IN_FBITS > OUT_FBITS)
                    out_pxl = ((XF_PTNAME(DEPTH_DST))in_pxl) >> (IN_FBITS - OUT_FBITS);
                else
                    out_pxl = ((XF_PTNAME(DEPTH_DST))in_pxl) << (OUT_FBITS - IN_FBITS);

                pxl_pack_out.range(bit_out + OUT_BW - 1, bit_out) = out_pxl;
            }
            // writing into output stream
            out.write(write_ptr, (XF_SNAME(WORDWIDTH_DST))pxl_pack_out);
            write_ptr++;
        }
    }
    return 0;
} // ConvertType

template <int FLOW_PTRWIDTH = 16, int FLOW_T, int NPC>
void initU(ap_uint<FLOW_PTRWIDTH>* _U1, ap_uint<FLOW_PTRWIDTH>* _U2, int height, int width) {
// clang-format off
#pragma HLS inline off
    // clang-format on

    enum { FLOW_BW = XF_PIXELWIDTH(FLOW_T, NPC) };

    int loop_bound = (height * width + (FLOW_PTRWIDTH / FLOW_BW) - 1) / (FLOW_PTRWIDTH / FLOW_BW);

    for (int idx = 0; idx < loop_bound; idx++) {
// clang-format off
#pragma HLS LOOP_TRIPCOUNT min=52*91 max=52*91
#pragma HLS pipeline II=1
        // clang-format on

        _U1[idx] = 0;
        _U2[idx] = 0;
    }

} // initU

// ======================================================================================

// Some clean up for macros used
#undef _GENERIC_REMAP_TPLT_DEC
#undef _GENERIC_REMAP_TPLT
#undef _GENERIC_REMAP

#undef CH_IDX_T
#undef K_ROW_IDX_T
#undef K_COL_IDX_T
#undef COL_IDX_T
#undef ROW_IDX_T
#undef SIZE_IDX_T
#undef FLOW_VAL_T
#undef FLOW_BITWIDTH
#undef FLOW_FBITS
#undef BICUBIC_FILTER

#undef _NPPC
#undef _NPPC_SHIFT_VAL
#undef _ECPR
#undef _NP_IN_PREV
#undef _DST_PIX_WIDTH

} // namespace cv
} // namespace xf

#endif
