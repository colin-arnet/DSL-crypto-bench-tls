{
    "schema": "vitis_libraries_api_list_schema-1.0",
    "api_list": [
        {
            "api_name": "xf::graph::bfs",
            "spec": {
                "schema": "vitis_libraries_api_list_schema-1.0",
                "api_name": "xf::graph::bfs",
                "display_name": "bfs",
                "brief": "bfs Implement the directed graph traversal by breath-first search algorithm",
                "target_domain": "",
                "header_file_name": [
                    "bfs.hpp"
                ],
                "search_paths": [
                    "L2/include/hw"
                ],
                "instance": "function",
                "parameters": [
                    {
                        "name": "MAXOUTDEGREE",
                        "type": "int",
                        "description": "the maximum outdegree of input graphs. Large value will result in more URAM usage."
                    }
                ],
                "ports": [
                    {
                        "name": "srcID",
                        "direction": "",
                        "type": "const int"
                    },
                    {
                        "name": "numVertex",
                        "direction": "",
                        "type": "const int"
                    },
                    {
                        "name": "indexCSR",
                        "direction": "",
                        "type": "ap_uint< 512 > *offsetCSR, ap_uint< 512 > *"
                    },
                    {
                        "name": "offsetCSR",
                        "direction": "",
                        "type": "ap_uint< 512 > *queue512, ap_uint< 32 > *queue32, ap_uint< 512 > *color512, ap_uint< 32 > *dtime, ap_uint< 32 > *ftime, ap_uint< 32 > *pred, ap_uint< 32 > *distance"
                    },
                    {
                        "name": "color512",
                        "direction": "",
                        "type": "ap_uint< 512 > *queue512, ap_uint< 32 > *queue32, ap_uint< 512 > *"
                    },
                    {
                        "name": "queue32",
                        "direction": "",
                        "type": "ap_uint< 32 > *dtime, ap_uint< 32 > *ftime, ap_uint< 32 > *pred, ap_uint< 32 > *distance"
                    },
                    {
                        "name": "dtime",
                        "direction": "",
                        "type": "ap_uint< 32 > *"
                    },
                    {
                        "name": "ftime",
                        "direction": "",
                        "type": "ap_uint< 32 > *"
                    },
                    {
                        "name": "pred",
                        "direction": "",
                        "type": "ap_uint< 32 > *"
                    },
                    {
                        "name": "distance",
                        "direction": "",
                        "type": "ap_uint< 32 > *"
                    }
                ]
            }
        },
        {
            "api_name": "xf::graph::calcuDegree",
            "spec": {
                "schema": "vitis_libraries_api_list_schema-1.0",
                "api_name": "xf::graph::calcuDegree",
                "display_name": "calcuDegree",
                "brief": "calculate degree algorithm is implemented",
                "target_domain": "",
                "header_file_name": [
                    "calc_degree.hpp"
                ],
                "search_paths": [
                    "L2/include/hw"
                ],
                "instance": "function",
                "parameters": [
                    {
                        "name": "MAXVERTEX",
                        "type": "int",
                        "description": "CSC/CSR data vertex(offset) array maxsize"
                    },
                    {
                        "name": "MAXEDGE",
                        "type": "int",
                        "description": "CSC/CSR data edge(indice) array maxsize"
                    },
                    {
                        "name": "LOG2CACHEDEPTH",
                        "type": "int",
                        "description": "cache depth in Binary, the cache onchip memory is 512 bit x uramRow"
                    },
                    {
                        "name": "LOG2DATAPERCACHELINE",
                        "type": "int",
                        "description": "number of data in one 512bit in Binary, for double, it's 3, for float, it's 4"
                    },
                    {
                        "name": "RAMTYPE",
                        "type": "int",
                        "description": "flag to tell use URAM LUTRAM or BRAM, 0 : LUTRAM, 1 : URAM, 2 : BRAM"
                    }
                ],
                "ports": [
                    {
                        "name": "numVertex",
                        "direction": "",
                        "type": "int"
                    },
                    {
                        "name": "numEdge",
                        "direction": "",
                        "type": "int"
                    },
                    {
                        "name": "index",
                        "direction": "",
                        "type": "ap_uint< 512 > *"
                    },
                    {
                        "name": "degree",
                        "direction": "",
                        "type": "ap_uint< 512 > *"
                    }
                ]
            }
        },
        {
            "api_name": "xf::graph::calcuWeightedDegree",
            "spec": {
                "schema": "vitis_libraries_api_list_schema-1.0",
                "api_name": "xf::graph::calcuWeightedDegree",
                "display_name": "calcuWeightedDegree",
                "brief": "calculate weighted degree algorithm is implemented",
                "target_domain": "",
                "header_file_name": [
                    "calc_degree.hpp"
                ],
                "search_paths": [
                    "L2/include/hw"
                ],
                "instance": "function",
                "parameters": [
                    {
                        "name": "MAXVERTEX",
                        "type": "int",
                        "description": "CSC/CSR data vertex(offset) array maxsize"
                    },
                    {
                        "name": "MAXEDGE",
                        "type": "int",
                        "description": "CSC/CSR data edge(indice) array maxsize"
                    },
                    {
                        "name": "LOG2CACHEDEPTH",
                        "type": "int",
                        "description": "cache depth in Binary, the cache onchip memory is 512 bit x uramRow"
                    },
                    {
                        "name": "LOG2DATAPERCACHELINE",
                        "type": "int",
                        "description": "number of data in one 512bit in Binary, for double, it's 3, for float, it's 4"
                    },
                    {
                        "name": "RAMTYPE",
                        "type": "int",
                        "description": "flag to tell use URAM LUTRAM or BRAM, 0 : LUTRAM, 1 : URAM, 2 : BRAM"
                    }
                ],
                "ports": [
                    {
                        "name": "numVertex",
                        "direction": "",
                        "type": "int"
                    },
                    {
                        "name": "numEdge",
                        "direction": "",
                        "type": "int"
                    },
                    {
                        "name": "index",
                        "direction": "",
                        "type": "ap_uint< 512 >[MAXEDGE],"
                    },
                    {
                        "name": "weight",
                        "direction": "",
                        "type": "ap_uint< 512 >[MAXEDGE],"
                    },
                    {
                        "name": "degree",
                        "direction": "",
                        "type": "ap_uint< 512 >"
                    }
                ]
            }
        },
        {
            "api_name": "xf::graph::connectedComponents",
            "spec": {
                "schema": "vitis_libraries_api_list_schema-1.0",
                "api_name": "xf::graph::connectedComponents",
                "display_name": "connectedComponents",
                "brief": "connectedComponents Compute the connected component membership of each vertex only for undirected graph",
                "target_domain": "",
                "header_file_name": [
                    "connected_components.hpp"
                ],
                "search_paths": [
                    "L2/include/hw"
                ],
                "instance": "function",
                "parameters": [
                    {
                        "name": "MAXVERTEX",
                        "type": "int",
                        "description": "CSC/CSR data vertex(offset) array maxsize"
                    },
                    {
                        "name": "MAXEDGE",
                        "type": "int",
                        "description": "CSC/CSR data edge(indice) array maxsize"
                    },
                    {
                        "name": "LOG2CACHEDEPTH",
                        "type": "int",
                        "description": "cache depth in Binary, the cache onchip memory is 512 bit x uramRow"
                    },
                    {
                        "name": "LOG2DATAPERCACHELINE",
                        "type": "int",
                        "description": "The log2 of number of data in each cache line (512bit), for double, it's 3, for float, it's 4"
                    },
                    {
                        "name": "RAMTYPE",
                        "type": "int",
                        "description": "flag to tell use URAM LUTRAM or BRAM, 0 : LUTRAM, 1 : URAM, 2 : BRAM"
                    },
                    {
                        "name": "MAXOUTDEGREE",
                        "type": "int",
                        "description": "the max sum of indegree and outdegree of the input graph supported. Large value will result in more URAM usage"
                    }
                ],
                "ports": [
                    {
                        "name": "numEdge",
                        "direction": "",
                        "type": "const int"
                    },
                    {
                        "name": "numVertex",
                        "direction": "",
                        "type": "const int"
                    },
                    {
                        "name": "indexCSR",
                        "direction": "",
                        "type": "ap_uint< 512 > *offsetCSR, ap_uint< 512 > *"
                    },
                    {
                        "name": "offsetCSR",
                        "direction": "",
                        "type": "ap_uint< 512 > *offsetCSC, ap_uint< 512 > *indexCSC512, ap_uint< 32 > *indexCSC32, ap_uint< 512 > *offsetCSCTmp1, ap_uint< 512 > *offsetCSCTmp2, ap_uint< 512 > *queue512, ap_uint< 32 > *queue32, ap_uint< 512 > *component512, ap_uint< 32 > *component32"
                    },
                    {
                        "name": "indexCSC512",
                        "direction": "",
                        "type": "ap_uint< 512 > *offsetCSC, ap_uint< 512 > *"
                    },
                    {
                        "name": "indexCSC32",
                        "direction": "",
                        "type": "ap_uint< 32 > *"
                    },
                    {
                        "name": "offsetCSC",
                        "direction": "",
                        "type": "ap_uint< 512 > *Tmp2,"
                    },
                    {
                        "name": "offsetCSCTmp1",
                        "direction": "",
                        "type": "ap_uint< 512 > *queue512, ap_uint< 32 > *queue32, ap_uint< 512 > *component512, ap_uint< 32 > *component3"
                    },
                    {
                        "name": "offsetCSCTmp2",
                        "direction": "",
                        "type": "ap_uint< 512 > *queue512, ap_uint< 32 > *queue32, ap_uint< 512 > *component512, ap_uint< 32 > *component3"
                    },
                    {
                        "name": "queue32",
                        "direction": "",
                        "type": "ap_uint< 512 > *queue512, ap_uint< 32 > *"
                    },
                    {
                        "name": "component512",
                        "direction": "",
                        "type": "ap_uint< 512 > *"
                    },
                    {
                        "name": "component32",
                        "direction": "",
                        "type": "ap_uint< 32 > *component3"
                    }
                ]
            }
        },
        {
            "api_name": "xf::graph::convertCsrCsc",
            "spec": {
                "schema": "vitis_libraries_api_list_schema-1.0",
                "api_name": "xf::graph::convertCsrCsc",
                "display_name": "convertCsrCsc",
                "brief": "convert Csr Csc algorithm is implemented",
                "target_domain": "",
                "header_file_name": [
                    "convert_csr_csc.hpp"
                ],
                "search_paths": [
                    "L2/include/hw"
                ],
                "instance": "function",
                "parameters": [
                    {
                        "name": "DT",
                        "type": "typename",
                        "description": "data type of the input and output, [float, double]"
                    },
                    {
                        "name": "MAXVERTEX",
                        "type": "int",
                        "description": "CSC/CSR data vertex(offset) array maxsize"
                    },
                    {
                        "name": "MAXEDGE",
                        "type": "int",
                        "description": "CSC/CSR data edge(indice) array maxsize"
                    },
                    {
                        "name": "LOG2CACHEDEPTH",
                        "type": "int",
                        "description": "cache depth in Binary, the cache onchip memory is 512 bit x uramRow"
                    },
                    {
                        "name": "LOG2DATAPERCACHELINE",
                        "type": "int",
                        "description": "number of data in one 512bit in Binary, for double, it's 3, for float, it's 4"
                    },
                    {
                        "name": "RAMTYPE",
                        "type": "int",
                        "description": "flag to tell use URAM LUTRAM or BRAM, 0 : LUTRAM, 1 : URAM, 2 : BRAM"
                    }
                ],
                "ports": [
                    {
                        "name": "numEdge",
                        "direction": "",
                        "type": "int"
                    },
                    {
                        "name": "numVertex",
                        "direction": "",
                        "type": "int"
                    },
                    {
                        "name": "indexIn",
                        "direction": "",
                        "type": "ap_uint< 512 > *offsetIn, ap_uint< 512 > *"
                    },
                    {
                        "name": "offsetIn",
                        "direction": "",
                        "type": "ap_uint< 512 > *offsetOut, DT *indexOut, ap_uint< 512 > *offsetTmp0, ap_uint< 512 > *offsetTmp1"
                    },
                    {
                        "name": "indexOut",
                        "direction": "",
                        "type": "ap_uint< 512 > *offsetOut, DT *"
                    },
                    {
                        "name": "offsetOut",
                        "direction": "",
                        "type": "ap_uint< 512 > *offsetTmp0, ap_uint< 512 > *offsetTmp1"
                    },
                    {
                        "name": "offsetTmp0",
                        "direction": "",
                        "type": "ap_uint< 512 > *"
                    },
                    {
                        "name": "offsetTmp1",
                        "direction": "",
                        "type": "ap_uint< 512 > *"
                    }
                ]
            }
        },
        {
            "api_name": "xf::graph::denseSimilarityCoeffs",
            "spec": {
                "schema": "vitis_libraries_api_list_schema-1.0",
                "api_name": "xf::graph::denseSimilarityCoeffs",
                "display_name": "denseSimilarityCoeffs",
                "brief": "similarity function for dense graph. It support both Jaccard and Cosine Similarity.",
                "target_domain": "",
                "header_file_name": [
                    "dense_similarity_coeffs.hpp"
                ],
                "search_paths": [
                    "L2/include/hw"
                ],
                "instance": "function",
                "parameters": [
                    {
                        "name": "CHNM",
                        "type": "int",
                        "description": "the channel number of input data"
                    },
                    {
                        "name": "WData",
                        "type": "int",
                        "description": "the width of input data"
                    },
                    {
                        "name": "RAM_SZ",
                        "type": "int",
                        "description": "the log size of internal URAM"
                    },
                    {
                        "name": "MAXK",
                        "type": "int",
                        "description": "the max supporting number of insert sort function"
                    }
                ],
                "ports": [
                    {
                        "name": "config",
                        "direction": "",
                        "type": "ap_int< 32 > *"
                    },
                    {
                        "name": "sourceWeight",
                        "direction": "",
                        "type": "ap_int< 32 > *"
                    },
                    {
                        "name": "sourceCoeffs",
                        "direction": "",
                        "type": "ap_int< 32 > *"
                    },
                    {
                        "name": "dataIn00",
                        "direction": "",
                        "type": "ap_int< 32 *CHNM > *"
                    },
                    {
                        "name": "dataIn01",
                        "direction": "",
                        "type": "ap_int< 32 *CHNM > *"
                    },
                    {
                        "name": "dataIn02",
                        "direction": "",
                        "type": "ap_int< 32 *CHNM > *"
                    },
                    {
                        "name": "dataIn03",
                        "direction": "",
                        "type": "ap_int< 32 *CHNM > *"
                    },
                    {
                        "name": "dataIn10",
                        "direction": "",
                        "type": "ap_int< 32 *CHNM > *"
                    },
                    {
                        "name": "dataIn11",
                        "direction": "",
                        "type": "ap_int< 32 *CHNM > *"
                    },
                    {
                        "name": "dataIn12",
                        "direction": "",
                        "type": "ap_int< 32 *CHNM > *"
                    },
                    {
                        "name": "dataIn13",
                        "direction": "",
                        "type": "ap_int< 32 *CHNM > *"
                    },
                    {
                        "name": "dataIn20",
                        "direction": "",
                        "type": "ap_int< 32 *CHNM > *"
                    },
                    {
                        "name": "dataIn21",
                        "direction": "",
                        "type": "ap_int< 32 *CHNM > *"
                    },
                    {
                        "name": "dataIn22",
                        "direction": "",
                        "type": "ap_int< 32 *CHNM > *"
                    },
                    {
                        "name": "dataIn23",
                        "direction": "",
                        "type": "ap_int< 32 *CHNM > *"
                    },
                    {
                        "name": "rowID",
                        "direction": "",
                        "type": "ap_int< 32 > *resultID, float *similarity"
                    },
                    {
                        "name": "similarity",
                        "direction": "",
                        "type": "ap_int< 32 > *resultID, float *"
                    }
                ]
            }
        },
        {
            "api_name": "xf::graph::estimated_diameter",
            "spec": {
                "schema": "vitis_libraries_api_list_schema-1.0",
                "api_name": "xf::graph::estimated_diameter",
                "display_name": "estimated_diameter",
                "brief": "diameter estimate based on the sssp algorithm",
                "target_domain": "",
                "header_file_name": [
                    "diameter.hpp"
                ],
                "search_paths": [
                    "L2/include/hw"
                ],
                "instance": "function",
                "parameters": [],
                "ports": [
                    {
                        "name": "numVert",
                        "direction": "",
                        "type": "unsigned"
                    },
                    {
                        "name": "numEdge",
                        "direction": "",
                        "type": "unsigned"
                    },
                    {
                        "name": "offset",
                        "direction": "",
                        "type": "unsigned *"
                    },
                    {
                        "name": "column",
                        "direction": "",
                        "type": "unsigned *"
                    },
                    {
                        "name": "weight",
                        "direction": "",
                        "type": "float *"
                    },
                    {
                        "name": "max_distance",
                        "direction": "",
                        "type": "float *max_dist, unsigned *src, unsigned *des"
                    },
                    {
                        "name": "src",
                        "direction": "",
                        "type": "float *max_dist, unsigned *"
                    },
                    {
                        "name": "des",
                        "direction": "",
                        "type": "unsigned *"
                    }
                ]
            }
        },
        {
            "api_name": "xf::graph::labelPropagation",
            "spec": {
                "schema": "vitis_libraries_api_list_schema-1.0",
                "api_name": "xf::graph::labelPropagation",
                "display_name": "labelPropagation",
                "brief": "labelPropagation the label propagation algorithm is implemented",
                "target_domain": "",
                "header_file_name": [
                    "label_propagation.hpp"
                ],
                "search_paths": [
                    "L2/include/hw"
                ],
                "instance": "function",
                "parameters": [],
                "ports": [
                    {
                        "name": "numEdge",
                        "direction": "",
                        "type": "int"
                    },
                    {
                        "name": "numVertex",
                        "direction": "",
                        "type": "int"
                    },
                    {
                        "name": "numIter",
                        "direction": "",
                        "type": "int"
                    },
                    {
                        "name": "indexCSR",
                        "direction": "",
                        "type": "ap_uint< 512 > *offsetCSR, ap_uint< 512 > *"
                    },
                    {
                        "name": "offsetCSR",
                        "direction": "",
                        "type": "ap_uint< 512 > *offsetCSC, ap_uint< 512 > *indexCSC, ap_uint< 512 > *pingHashBuf, ap_uint< 512 > *pongHashBuf, ap_uint< 512 > *labelPing, ap_uint< 512 > *labelPong"
                    },
                    {
                        "name": "indexCSC",
                        "direction": "",
                        "type": "ap_uint< 512 > *offsetCSC, ap_uint< 512 > *"
                    },
                    {
                        "name": "offsetCSC",
                        "direction": "",
                        "type": "ap_uint< 512 > *pingHashBuf, ap_uint< 512 > *pongHashBuf, ap_uint< 512 > *labelPing, ap_uint< 512 > *labelPong"
                    },
                    {
                        "name": "labelPing",
                        "direction": "",
                        "type": "ap_uint< 512 > *pingHashBuf, ap_uint< 512 > *pongHashBuf, ap_uint< 512 > *"
                    },
                    {
                        "name": "labelPong",
                        "direction": "",
                        "type": "ap_uint< 512 > *"
                    }
                ]
            }
        },
        {
            "api_name": "xf::graph::kernelLouvainTop",
            "spec": {
                "schema": "vitis_libraries_api_list_schema-1.0",
                "api_name": "xf::graph::kernelLouvainTop",
                "display_name": "kernelLouvainTop",
                "brief": "Level2: louvain kernel implement.",
                "target_domain": "",
                "header_file_name": [
                    "louvain_coloring.hpp"
                ],
                "search_paths": [
                    "L2/include/hw"
                ],
                "instance": "function",
                "parameters": [],
                "ports": [
                    {
                        "name": "config0",
                        "direction": "",
                        "type": "int64_t *"
                    },
                    {
                        "name": "config1",
                        "direction": "",
                        "type": "DWEIGHT *"
                    },
                    {
                        "name": "offsets",
                        "direction": "",
                        "type": "ap_uint< CSRWIDTHS > *Dup,"
                    },
                    {
                        "name": "indices",
                        "direction": "",
                        "type": "ap_uint< CSRWIDTHS > *Dup,"
                    },
                    {
                        "name": "weights",
                        "direction": "",
                        "type": "ap_uint< 8 > *flag, ap_uint< 8 > *flagUpda"
                    },
                    {
                        "name": "colorAxi",
                        "direction": "",
                        "type": "ap_uint< 8 > *flag, ap_uint< 8 > *flagUpda"
                    },
                    {
                        "name": "colorInx",
                        "direction": "",
                        "type": "ap_uint< 8 > *flag, ap_uint< 8 > *flagUpda"
                    },
                    {
                        "name": "cidPrev",
                        "direction": "",
                        "type": "ap_uint< 8 > *flag, ap_uint< 8 > *flagUpda"
                    },
                    {
                        "name": "cidSizePrev",
                        "direction": "",
                        "type": "ap_uint< 8 > *flag, ap_uint< 8 > *flagUpda"
                    },
                    {
                        "name": "totPrev",
                        "direction": "",
                        "type": "ap_uint< 8 > *flag, ap_uint< 8 > *flagUpda"
                    },
                    {
                        "name": "cidCurr",
                        "direction": "",
                        "type": "ap_uint< 8 > *flag, ap_uint< 8 > *flagUpda"
                    },
                    {
                        "name": "cidSizeCurr",
                        "direction": "",
                        "type": "ap_uint< 8 > *flag, ap_uint< 8 > *flagUpda"
                    },
                    {
                        "name": "totCurr",
                        "direction": "",
                        "type": "ap_uint< 8 > *flag, ap_uint< 8 > *flagUpda"
                    },
                    {
                        "name": "cidSizeUpdate",
                        "direction": "",
                        "type": "ap_uint< 8 > *flag, ap_uint< 8 > *flagUpda"
                    },
                    {
                        "name": "totUpdate",
                        "direction": "",
                        "type": "ap_uint< 8 > *flag, ap_uint< 8 > *flagUpda"
                    },
                    {
                        "name": "cWeight",
                        "direction": "",
                        "type": "ap_uint< 8 > *flag, ap_uint< 8 > *flagUpda"
                    },
                    {
                        "name": "offsetsDup",
                        "direction": "",
                        "type": "ap_uint< 8 > *flag, ap_uint< 8 > *flagUpda"
                    },
                    {
                        "name": "indicesDup",
                        "direction": "",
                        "type": "ap_uint< 8 > *flag, ap_uint< 8 > *flagUpda"
                    },
                    {
                        "name": "flag",
                        "direction": "",
                        "type": "ap_uint< 8 > *"
                    },
                    {
                        "name": "flagUpdate",
                        "direction": "",
                        "type": "Upda"
                    }
                ]
            }
        },
        {
            "api_name": "xf::graph::mst",
            "spec": {
                "schema": "vitis_libraries_api_list_schema-1.0",
                "api_name": "xf::graph::mst",
                "display_name": "mst",
                "brief": "minimum spanning tree based on the Prim algorithm",
                "target_domain": "",
                "header_file_name": [
                    "mst.hpp"
                ],
                "search_paths": [
                    "L2/include/hw"
                ],
                "instance": "function",
                "parameters": [],
                "ports": [
                    {
                        "name": "allVert",
                        "direction": "",
                        "type": "unsigned int"
                    },
                    {
                        "name": "allEdge",
                        "direction": "",
                        "type": "unsigned int"
                    },
                    {
                        "name": "source",
                        "direction": "",
                        "type": "unsigned int"
                    },
                    {
                        "name": "offset",
                        "direction": "",
                        "type": "unsigned int *"
                    },
                    {
                        "name": "column",
                        "direction": "",
                        "type": "unsigned int *"
                    },
                    {
                        "name": "weight",
                        "direction": "",
                        "type": "float *"
                    },
                    {
                        "name": "mstRes",
                        "direction": "",
                        "type": "unsigned *"
                    }
                ]
            }
        },
        {
            "api_name": "xf::graph::pageRankTop",
            "spec": {
                "schema": "vitis_libraries_api_list_schema-1.0",
                "api_name": "xf::graph::pageRankTop",
                "display_name": "pageRankTop",
                "brief": "pagerank algorithm is implemented",
                "target_domain": "",
                "header_file_name": [
                    "pagerank.hpp"
                ],
                "search_paths": [
                    "L2/include/hw"
                ],
                "instance": "function",
                "parameters": [
                    {
                        "name": "T",
                        "type": "typename",
                        "description": "date type of pagerank, double or float"
                    },
                    {
                        "name": "MAXVERTEX",
                        "type": "int",
                        "description": "CSC/CSR data vertex(offset) array maxsize"
                    },
                    {
                        "name": "MAXEDGE",
                        "type": "int",
                        "description": "CSC/CSR data edge(indice) array maxsize"
                    },
                    {
                        "name": "LOG2UNROLL",
                        "type": "int",
                        "description": "log2 of unroll number, due to DDR limit, best LOG2UNROLL is 3"
                    },
                    {
                        "name": "WIDTHOR",
                        "type": "int",
                        "description": "order array bandwidth, it's 256 in our case"
                    },
                    {
                        "name": "LOG2CACHEDEPTH",
                        "type": "int",
                        "description": "log2(cache depth), the onchip memory for cache is 512 bit x CACHEDEPTH (512 bit x 2^LOG2CACHEDEPTH)"
                    },
                    {
                        "name": "LOG2DATAPERCACHELINECORE",
                        "type": "int",
                        "description": "param for module pageRankCore, log2 of number of data in one 512bit (64 byte), for double, it's log2(64/sizeof(double)) = 3, for float, it's log2(64/sizeof(float)) = 4"
                    },
                    {
                        "name": "LOG2DATAPERCACHELINEDEGREE",
                        "type": "int",
                        "description": "param for module calduDegree, log2 of number of data in one 512bit (64 byte), for double, it's log2(64/sizeof(double)) = 3, for float, it's log2(64/sizeof(float)) = 4"
                    },
                    {
                        "name": "RAMTYPE",
                        "type": "int",
                        "description": "flag to tell use URAM LUTRAM or BRAM, 0 : LUTRAM, 1 : URAM, 2 : BRAM"
                    }
                ],
                "ports": [
                    {
                        "name": "numVertex",
                        "direction": "",
                        "type": "int"
                    },
                    {
                        "name": "numEdge",
                        "direction": "",
                        "type": "int"
                    },
                    {
                        "name": "degreeCSR",
                        "direction": "",
                        "type": "ap_uint< 512 > *"
                    },
                    {
                        "name": "offsetCSC",
                        "direction": "",
                        "type": "ap_uint< 512 > *"
                    },
                    {
                        "name": "indexCSC",
                        "direction": "",
                        "type": "ap_uint< 512 > *"
                    },
                    {
                        "name": "weightCSC",
                        "direction": "",
                        "type": "ap_uint< 512 > *"
                    },
                    {
                        "name": "cntValFull",
                        "direction": "",
                        "type": "ap_uint< 512 > *"
                    },
                    {
                        "name": "buffPing",
                        "direction": "",
                        "type": "ap_uint< 512 > *"
                    },
                    {
                        "name": "buffPong",
                        "direction": "",
                        "type": "ap_uint< 512 > *"
                    },
                    {
                        "name": "orderUnroll",
                        "direction": "",
                        "type": "ap_uint< WIDTHOR > *"
                    },
                    {
                        "name": "resultInfo",
                        "direction": "",
                        "type": "int *"
                    },
                    {
                        "name": "randomProbability",
                        "direction": "",
                        "type": "T=1.0,"
                    },
                    {
                        "name": "alpha",
                        "direction": "",
                        "type": "T=0.85,"
                    },
                    {
                        "name": "tolerance",
                        "direction": "",
                        "type": "T=1e-4,"
                    },
                    {
                        "name": "numIter",
                        "direction": "",
                        "type": "int"
                    }
                ]
            }
        },
        {
            "api_name": "xf::graph::renumberCore",
            "spec": {
                "schema": "vitis_libraries_api_list_schema-1.0",
                "api_name": "xf::graph::renumberCore",
                "display_name": "renumberCore",
                "brief": "Renumbering recode the categorized graph's table, and it support 64M for input.",
                "target_domain": "",
                "header_file_name": [
                    "renumber.hpp"
                ],
                "search_paths": [
                    "L2/include/hw"
                ],
                "instance": "function",
                "parameters": [],
                "ports": [
                    {
                        "name": "NV",
                        "direction": "",
                        "type": "int32_t"
                    },
                    {
                        "name": "numClusters",
                        "direction": "",
                        "type": "int32_t &"
                    },
                    {
                        "name": "oldCids",
                        "direction": "",
                        "type": "ap_int< (32) > *"
                    },
                    {
                        "name": "mapCid0",
                        "direction": "",
                        "type": "ap_int< (32) > *"
                    },
                    {
                        "name": "mapCid1",
                        "direction": "",
                        "type": "ap_int< (32) > *"
                    },
                    {
                        "name": "newCids",
                        "direction": "",
                        "type": "ap_int< (32) > *"
                    }
                ]
            }
        },
        {
            "api_name": "xf::graph::singleSourceShortestPath",
            "spec": {
                "schema": "vitis_libraries_api_list_schema-1.0",
                "api_name": "xf::graph::singleSourceShortestPath",
                "display_name": "singleSourceShortestPath",
                "brief": "singleSourceShortestPath the single source shortest path algorithm is implemented, the input is the matrix in CSR format.",
                "target_domain": "",
                "header_file_name": [
                    "shortest_path.hpp"
                ],
                "search_paths": [
                    "L2/include/hw"
                ],
                "instance": "function",
                "parameters": [
                    {
                        "name": "WIDTH",
                        "type": "int",
                        "description": "date width of the weight and the result distance"
                    },
                    {
                        "name": "MAXOUTDEGREE",
                        "type": "int",
                        "description": "The max out put degree of the input graph supported. Large max out degree value"
                    }
                ],
                "ports": [
                    {
                        "name": "config",
                        "direction": "",
                        "type": "ap_uint< 32 > *"
                    },
                    {
                        "name": "offsetCSR",
                        "direction": "",
                        "type": "ap_uint< 512 > *"
                    },
                    {
                        "name": "indexCSR",
                        "direction": "",
                        "type": "ap_uint< 512 > *"
                    },
                    {
                        "name": "weightCSR",
                        "direction": "",
                        "type": "ap_uint< 512 > *"
                    },
                    {
                        "name": "queue512",
                        "direction": "",
                        "type": "ap_uint< 512 > *"
                    },
                    {
                        "name": "queue32",
                        "direction": "",
                        "type": "ap_uint< 32 > *"
                    },
                    {
                        "name": "distance512",
                        "direction": "",
                        "type": "ap_uint< 512 > *"
                    },
                    {
                        "name": "distance32",
                        "direction": "",
                        "type": "ap_uint< WIDTH > *"
                    },
                    {
                        "name": "pred512",
                        "direction": "",
                        "type": "ap_uint< 512 > *"
                    },
                    {
                        "name": "pred32",
                        "direction": "",
                        "type": "ap_uint< 32 > *"
                    },
                    {
                        "name": "info",
                        "direction": "",
                        "type": "ap_uint< 8 > *"
                    }
                ]
            }
        },
        {
            "api_name": "xf::graph::stronglyConnectedComponents",
            "spec": {
                "schema": "vitis_libraries_api_list_schema-1.0",
                "api_name": "xf::graph::stronglyConnectedComponents",
                "display_name": "stronglyConnectedComponents",
                "brief": "stronglyConnectedComponents Compute the strongly connected component membership of each vertex only for directed graph, and label each vertex with one value containing the lowest vertex id in the SCC containing that vertex.",
                "target_domain": "",
                "header_file_name": [
                    "strongly_connected_components.hpp"
                ],
                "search_paths": [
                    "L2/include/hw"
                ],
                "instance": "function",
                "parameters": [
                    {
                        "name": "MAXVERTEX",
                        "type": "int",
                        "description": "CSC/CSR data vertex(offset) array maxsize"
                    },
                    {
                        "name": "MAXEDGE",
                        "type": "int",
                        "description": "CSC/CSR data edge(indice) array maxsize"
                    },
                    {
                        "name": "LOG2CACHEDEPTH",
                        "type": "int",
                        "description": "cache depth in Binary, the cache onchip memory is 512 bit x uramRow"
                    },
                    {
                        "name": "LOG2DATAPERCACHELINE",
                        "type": "int",
                        "description": "number of data in one 512bit in Binary, for double, it's 3, for float, it's 4"
                    },
                    {
                        "name": "RAMTYPE",
                        "type": "int",
                        "description": "flag to tell use URAM LUTRAM or BRAM, 0 : LUTRAM, 1 : URAM, 2 : BRAM"
                    },
                    {
                        "name": "MAXOUTDEGREE",
                        "type": "int",
                        "description": "the max indegree or outdegree of the input graph supported. Large value will result in more URAM usage"
                    }
                ],
                "ports": [
                    {
                        "name": "edgeNum",
                        "direction": "",
                        "type": "const int"
                    },
                    {
                        "name": "vertexNum",
                        "direction": "",
                        "type": "const int"
                    },
                    {
                        "name": "indexCSR0",
                        "direction": "",
                        "type": "ap_uint< 512 > *offsetCSR0, ap_uint< 512 > *"
                    },
                    {
                        "name": "offsetCSR0",
                        "direction": "",
                        "type": "ap_uint< 512 > *offsetCSC, ap_uint< 512 > *indxeCSC512, ap_uint< 32 > *indexCSC32, ap_uint< 512 > *offsetCSR1, ap_uint< 512 > *indexCSR1, ap_uint< 512 > *offsetCSCTmp1, ap_uint< 512 > *offsetCSCTmp2, ap_uint< 512 > *colorCSR0512, ap_uint< 32 > *colorCSR032, ap_uint< 32 > *queueCSR0, ap_uint< 512 > *colorCSC512, ap_uint< 32 > *colorCSC32, ap_uint< 32 > *queueCSC, ap_uint< 32 > *queueCSR1, ap_uint< 32 > *component"
                    },
                    {
                        "name": "indxeCSC512",
                        "direction": "",
                        "type": "ap_uint< 512 > *offsetCSC, ap_uint< 512 > *"
                    },
                    {
                        "name": "indexCSC32",
                        "direction": "",
                        "type": "ap_uint< 32 > *"
                    },
                    {
                        "name": "offsetCSC",
                        "direction": "",
                        "type": "ap_uint< 512 > *offsetCSR1, ap_uint< 512 > *indexCSR1, ap_uint< 512 > *Tmp2,"
                    },
                    {
                        "name": "indexCSR1",
                        "direction": "",
                        "type": "ap_uint< 512 > *colorCSR0512, ap_uint< 32 > *colorCSR032, ap_uint< 32 > *queueCSR0, ap_uint< 512 > *colorCSC512, ap_uint< 32 > *colorCSC32, ap_uint< 32 > *queueCSC, ap_uint< 32 > *queueCSR1, ap_uint< 32 > *componen"
                    },
                    {
                        "name": "offsetCSR1",
                        "direction": "",
                        "type": "ap_uint< 512 > *colorCSR0512, ap_uint< 32 > *colorCSR032, ap_uint< 32 > *queueCSR0, ap_uint< 512 > *colorCSC512, ap_uint< 32 > *colorCSC32, ap_uint< 32 > *queueCSC, ap_uint< 32 > *queueCSR1, ap_uint< 32 > *componen"
                    },
                    {
                        "name": "offsetCSCTmp1",
                        "direction": "",
                        "type": "ap_uint< 512 > *colorCSR0512, ap_uint< 32 > *colorCSR032, ap_uint< 32 > *queueCSR0, ap_uint< 512 > *colorCSC512, ap_uint< 32 > *colorCSC32, ap_uint< 32 > *queueCSC, ap_uint< 32 > *queueCSR1, ap_uint< 32 > *componen"
                    },
                    {
                        "name": "offsetCSCTmp2",
                        "direction": "",
                        "type": "ap_uint< 512 > *colorCSR0512, ap_uint< 32 > *colorCSR032, ap_uint< 32 > *queueCSR0, ap_uint< 512 > *colorCSC512, ap_uint< 32 > *colorCSC32, ap_uint< 32 > *queueCSC, ap_uint< 32 > *queueCSR1, ap_uint< 32 > *componen"
                    },
                    {
                        "name": "colorCSR0512",
                        "direction": "",
                        "type": "ap_uint< 512 > *"
                    },
                    {
                        "name": "colorCSR032",
                        "direction": "",
                        "type": "ap_uint< 32 > *"
                    },
                    {
                        "name": "queueCSR0",
                        "direction": "",
                        "type": "ap_uint< 32 > *"
                    },
                    {
                        "name": "colorCSC512",
                        "direction": "",
                        "type": "ap_uint< 512 > *"
                    },
                    {
                        "name": "colorCSC32",
                        "direction": "",
                        "type": "ap_uint< 32 > *"
                    },
                    {
                        "name": "queueCSC",
                        "direction": "",
                        "type": "ap_uint< 32 > *"
                    },
                    {
                        "name": "queueCSR1",
                        "direction": "",
                        "type": "ap_uint< 32 > *"
                    },
                    {
                        "name": "component",
                        "direction": "",
                        "type": "ap_uint< 32 > *componen"
                    }
                ]
            }
        },
        {
            "api_name": "xf::graph::preProcessData",
            "spec": {
                "schema": "vitis_libraries_api_list_schema-1.0",
                "api_name": "xf::graph::preProcessData",
                "display_name": "preProcessData",
                "brief": "",
                "target_domain": "",
                "header_file_name": [
                    "triangle_count.hpp"
                ],
                "search_paths": [
                    "L2/include/hw"
                ],
                "instance": "function",
                "parameters": [],
                "ports": []
            }
        },
        {
            "api_name": "xf::graph::triangleCount",
            "spec": {
                "schema": "vitis_libraries_api_list_schema-1.0",
                "api_name": "xf::graph::triangleCount",
                "display_name": "triangleCount",
                "brief": "triangleCount the triangle counting algorithm is implemented, the input is the matrix in CSC format.",
                "target_domain": "",
                "header_file_name": [
                    "triangle_count.hpp"
                ],
                "search_paths": [
                    "L2/include/hw"
                ],
                "instance": "function",
                "parameters": [
                    {
                        "name": "LEN",
                        "type": "int",
                        "description": "the depth of stream"
                    },
                    {
                        "name": "ML",
                        "type": "int",
                        "description": "URAM depth in the design"
                    }
                ],
                "ports": [
                    {
                        "name": "numVertex",
                        "direction": "",
                        "type": "int"
                    },
                    {
                        "name": "numEdge",
                        "direction": "",
                        "type": "int"
                    },
                    {
                        "name": "offset0",
                        "direction": "",
                        "type": "ap_uint< 512 > *"
                    },
                    {
                        "name": "index0",
                        "direction": "",
                        "type": "ap_uint< 512 > *"
                    },
                    {
                        "name": "offset1",
                        "direction": "",
                        "type": "ap_uint< 512 > *"
                    },
                    {
                        "name": "index1",
                        "direction": "",
                        "type": "ap_uint< 512 > *"
                    },
                    {
                        "name": "offset2",
                        "direction": "",
                        "type": "ap_uint< 512 > *"
                    },
                    {
                        "name": "index2",
                        "direction": "",
                        "type": "ap_uint< 512 > *"
                    },
                    {
                        "name": "triangles",
                        "direction": "",
                        "type": "uint64_t *"
                    }
                ]
            }
        },
        {
            "api_name": "xf::graph::twoHop",
            "spec": {
                "schema": "vitis_libraries_api_list_schema-1.0",
                "api_name": "xf::graph::twoHop",
                "display_name": "twoHop",
                "brief": "twoHop this API can find the how many 2-hop pathes between two vertices. The input graph is the matrix in CSR format. And a list of src and destination pairs whose 2-hop pathes will be counted.",
                "target_domain": "",
                "header_file_name": [
                    "twoHop.hpp"
                ],
                "search_paths": [
                    "L2/include/hw"
                ],
                "instance": "function",
                "parameters": [],
                "ports": [
                    {
                        "name": "numPairs",
                        "direction": "",
                        "type": "ap_uint< 32 >"
                    },
                    {
                        "name": "pair",
                        "direction": "",
                        "type": "ap_uint< 64 > *"
                    },
                    {
                        "name": "offsetOneHop",
                        "direction": "",
                        "type": "unsigned *"
                    },
                    {
                        "name": "indexOneHop",
                        "direction": "",
                        "type": "unsigned *"
                    },
                    {
                        "name": "offsetTwoHop",
                        "direction": "",
                        "type": "unsigned *"
                    },
                    {
                        "name": "indexTwoop",
                        "direction": "",
                        "type": "unsigned *indexTwoHop, unsigned *cnt_res"
                    },
                    {
                        "name": "cnt_res",
                        "direction": "",
                        "type": "unsigned *indexTwoHop, unsigned *"
                    }
                ]
            }
        }
    ],
    "target_domain": ""
}