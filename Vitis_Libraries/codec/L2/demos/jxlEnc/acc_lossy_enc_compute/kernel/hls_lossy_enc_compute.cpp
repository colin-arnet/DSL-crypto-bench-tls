/*
 * Copyright 2022 Xilinx, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#ifndef HLS_LOSSY_ENC_COMPUTE_CPP
#define HLS_LOSSY_ENC_COMPUTE_CPP

#include "hls_lossy_enc_compute.hpp"

#define FIX

// uint8_t covered_blocks_x_set[6] = {1, 1, 1, 1, 2, 4};
// uint8_t covered_blocks_y_set[6] = {1, 1, 1, 1, 2, 4};
uint8_t strategy_block[6] = {1, 1, 1, 1, 2, 4};

const float inv_matrix_8[3][64] = {{0,
                                    560,
                                    558.510437012,
                                    489.194152832,
                                    428.480621338,
                                    375.302246094,
                                    328.723815918,
                                    287.926147461,
                                    560,
                                    560,
                                    541.309387207,
                                    478.786773682,
                                    421.547454834,
                                    370.409942627,
                                    325.138336182,
                                    285.227325439,
                                    558.510437012,
                                    541.309387207,
                                    500.443756104,
                                    451.472991943,
                                    402.49432373,
                                    356.627593994,
                                    314.88571167,
                                    277.434692383,
                                    489.194152832,
                                    478.786773682,
                                    451.472991943,
                                    414.922729492,
                                    375.302246094,
                                    336.170715332,
                                    299.277435303,
                                    265.364807129,
                                    428.480621338,
                                    421.547454834,
                                    402.49432373,
                                    375.302246094,
                                    344.016448975,
                                    311.624298096,
                                    279.983337402,
                                    250.119842529,
                                    375.302246094,
                                    370.409942627,
                                    356.627593994,
                                    336.170715332,
                                    311.624298096,
                                    285.227325439,
                                    258.613525391,
                                    232.845169067,
                                    328.723815918,
                                    325.138336182,
                                    314.88571167,
                                    299.277435303,
                                    279.983337402,
                                    258.613525391,
                                    236.484725952,
                                    214.558776855,
                                    287.926147461,
                                    285.227325439,
                                    277.434692383,
                                    265.364807129,
                                    250.119842529,
                                    232.845169067,
                                    214.558776855,
                                    196.071777344},
                                   {0,
                                    3150,
                                    3139.25854492,
                                    2648.63037109,
                                    2234.68115234,
                                    1885.42749023,
                                    1590.75805664,
                                    1342.14172363,
                                    3150,
                                    3150,
                                    3015.80957031,
                                    2576.58398438,
                                    2188.41503906,
                                    1853.96557617,
                                    1568.54064941,
                                    1326.02929688,
                                    3139.25854492,
                                    3015.80957031,
                                    2726.99536133,
                                    2389.61645508,
                                    2062.38256836,
                                    1765.96655273,
                                    1505.39343262,
                                    1279.74853516,
                                    2648.63037109,
                                    2576.58398438,
                                    2389.61645508,
                                    2144.4074707,
                                    1885.42749023,
                                    1637.12109375,
                                    1410.37487793,
                                    1208.78967285,
                                    2234.68115234,
                                    2188.41503906,
                                    2062.38256836,
                                    1885.42749023,
                                    1686.28210449,
                                    1485.42663574,
                                    1294.84509277,
                                    1060.59338379,
                                    1885.42749023,
                                    1853.96557617,
                                    1765.96655273,
                                    1637.12109375,
                                    1485.42663574,
                                    1326.02929688,
                                    1169.49206543,
                                    785.963012695,
                                    1590.75805664,
                                    1568.54064941,
                                    1505.39343262,
                                    1410.37487793,
                                    1294.84509277,
                                    1169.49206543,
                                    838.701721191,
                                    558.03729248,
                                    1342.14172363,
                                    1326.02929688,
                                    1279.74853516,
                                    1208.78967285,
                                    1060.59338379,
                                    785.963012695,
                                    558.03729248,
                                    382.654693604},
                                   {0,
                                    293.959503174,
                                    169.469955444,
                                    119.412483215,
                                    85.3333358765,
                                    85.3333358765,
                                    83.5508270264,
                                    58.8718566895,
                                    293.959503174,
                                    233.598114014,
                                    156.027160645,
                                    112.817504883,
                                    85.3333358765,
                                    85.3333358765,
                                    81.1647109985,
                                    57.4251747131,
                                    169.469955444,
                                    156.027160645,
                                    126.80493927,
                                    96.6006240845,
                                    85.3333358765,
                                    85.3333358765,
                                    74.5768890381,
                                    53.3726730347,
                                    119.412483215,
                                    112.817504883,
                                    96.6006240845,
                                    85.3333358765,
                                    85.3333358765,
                                    85.3333358765,
                                    65.2038497925,
                                    47.4551811218,
                                    85.3333358765,
                                    85.3333358765,
                                    85.3333358765,
                                    85.3333358765,
                                    85.3333358765,
                                    72.5535202026,
                                    54.6778106689,
                                    39.419506073,
                                    85.3333358765,
                                    85.3333358765,
                                    85.3333358765,
                                    85.3333358765,
                                    72.5535202026,
                                    57.4251747131,
                                    44.3317565918,
                                    29.2122058868,
                                    83.5508270264,
                                    81.1647109985,
                                    74.5768890381,
                                    65.2038497925,
                                    54.6778106689,
                                    44.3317565918,
                                    31.1723690033,
                                    20.7407989502,
                                    58.8718566895,
                                    57.4251747131,
                                    53.3726730347,
                                    47.4551811218,
                                    39.419506073,
                                    29.2122058868,
                                    20.7407989502,
                                    14.2222824097}};
const float inv_matrix_16[3][256] = {{0,
                                      0,
                                      2384.4128418,
                                      2060.98974609,
                                      1763.60900879,
                                      1491.73779297,
                                      1261.77709961,
                                      1067.26635742,
                                      956.67767334,
                                      861.364074707,
                                      775.546569824,
                                      703.312927246,
                                      644.910888672,
                                      591.358520508,
                                      542.252990723,
                                      501.345214844,
                                      0,
                                      0,
                                      2303.75878906,
                                      2012.80981445,
                                      1727.63220215,
                                      1467.21154785,
                                      1244.41430664,
                                      1054.64306641,
                                      950.44720459,
                                      856.371826172,
                                      771.497619629,
                                      700.552734375,
                                      642.589599609,
                                      589.392944336,
                                      540.578857422,
                                      500.060272217,
                                      2384.4128418,
                                      2303.75878906,
                                      2113.18408203,
                                      1884.00744629,
                                      1629.57141113,
                                      1398.57958984,
                                      1195.04504395,
                                      1031.75708008,
                                      932.273986816,
                                      841.744262695,
                                      759.593811035,
                                      692.403076172,
                                      635.722961426,
                                      583.569458008,
                                      535.612548828,
                                      496.2421875,
                                      2060.98974609,
                                      2012.80981445,
                                      1884.00744629,
                                      1693.40161133,
                                      1491.73779297,
                                      1297.99816895,
                                      1120.69970703,
                                      996.043395996,
                                      903.588256836,
                                      818.460021973,
                                      740.524108887,
                                      679.239624023,
                                      624.590454102,
                                      574.100036621,
                                      528.409057617,
                                      489.997619629,
                                      1763.60900879,
                                      1727.63220215,
                                      1629.57141113,
                                      1491.73779297,
                                      1336.38830566,
                                      1179.42834473,
                                      1039.25634766,
                                      950.44720459,
                                      866.416687012,
                                      787.946533203,
                                      717.456176758,
                                      661.633422852,
                                      609.623046875,
                                      561.31427002,
                                      518.629089355,
                                      481.495361328,
                                      1491.73779297,
                                      1467.21154785,
                                      1398.57958984,
                                      1297.99816895,
                                      1179.42834473,
                                      1054.64294434,
                                      975.919921875,
                                      898.074401855,
                                      823.012390137,
                                      751.853820801,
                                      692.403076172,
                                      640.284667969,
                                      591.358520508,
                                      545.629760742,
                                      506.54699707,
                                      470.954223633,
                                      1261.77709961,
                                      1244.41430664,
                                      1195.04504395,
                                      1120.69970703,
                                      1039.25634766,
                                      975.919921875,
                                      909.174133301,
                                      841.744262695,
                                      775.546569824,
                                      714.580871582,
                                      664.092590332,
                                      615.952392578,
                                      570.392150879,
                                      528.409057617,
                                      492.477874756,
                                      458.628570557,
                                      1067.26635742,
                                      1054.64306641,
                                      1031.75708008,
                                      996.043395996,
                                      950.44720459,
                                      898.074401855,
                                      841.744262695,
                                      783.770263672,
                                      726.22833252,
                                      679.239624023,
                                      633.465698242,
                                      589.392944336,
                                      547.332580566,
                                      510.515045166,
                                      476.757659912,
                                      444.792907715,
                                      956.67767334,
                                      950.44720459,
                                      932.273986816,
                                      903.588256836,
                                      866.416687012,
                                      823.012390137,
                                      775.546569824,
                                      726.22833252,
                                      684.443725586,
                                      642.589599609,
                                      601.375,
                                      561.31439209,
                                      524.175048828,
                                      491.234863281,
                                      459.72479248,
                                      429.72869873,
                                      861.364074707,
                                      856.371826172,
                                      841.744262695,
                                      818.460021973,
                                      787.946533203,
                                      751.853820801,
                                      714.580871582,
                                      679.239624023,
                                      642.589599609,
                                      605.472290039,
                                      568.554870605,
                                      532.708679199,
                                      501.345214844,
                                      470.954223633,
                                      441.705718994,
                                      413.71182251,
                                      775.546569824,
                                      771.497619629,
                                      759.593811035,
                                      740.524108887,
                                      717.456176758,
                                      692.403076172,
                                      664.092590332,
                                      633.465698242,
                                      601.375,
                                      568.554870605,
                                      535.612426758,
                                      506.546936035,
                                      477.933990479,
                                      450.024688721,
                                      423.003997803,
                                      395.167694092,
                                      703.312927246,
                                      700.552734375,
                                      692.403076172,
                                      679.239624023,
                                      661.633422852,
                                      640.284667969,
                                      615.952392578,
                                      589.392944336,
                                      561.31439209,
                                      532.708679199,
                                      506.546936035,
                                      480.302856445,
                                      454.290039062,
                                      428.756591797,
                                      403.216186523,
                                      375.228302002,
                                      644.910888672,
                                      642.589599609,
                                      635.722961426,
                                      624.590454102,
                                      609.623046875,
                                      591.358520508,
                                      570.392150879,
                                      547.332580566,
                                      524.175048828,
                                      501.345214844,
                                      477.933990479,
                                      454.290039062,
                                      430.704803467,
                                      407.340545654,
                                      380.75769043,
                                      355.171173096,
                                      591.358520508,
                                      589.392944336,
                                      583.569458008,
                                      574.100036621,
                                      561.31427002,
                                      545.629760742,
                                      528.409057617,
                                      510.515045166,
                                      491.234863281,
                                      470.954223633,
                                      450.024688721,
                                      428.756591797,
                                      407.340545654,
                                      382.62991333,
                                      358.535705566,
                                      335.223266602,
                                      542.252990723,
                                      540.578857422,
                                      535.612548828,
                                      528.409057617,
                                      518.629089355,
                                      506.54699707,
                                      492.477874756,
                                      476.757659912,
                                      459.72479248,
                                      441.705718994,
                                      423.003997803,
                                      403.216186523,
                                      380.75769043,
                                      358.535705566,
                                      336.753845215,
                                      315.57409668,
                                      501.345214844,
                                      500.060272217,
                                      496.2421875,
                                      489.997619629,
                                      481.495361328,
                                      470.954223633,
                                      458.628570557,
                                      444.792907715,
                                      429.72869873,
                                      413.71182251,
                                      395.167694092,
                                      375.228302002,
                                      355.171173096,
                                      335.223266602,
                                      315.57409668,
                                      296.378265381},
                                     {0,
                                      0,
                                      5616.41552734,
                                      4437.54785156,
                                      3710.52368164,
                                      3312.08374023,
                                      2956.42822266,
                                      2638.96386719,
                                      2378.97973633,
                                      2146.23095703,
                                      1936.2532959,
                                      1722.18615723,
                                      1498.60571289,
                                      1304.05163574,
                                      1134.75488281,
                                      951.882019043,
                                      0,
                                      0,
                                      5312.58251953,
                                      4271.09716797,
                                      3658.99584961,
                                      3275.03710938,
                                      2928.76391602,
                                      2617.74536133,
                                      2363.77954102,
                                      2134.02709961,
                                      1926.33569336,
                                      1711.35717773,
                                      1489.96264648,
                                      1297.10559082,
                                      1129.14038086,
                                      946.136962891,
                                      5616.41552734,
                                      5312.58251953,
                                      4620.59277344,
                                      3880.56469727,
                                      3516.76147461,
                                      3170.29418945,
                                      2849.4152832,
                                      2562.00634766,
                                      2319.43164062,
                                      2098.26171875,
                                      1897.17285156,
                                      1679.53442383,
                                      1464.50524902,
                                      1276.60888672,
                                      1112.54638672,
                                      929.184143066,
                                      4437.54785156,
                                      4271.09716797,
                                      3880.56469727,
                                      3609.64770508,
                                      3312.08374023,
                                      3013.74951172,
                                      2727.90283203,
                                      2474.97729492,
                                      2249.39648438,
                                      2041.30578613,
                                      1850.4362793,
                                      1628.60998535,
                                      1423.58496094,
                                      1243.54284668,
                                      1077.57275391,
                                      901.836975098,
                                      3710.52368164,
                                      3658.99584961,
                                      3516.76147461,
                                      3312.08374023,
                                      3073.94458008,
                                      2824.09741211,
                                      2580.27368164,
                                      2363.77954102,
                                      2158.58081055,
                                      1966.61950684,
                                      1778.07653809,
                                      1561.42590332,
                                      1369.25976562,
                                      1199.41723633,
                                      1031.11547852,
                                      865.35723877,
                                      3312.08374023,
                                      3275.03710938,
                                      3170.29418945,
                                      3013.74951172,
                                      2824.09741211,
                                      2617.74511719,
                                      2425.91333008,
                                      2235.92993164,
                                      2052.44384766,
                                      1878.20617676,
                                      1679.53442383,
                                      1481.39880371,
                                      1304.05163574,
                                      1146.11157227,
                                      975.344787598,
                                      821.329833984,
                                      2956.42822266,
                                      2928.76391602,
                                      2849.4152832,
                                      2727.90283203,
                                      2580.27368164,
                                      2425.91333008,
                                      2263.03759766,
                                      2098.26171875,
                                      1936.2532959,
                                      1766.65966797,
                                      1570.74584961,
                                      1392.13525391,
                                      1230.68457031,
                                      1077.57275391,
                                      912.64251709,
                                      771.521240234,
                                      2638.96386719,
                                      2617.74536133,
                                      2562.00634766,
                                      2474.97729492,
                                      2363.77954102,
                                      2235.92993164,
                                      2098.26171875,
                                      1956.39318848,
                                      1813.07836914,
                                      1628.60998535,
                                      1456.17285156,
                                      1297.10559082,
                                      1151.85449219,
                                      993.464355469,
                                      845.405334473,
                                      717.737731934,
                                      2378.97973633,
                                      2363.77954102,
                                      2319.43164062,
                                      2249.39648438,
                                      2158.58081055,
                                      2052.44384766,
                                      1936.2532959,
                                      1813.07836914,
                                      1648.67211914,
                                      1489.96264648,
                                      1339.6640625,
                                      1199.41748047,
                                      1057.31555176,
                                      907.217956543,
                                      775.878479004,
                                      661.709289551,
                                      2146.23095703,
                                      2134.02709961,
                                      2098.26171875,
                                      2041.30578613,
                                      1966.61950684,
                                      1878.20617676,
                                      1766.65966797,
                                      1628.60998535,
                                      1489.96264648,
                                      1354.33557129,
                                      1224.33178711,
                                      1098.37109375,
                                      951.882019043,
                                      821.329833984,
                                      706.041503906,
                                      604.99597168,
                                      1936.2532959,
                                      1926.33569336,
                                      1897.17285156,
                                      1850.4362793,
                                      1778.07653809,
                                      1679.53442383,
                                      1570.74584961,
                                      1456.17285156,
                                      1339.6640625,
                                      1224.33178711,
                                      1112.54614258,
                                      975.344482422,
                                      850.33416748,
                                      737.812194824,
                                      637.541503906,
                                      531.866638184,
                                      1722.18615723,
                                      1711.35717773,
                                      1679.53442383,
                                      1628.60998535,
                                      1561.42590332,
                                      1481.39880371,
                                      1392.13525391,
                                      1297.10559082,
                                      1199.41748047,
                                      1098.37109375,
                                      975.344482422,
                                      860.309997559,
                                      754.414855957,
                                      658.18359375,
                                      565.168762207,
                                      455.065155029,
                                      1498.60571289,
                                      1489.96264648,
                                      1464.50524902,
                                      1423.58496094,
                                      1369.25976562,
                                      1304.05163574,
                                      1230.68457031,
                                      1151.85449219,
                                      1057.31555176,
                                      951.882019043,
                                      850.33416748,
                                      754.414855957,
                                      665.260375977,
                                      582.761047363,
                                      475.564758301,
                                      385.666412354,
                                      1304.05163574,
                                      1297.10559082,
                                      1276.60888672,
                                      1243.54284668,
                                      1199.41723633,
                                      1146.11157227,
                                      1077.57275391,
                                      993.464355469,
                                      907.217956543,
                                      821.329833984,
                                      737.812194824,
                                      658.18359375,
                                      582.761047363,
                                      482.643035889,
                                      396.775939941,
                                      324.039428711,
                                      1134.75488281,
                                      1129.14038086,
                                      1112.54638672,
                                      1077.57275391,
                                      1031.11547852,
                                      975.344787598,
                                      912.64251709,
                                      845.405334473,
                                      775.878479004,
                                      706.041503906,
                                      637.541503906,
                                      565.168762207,
                                      475.564758301,
                                      396.775939941,
                                      328.516326904,
                                      270.136077881,
                                      951.882019043,
                                      946.136962891,
                                      929.184143066,
                                      901.836975098,
                                      865.35723877,
                                      821.329833984,
                                      771.521240234,
                                      717.737731934,
                                      661.709289551,
                                      604.99597168,
                                      531.866638184,
                                      455.065155029,
                                      385.666412354,
                                      324.039428711,
                                      270.136077881,
                                      223.60848999},
                                     {0,
                                      0,
                                      615.613830566,
                                      448.953399658,
                                      337.930267334,
                                      263.807556152,
                                      205.943115234,
                                      160.770889282,
                                      141.832733154,
                                      126.301643372,
                                      112.471244812,
                                      100.763389587,
                                      91.1208114624,
                                      82.4009933472,
                                      74.5156097412,
                                      58.8962364197,
                                      0,
                                      0,
                                      571.402038574,
                                      426.532226562,
                                      327.784393311,
                                      257.417816162,
                                      201.765563965,
                                      157.966430664,
                                      140.812332153,
                                      125.492965698,
                                      111.822540283,
                                      100.304679871,
                                      90.7403564453,
                                      82.0832748413,
                                      74.2487335205,
                                      58.3933258057,
                                      615.613830566,
                                      571.402038574,
                                      473.941894531,
                                      372.602783203,
                                      300.644775391,
                                      239.80960083,
                                      190.039825439,
                                      154.182662964,
                                      137.840042114,
                                      123.126365662,
                                      109.91746521,
                                      98.952003479,
                                      89.6162185669,
                                      81.1429672241,
                                      73.4578170776,
                                      56.9167442322,
                                      448.953399658,
                                      426.532226562,
                                      372.602783203,
                                      318.224456787,
                                      263.807556152,
                                      214.746795654,
                                      172.817260742,
                                      148.295852661,
                                      133.160797119,
                                      119.368148804,
                                      106.872108459,
                                      96.7725219727,
                                      87.7978591919,
                                      79.6171722412,
                                      70.2083129883,
                                      54.5584373474,
                                      337.930267334,
                                      327.784393311,
                                      300.644775391,
                                      263.807556152,
                                      224.206954956,
                                      186.378311157,
                                      155.421569824,
                                      140.812332153,
                                      127.120582581,
                                      114.460098267,
                                      103.118339539,
                                      93.8680496216,
                                      85.3613052368,
                                      77.5634307861,
                                      65.9593734741,
                                      51.4587516785,
                                      263.807556152,
                                      257.417816162,
                                      239.80960083,
                                      214.746795654,
                                      186.378311157,
                                      157.966400146,
                                      144.988540649,
                                      132.263153076,
                                      120.102050781,
                                      108.680435181,
                                      98.952003479,
                                      90.3628005981,
                                      82.4009933472,
                                      75.0543060303,
                                      60.9631996155,
                                      47.7897415161,
                                      205.943115234,
                                      201.765563965,
                                      190.039825439,
                                      172.817260742,
                                      155.421569824,
                                      144.988540649,
                                      134.070770264,
                                      123.126365662,
                                      112.471244812,
                                      102.638969421,
                                      94.2730102539,
                                      86.3905029297,
                                      79.0208206177,
                                      70.2083129883,
                                      55.4867515564,
                                      43.7368011475,
                                      160.770889282,
                                      157.966430664,
                                      154.182662964,
                                      148.295852661,
                                      140.812332153,
                                      132.263153076,
                                      123.126365662,
                                      113.789886475,
                                      104.582710266,
                                      96.7725219727,
                                      89.2471008301,
                                      82.0832748413,
                                      75.3261566162,
                                      62.5737113953,
                                      49.7861824036,
                                      39.4813766479,
                                      141.832733154,
                                      140.812332153,
                                      137.840042114,
                                      133.160797119,
                                      127.120582581,
                                      120.102050781,
                                      112.471244812,
                                      104.582710266,
                                      97.6333694458,
                                      90.7403564453,
                                      84.0226669312,
                                      77.5634460449,
                                      68.3460235596,
                                      55.020149231,
                                      44.0871162415,
                                      35.1875991821,
                                      126.301643372,
                                      125.492965698,
                                      123.126365662,
                                      119.368148804,
                                      114.460098267,
                                      108.680435181,
                                      102.638969421,
                                      96.7725219727,
                                      90.7403564453,
                                      84.6872787476,
                                      78.7255554199,
                                      72.1355895996,
                                      58.8962364197,
                                      47.7897415161,
                                      38.5730819702,
                                      30.993062973,
                                      112.471244812,
                                      111.822540283,
                                      109.91746521,
                                      106.872108459,
                                      103.118339539,
                                      98.952003479,
                                      94.2730102539,
                                      89.2471008301,
                                      84.0226669312,
                                      78.7255554199,
                                      73.4578094482,
                                      60.9631729126,
                                      50.1978492737,
                                      41.0546913147,
                                      33.3810348511,
                                      24.7806758881,
                                      100.763389587,
                                      100.304679871,
                                      98.952003479,
                                      96.7725219727,
                                      93.8680496216,
                                      90.3628005981,
                                      86.3905029297,
                                      82.0832748413,
                                      77.5634460449,
                                      72.1355895996,
                                      60.9631729126,
                                      51.0341072083,
                                      42.3694725037,
                                      34.9223136902,
                                      27.7260704041,
                                      18.5722160339,
                                      91.1208114624,
                                      90.7403564453,
                                      89.6162185669,
                                      87.7978591919,
                                      85.3613052368,
                                      82.4009933472,
                                      79.0208206177,
                                      75.3261566162,
                                      68.3460235596,
                                      58.8962364197,
                                      50.1978492737,
                                      42.3694725037,
                                      35.4553947449,
                                      29.343132019,
                                      20.1489048004,
                                      13.676407814,
                                      82.4009933472,
                                      82.0832748413,
                                      81.1429672241,
                                      79.6171722412,
                                      77.5634307861,
                                      75.0543060303,
                                      70.2083129883,
                                      62.5737113953,
                                      55.020149231,
                                      47.7897415161,
                                      41.0546913147,
                                      34.9223136902,
                                      29.343132019,
                                      20.7069969177,
                                      14.4138498306,
                                      9.9115486145,
                                      74.5156097412,
                                      74.2487335205,
                                      73.4578170776,
                                      70.2083129883,
                                      65.9593734741,
                                      60.9631996155,
                                      55.4867515564,
                                      49.7861824036,
                                      44.0871162415,
                                      38.5730819702,
                                      33.3810348511,
                                      27.7260704041,
                                      20.1489048004,
                                      14.4138498306,
                                      10.166267395,
                                      7.07980155945,
                                      58.8962364197,
                                      58.3933258057,
                                      56.9167442322,
                                      54.5584373474,
                                      51.4587516785,
                                      47.7897415161,
                                      43.7368011475,
                                      39.4813766479,
                                      35.1875991821,
                                      30.993062973,
                                      24.7806758881,
                                      18.5722160339,
                                      13.676407814,
                                      9.9115486145,
                                      7.07980155945,
                                      4.99121952057}};
const float inv_matrix_32[3][1024] = {{0,
                                       0,
                                       0,
                                       0,
                                       5011.67871094,
                                       4561.02685547,
                                       4150.89794922,
                                       3787.85327148,
                                       3459.89013672,
                                       3160.32299805,
                                       2886.69311523,
                                       2636.75488281,
                                       2408.45727539,
                                       2220.78833008,
                                       2069.29418945,
                                       1928.13452148,
                                       1796.60424805,
                                       1674.04626465,
                                       1559.84912109,
                                       1455.32824707,
                                       1364.40710449,
                                       1279.16601562,
                                       1199.25048828,
                                       1124.32775879,
                                       1054.08581543,
                                       988.231933594,
                                       932.328857422,
                                       879.889831543,
                                       830.400390625,
                                       783.694335938,
                                       739.61541748,
                                       698.015563965,
                                       0,
                                       0,
                                       0,
                                       0,
                                       4953.88232422,
                                       4518.67041016,
                                       4118.65429688,
                                       3763.55249023,
                                       3440.43725586,
                                       3144.51098633,
                                       2873.68359375,
                                       2625.9453125,
                                       2399.40185547,
                                       2214.77026367,
                                       2064.08569336,
                                       1923.60375977,
                                       1792.64550781,
                                       1670.57409668,
                                       1556.79296875,
                                       1452.8614502,
                                       1362.2097168,
                                       1277.20385742,
                                       1197.49438477,
                                       1122.75280762,
                                       1052.67053223,
                                       986.958068848,
                                       931.291748047,
                                       878.947387695,
                                       829.542602539,
                                       782.912841797,
                                       738.902404785,
                                       697.364379883,
                                       0,
                                       0,
                                       0,
                                       0,
                                       4793.61474609,
                                       4398.46826172,
                                       4026.78955078,
                                       3692.97387695,
                                       3383.59692383,
                                       3098.10839844,
                                       2835.38208008,
                                       2594.04101562,
                                       2372.62280273,
                                       2196.91870117,
                                       2048.6171875,
                                       1910.1348877,
                                       1780.86755371,
                                       1660.23608398,
                                       1547.6887207,
                                       1445.50598145,
                                       1355.65515137,
                                       1271.34863281,
                                       1192.25231934,
                                       1118.05004883,
                                       1048.44384766,
                                       983.335632324,
                                       928.192504883,
                                       876.130004883,
                                       826.978088379,
                                       780.575439453,
                                       736.76965332,
                                       695.41619873,
                                       0,
                                       0,
                                       0,
                                       0,
                                       4561.02685547,
                                       4217.54345703,
                                       3889.28466797,
                                       3582.40161133,
                                       3293.56469727,
                                       3024.01489258,
                                       2773.8503418,
                                       2542.54394531,
                                       2329.23535156,
                                       2167.82006836,
                                       2023.34472656,
                                       1888.08752441,
                                       1761.55737305,
                                       1643.26379395,
                                       1532.72387695,
                                       1433.39599609,
                                       1344.85412598,
                                       1261.69274902,
                                       1183.6015625,
                                       1110.28479004,
                                       1041.46118164,
                                       977.688903809,
                                       923.064758301,
                                       871.467163086,
                                       822.732299805,
                                       776.704589844,
                                       733.236633301,
                                       692.188110352,
                                       5011.67871094,
                                       4953.88232422,
                                       4793.61474609,
                                       4561.02685547,
                                       4287.29882812,
                                       3998.23925781,
                                       3716.125,
                                       3440.43725586,
                                       3176.31298828,
                                       2926.47753906,
                                       2692.17285156,
                                       2473.73583984,
                                       2276.53393555,
                                       2128.3894043,
                                       1988.98718262,
                                       1858.03149414,
                                       1735.17175293,
                                       1620.02612305,
                                       1512.1998291,
                                       1416.7467041,
                                       1329.98596191,
                                       1248.38586426,
                                       1171.66845703,
                                       1099.56396484,
                                       1031.81274414,
                                       969.874816895,
                                       915.964599609,
                                       865.006896973,
                                       816.846923828,
                                       771.336730957,
                                       728.335144043,
                                       687.707824707,
                                       4561.02685547,
                                       4518.67041016,
                                       4398.46826172,
                                       4217.54345703,
                                       3998.23925781,
                                       3763.55249023,
                                       3519.85961914,
                                       3276.21459961,
                                       3038.5234375,
                                       2810.43310547,
                                       2594.04101562,
                                       2390.41162109,
                                       2220.78833008,
                                       2079.79077148,
                                       1946.46655273,
                                       1820.70666504,
                                       1702.30786133,
                                       1591.01000977,
                                       1486.51586914,
                                       1395.84521484,
                                       1311.29003906,
                                       1231.62927246,
                                       1156.62243652,
                                       1086.03051758,
                                       1019.62091064,
                                       959.981201172,
                                       906.967834473,
                                       856.815124512,
                                       809.379150391,
                                       764.521179199,
                                       722.108276367,
                                       682.245117188,
                                       4150.89794922,
                                       4118.65429688,
                                       4026.78955078,
                                       3889.28466797,
                                       3716.125,
                                       3519.85961914,
                                       3311.12646484,
                                       3098.10839844,
                                       2886.69311523,
                                       2680.90209961,
                                       2483.34204102,
                                       2295.77954102,
                                       2156.40185547,
                                       2023.34472656,
                                       1896.84716797,
                                       1776.97375488,
                                       1663.66943359,
                                       1556.79296875,
                                       1457.80285645,
                                       1371.0369873,
                                       1289.05615234,
                                       1211.6673584,
                                       1138.67041016,
                                       1069.86108398,
                                       1005.03588867,
                                       948.117004395,
                                       896.168579102,
                                       846.973266602,
                                       800.399719238,
                                       756.319885254,
                                       714.610473633,
                                       675.848571777,
                                       3787.85327148,
                                       3763.55249023,
                                       3692.97387695,
                                       3582.40161133,
                                       3440.43725586,
                                       3276.21459961,
                                       3098.10839844,
                                       2913.08789062,
                                       2726.56884766,
                                       2542.54394531,
                                       2363.82275391,
                                       2214.77026367,
                                       2085.0793457,
                                       1960.44067383,
                                       1841.2644043,
                                       1727.76757812,
                                       1620.02624512,
                                       1518.01391602,
                                       1426.21765137,
                                       1342.71228027,
                                       1263.61376953,
                                       1188.7791748,
                                       1118.05004883,
                                       1051.25854492,
                                       988.232055664,
                                       934.408508301,
                                       883.676330566,
                                       835.576843262,
                                       789.991882324,
                                       746.805908203,
                                       705.905090332,
                                       668.410766602,
                                       3459.89013672,
                                       3440.43725586,
                                       3383.59692383,
                                       3293.56469727,
                                       3176.31298828,
                                       3038.5234375,
                                       2886.69311523,
                                       2726.56884766,
                                       2562.8984375,
                                       2399.40185547,
                                       2251.3984375,
                                       2128.38916016,
                                       2008.47729492,
                                       1892.4576416,
                                       1780.86755371,
                                       1674.04638672,
                                       1572.18115234,
                                       1475.3458252,
                                       1391.27539062,
                                       1311.29003906,
                                       1235.31958008,
                                       1163.2689209,
                                       1095.02172852,
                                       1030.44628906,
                                       970.984558105,
                                       918.996520996,
                                       869.613464355,
                                       822.732299805,
                                       778.249511719,
                                       736.060913086,
                                       696.064697266,
                                       659.988525391,
                                       3160.32299805,
                                       3144.51098633,
                                       3098.10839844,
                                       3024.01489258,
                                       2926.47753906,
                                       2810.43310547,
                                       2680.90209961,
                                       2542.54394531,
                                       2399.40185547,
                                       2263.89282227,
                                       2150.73901367,
                                       2038.4329834,
                                       1928.13452148,
                                       1820.70666504,
                                       1716.77062988,
                                       1616.75537109,
                                       1520.93566895,
                                       1433.39599609,
                                       1353.48266602,
                                       1277.20385742,
                                       1204.54553223,
                                       1135.45678711,
                                       1069.86108398,
                                       1007.66223145,
                                       952.402770996,
                                       902.032531738,
                                       854.112670898,
                                       808.556152344,
                                       765.27355957,
                                       724.174499512,
                                       685.184509277,
                                       650.644348145,
                                       2886.69311523,
                                       2873.68359375,
                                       2835.38208008,
                                       2773.8503418,
                                       2692.17285156,
                                       2594.04101562,
                                       2483.34204102,
                                       2363.82275391,
                                       2251.3984375,
                                       2150.73901367,
                                       2048.6171875,
                                       1946.46655273,
                                       1845.42907715,
                                       1746.38916016,
                                       1650.01464844,
                                       1556.79296875,
                                       1467.77758789,
                                       1389.00024414,
                                       1313.34448242,
                                       1240.89025879,
                                       1171.66845703,
                                       1105.66882324,
                                       1042.85168457,
                                       983.335632324,
                                       932.328857422,
                                       883.676208496,
                                       837.313964844,
                                       793.171142578,
                                       751.173278809,
                                       711.242553711,
                                       674.120605469,
                                       640.444885254,
                                       2636.75488281,
                                       2625.9453125,
                                       2594.04101562,
                                       2542.54394531,
                                       2473.73583984,
                                       2390.41162109,
                                       2295.77954102,
                                       2214.77026367,
                                       2128.38916016,
                                       2038.4329834,
                                       1946.46655273,
                                       1853.81237793,
                                       1761.55737305,
                                       1670.57421875,
                                       1581.54528809,
                                       1494.99133301,
                                       1416.74682617,
                                       1342.71228027,
                                       1271.34875488,
                                       1202.77600098,
                                       1137.06164551,
                                       1074.23132324,
                                       1014.27752686,
                                       959.981201172,
                                       910.948364258,
                                       864.090393066,
                                       819.361022949,
                                       776.704589844,
                                       736.060913086,
                                       697.364379883,
                                       662.218017578,
                                       629.4609375,
                                       2408.45727539,
                                       2399.40185547,
                                       2372.62280273,
                                       2329.23535156,
                                       2276.53393555,
                                       2220.78833008,
                                       2156.40185547,
                                       2085.0793457,
                                       2008.47729492,
                                       1928.13452148,
                                       1845.42907715,
                                       1761.55737305,
                                       1677.53186035,
                                       1594.18786621,
                                       1512.1998291,
                                       1435.8034668,
                                       1364.40710449,
                                       1295.05419922,
                                       1227.95825195,
                                       1163.2689209,
                                       1101.08483887,
                                       1041.46118164,
                                       984.471923828,
                                       935.451171875,
                                       888.446838379,
                                       843.440002441,
                                       800.399719238,
                                       759.286071777,
                                       720.051269531,
                                       682.831237793,
                                       649.558654785,
                                       617.765075684,
                                       2220.78833008,
                                       2214.77026367,
                                       2196.91870117,
                                       2167.82006836,
                                       2128.3894043,
                                       2079.79077148,
                                       2023.34472656,
                                       1960.44067383,
                                       1892.4576416,
                                       1820.70666504,
                                       1746.38916016,
                                       1670.57421875,
                                       1594.18786621,
                                       1518.01391602,
                                       1445.50622559,
                                       1377.7244873,
                                       1311.29003906,
                                       1246.50488281,
                                       1183.6015625,
                                       1122.75280762,
                                       1064.07983398,
                                       1007.66223145,
                                       956.720947266,
                                       909.950622559,
                                       865.006896973,
                                       821.887329102,
                                       780.575439453,
                                       741.04473877,
                                       703.25994873,
                                       668.410766602,
                                       636.225524902,
                                       605.431762695,
                                       2069.29418945,
                                       2064.08569336,
                                       2048.6171875,
                                       2023.34472656,
                                       1988.98718262,
                                       1946.46655273,
                                       1896.84716797,
                                       1841.2644043,
                                       1780.86755371,
                                       1716.77062988,
                                       1650.01464844,
                                       1581.54528809,
                                       1512.1998291,
                                       1445.50622559,
                                       1382.21533203,
                                       1319.54187012,
                                       1257.8659668,
                                       1197.49438477,
                                       1138.67041016,
                                       1081.58068848,
                                       1026.36474609,
                                       974.326965332,
                                       928.192504883,
                                       883.676208496,
                                       840.805603027,
                                       799.591430664,
                                       760.030456543,
                                       722.108276367,
                                       685.801452637,
                                       653.370849609,
                                       622.301086426,
                                       592.535888672,
                                       1928.13452148,
                                       1923.60375977,
                                       1910.1348877,
                                       1888.08752441,
                                       1858.03149414,
                                       1820.70666504,
                                       1776.97375488,
                                       1727.76757812,
                                       1674.04638672,
                                       1616.75537109,
                                       1556.79296875,
                                       1494.99133301,
                                       1435.8034668,
                                       1377.7244873,
                                       1319.54187012,
                                       1261.69274902,
                                       1204.54553223,
                                       1148.40356445,
                                       1093.51477051,
                                       1040.0736084,
                                       988.232055664,
                                       942.805053711,
                                       899.092651367,
                                       856.815124512,
                                       816.011779785,
                                       776.704589844,
                                       738.902404785,
                                       702.601013184,
                                       668.97833252,
                                       637.802612305,
                                       607.867736816,
                                       579.151306152,
                                       1796.60424805,
                                       1792.64550781,
                                       1780.86755371,
                                       1761.55737305,
                                       1735.17175293,
                                       1702.30786133,
                                       1663.66943359,
                                       1620.02624512,
                                       1572.18115234,
                                       1520.93566895,
                                       1467.77758789,
                                       1416.74682617,
                                       1364.40710449,
                                       1311.29003906,
                                       1257.8659668,
                                       1204.54553223,
                                       1151.67944336,
                                       1099.56396484,
                                       1048.44384766,
                                       998.518310547,
                                       953.479187012,
                                       910.948364258,
                                       869.613342285,
                                       829.542602539,
                                       790.784973145,
                                       753.372253418,
                                       717.322814941,
                                       682.831237793,
                                       651.732788086,
                                       621.794555664,
                                       593.00592041,
                                       565.35144043,
                                       1674.04626465,
                                       1670.57409668,
                                       1660.23608398,
                                       1643.26379395,
                                       1620.02612305,
                                       1591.01000977,
                                       1556.79296875,
                                       1518.01391602,
                                       1475.3458252,
                                       1433.39599609,
                                       1389.00024414,
                                       1342.71228027,
                                       1295.05419922,
                                       1246.50488281,
                                       1197.49438477,
                                       1148.40356445,
                                       1099.56396484,
                                       1051.25854492,
                                       1003.72686768,
                                       959.981201172,
                                       918.996520996,
                                       878.947387695,
                                       839.930419922,
                                       802.020446777,
                                       765.27355957,
                                       729.730224609,
                                       695.41619873,
                                       663.897949219,
                                       634.132019043,
                                       605.431762695,
                                       577.793395996,
                                       551.20690918,
                                       1559.84912109,
                                       1556.79296875,
                                       1547.6887207,
                                       1532.72387695,
                                       1512.1998291,
                                       1486.51586914,
                                       1457.80285645,
                                       1426.21765137,
                                       1391.27539062,
                                       1353.48266602,
                                       1313.34448242,
                                       1271.34875488,
                                       1227.95825195,
                                       1183.6015625,
                                       1138.67041016,
                                       1093.51477051,
                                       1048.44384766,
                                       1003.72686768,
                                       962.165222168,
                                       923.064758301,
                                       884.62689209,
                                       846.973266602,
                                       810.203491211,
                                       774.396850586,
                                       739.61541748,
                                       705.905090332,
                                       674.120605469,
                                       644.708618164,
                                       616.264648438,
                                       588.796264648,
                                       562.305175781,
                                       536.786437988,
                                       1455.32824707,
                                       1452.8614502,
                                       1445.50598145,
                                       1433.39599609,
                                       1416.7467041,
                                       1395.84521484,
                                       1371.0369873,
                                       1342.71228027,
                                       1311.29003906,
                                       1277.20385742,
                                       1240.89025879,
                                       1202.77600098,
                                       1163.2689209,
                                       1122.75280762,
                                       1081.58068848,
                                       1040.0736084,
                                       998.518310547,
                                       959.981201172,
                                       923.064758301,
                                       886.533447266,
                                       850.530761719,
                                       815.17779541,
                                       780.575439453,
                                       746.805908203,
                                       713.934814453,
                                       682.245117188,
                                       653.370849609,
                                       625.353942871,
                                       598.214355469,
                                       571.965026855,
                                       546.611877441,
                                       522.155395508,
                                       1364.40710449,
                                       1362.2097168,
                                       1355.65515137,
                                       1344.85412598,
                                       1329.98596191,
                                       1311.29003906,
                                       1289.05615234,
                                       1263.61376953,
                                       1235.31958008,
                                       1204.54553223,
                                       1171.66845703,
                                       1137.06164551,
                                       1101.08483887,
                                       1064.07983398,
                                       1026.36474609,
                                       988.232055664,
                                       953.479187012,
                                       918.996520996,
                                       884.62689209,
                                       850.530761719,
                                       816.846923828,
                                       783.694335938,
                                       751.173278809,
                                       719.367553711,
                                       688.345153809,
                                       659.988647461,
                                       632.568969727,
                                       605.91784668,
                                       580.059387207,
                                       555.010437012,
                                       530.781066895,
                                       507.375701904,
                                       1279.16601562,
                                       1277.20385742,
                                       1271.34863281,
                                       1261.69274902,
                                       1248.38586426,
                                       1231.62927246,
                                       1211.6673584,
                                       1188.7791748,
                                       1163.2689209,
                                       1135.45678711,
                                       1105.66882324,
                                       1074.23132324,
                                       1041.46118164,
                                       1007.66223145,
                                       974.326965332,
                                       942.805053711,
                                       910.948364258,
                                       878.947387695,
                                       846.973266602,
                                       815.17779541,
                                       783.694335938,
                                       752.638000488,
                                       722.108276367,
                                       692.188110352,
                                       664.459472656,
                                       637.802490234,
                                       611.796875,
                                       586.477539062,
                                       561.871887207,
                                       537.999816895,
                                       514.875244141,
                                       492.505737305,
                                       1199.25048828,
                                       1197.49438477,
                                       1192.25231934,
                                       1183.6015625,
                                       1171.66845703,
                                       1156.62243652,
                                       1138.67041016,
                                       1118.05004883,
                                       1095.02172852,
                                       1069.86108398,
                                       1042.85168457,
                                       1014.27752686,
                                       984.471923828,
                                       956.720947266,
                                       928.192504883,
                                       899.092651367,
                                       869.613342285,
                                       839.930419922,
                                       810.203491211,
                                       780.575439453,
                                       751.173278809,
                                       722.108276367,
                                       693.4765625,
                                       666.712768555,
                                       640.975524902,
                                       615.765563965,
                                       591.129272461,
                                       567.10345459,
                                       543.718078613,
                                       520.995727539,
                                       498.952667236,
                                       480.805541992,
                                       1124.32775879,
                                       1122.75280762,
                                       1118.05004883,
                                       1110.28479004,
                                       1099.56396484,
                                       1086.03051758,
                                       1069.86108398,
                                       1051.25854492,
                                       1030.44628906,
                                       1007.66223145,
                                       983.335632324,
                                       959.981201172,
                                       935.451171875,
                                       909.950622559,
                                       883.676208496,
                                       856.815124512,
                                       829.542602539,
                                       802.020446777,
                                       774.396850586,
                                       746.805908203,
                                       719.367553711,
                                       692.188110352,
                                       666.712768555,
                                       642.038635254,
                                       617.765075684,
                                       593.947570801,
                                       570.63269043,
                                       547.859313965,
                                       525.65826416,
                                       504.054443359,
                                       484.735015869,
                                       470.0362854,
                                       1054.08581543,
                                       1052.67053223,
                                       1048.44384766,
                                       1041.46118164,
                                       1031.81274414,
                                       1019.62091064,
                                       1005.03588867,
                                       988.232055664,
                                       970.984558105,
                                       952.402770996,
                                       932.328857422,
                                       910.948364258,
                                       888.446838379,
                                       865.006896973,
                                       840.805603027,
                                       816.011779785,
                                       790.784973145,
                                       765.27355957,
                                       739.61541748,
                                       713.934814453,
                                       688.345153809,
                                       664.459472656,
                                       640.975524902,
                                       617.765075684,
                                       594.891723633,
                                       572.41003418,
                                       550.3671875,
                                       528.801818848,
                                       507.746917725,
                                       487.717651367,
                                       473.343078613,
                                       459.212097168,
                                       988.231933594,
                                       986.958068848,
                                       983.335632324,
                                       977.688903809,
                                       969.874816895,
                                       959.981201172,
                                       948.117004395,
                                       934.408508301,
                                       918.996520996,
                                       902.032531738,
                                       883.676208496,
                                       864.090393066,
                                       843.440002441,
                                       821.887329102,
                                       799.591430664,
                                       776.704589844,
                                       753.372253418,
                                       729.730224609,
                                       705.905090332,
                                       682.245117188,
                                       659.988647461,
                                       637.802490234,
                                       615.765563965,
                                       593.947570801,
                                       572.41003418,
                                       551.20690918,
                                       530.384277344,
                                       509.981781006,
                                       490.03225708,
                                       475.728912354,
                                       461.936004639,
                                       448.361358643,
                                       932.328857422,
                                       931.291748047,
                                       928.192504883,
                                       923.064758301,
                                       915.964599609,
                                       906.967834473,
                                       896.168579102,
                                       883.676330566,
                                       869.613464355,
                                       854.112670898,
                                       837.313964844,
                                       819.361022949,
                                       800.399719238,
                                       780.575439453,
                                       760.030456543,
                                       738.902404785,
                                       717.322814941,
                                       695.41619873,
                                       674.120605469,
                                       653.370849609,
                                       632.568969727,
                                       611.796875,
                                       591.129272461,
                                       570.63269043,
                                       550.3671875,
                                       530.384277344,
                                       510.730102539,
                                       491.443481445,
                                       477.170257568,
                                       463.766784668,
                                       450.541046143,
                                       437.510101318,
                                       879.889831543,
                                       878.947387695,
                                       876.130004883,
                                       871.467163086,
                                       865.006896973,
                                       856.815124512,
                                       846.973266602,
                                       835.576843262,
                                       822.732299805,
                                       808.556152344,
                                       793.171142578,
                                       776.704589844,
                                       759.286071777,
                                       741.04473877,
                                       722.108276367,
                                       702.601013184,
                                       682.831237793,
                                       663.897949219,
                                       644.708618164,
                                       625.353942871,
                                       605.91784668,
                                       586.477539062,
                                       567.10345459,
                                       547.859313965,
                                       528.801818848,
                                       509.981781006,
                                       491.443481445,
                                       477.65222168,
                                       464.686828613,
                                       451.85736084,
                                       439.183532715,
                                       426.682556152,
                                       830.400390625,
                                       829.542602539,
                                       826.978088379,
                                       822.732299805,
                                       816.846923828,
                                       809.379150391,
                                       800.399719238,
                                       789.991882324,
                                       778.249511719,
                                       765.27355957,
                                       751.173278809,
                                       736.060913086,
                                       720.051269531,
                                       703.25994873,
                                       685.801452637,
                                       668.97833252,
                                       651.732788086,
                                       634.132019043,
                                       616.264648438,
                                       598.214355469,
                                       580.059387207,
                                       561.871887207,
                                       543.718078613,
                                       525.65826416,
                                       507.746917725,
                                       490.03225708,
                                       477.170257568,
                                       464.686828613,
                                       452.297576904,
                                       440.024200439,
                                       427.886230469,
                                       415.901092529,
                                       783.694335938,
                                       782.912841797,
                                       780.575439453,
                                       776.704589844,
                                       771.336730957,
                                       764.521179199,
                                       756.319885254,
                                       746.805908203,
                                       736.060913086,
                                       724.174499512,
                                       711.242553711,
                                       697.364379883,
                                       682.831237793,
                                       668.410766602,
                                       653.370849609,
                                       637.802612305,
                                       621.794555664,
                                       605.431762695,
                                       588.796264648,
                                       571.965026855,
                                       555.010437012,
                                       537.999816895,
                                       520.995727539,
                                       504.054443359,
                                       487.717651367,
                                       475.728912354,
                                       463.766784668,
                                       451.85736084,
                                       440.024200439,
                                       428.288726807,
                                       416.670166016,
                                       405.185882568,
                                       739.61541748,
                                       738.902404785,
                                       736.76965332,
                                       733.236633301,
                                       728.335144043,
                                       722.108276367,
                                       714.610473633,
                                       705.905090332,
                                       696.064697266,
                                       685.184509277,
                                       674.120605469,
                                       662.218017578,
                                       649.558654785,
                                       636.225524902,
                                       622.301086426,
                                       607.867736816,
                                       593.00592041,
                                       577.793395996,
                                       562.305175781,
                                       546.611877441,
                                       530.781066895,
                                       514.875244141,
                                       498.952667236,
                                       484.735015869,
                                       473.343078613,
                                       461.936004639,
                                       450.541046143,
                                       439.183532715,
                                       427.886230469,
                                       416.670166016,
                                       405.554260254,
                                       394.555480957,
                                       698.015563965,
                                       697.364379883,
                                       695.41619873,
                                       692.188110352,
                                       687.707824707,
                                       682.245117188,
                                       675.848571777,
                                       668.410766602,
                                       659.988525391,
                                       650.644348145,
                                       640.444885254,
                                       629.4609375,
                                       617.765075684,
                                       605.431762695,
                                       592.535888672,
                                       579.151306152,
                                       565.35144043,
                                       551.20690918,
                                       536.786437988,
                                       522.155395508,
                                       507.375701904,
                                       492.505737305,
                                       480.805541992,
                                       470.0362854,
                                       459.212097168,
                                       448.361358643,
                                       437.510101318,
                                       426.682556152,
                                       415.901092529,
                                       405.185882568,
                                       394.555480957,
                                       384.026672363},
                                      {0,
                                       0,
                                       0,
                                       0,
                                       10016.1787109,
                                       8949.01855469,
                                       7995.55859375,
                                       7162.60107422,
                                       6422.47558594,
                                       5758.82910156,
                                       5163.75830078,
                                       4630.17675781,
                                       4151.73242188,
                                       3734.18823242,
                                       3370.10986328,
                                       3041.52880859,
                                       2744.98388672,
                                       2477.35107422,
                                       2235.81323242,
                                       2038.74963379,
                                       1932.10974121,
                                       1831.04748535,
                                       1735.27160645,
                                       1644.50561523,
                                       1558.48730469,
                                       1476.96801758,
                                       1386.82666016,
                                       1301.52868652,
                                       1221.47717285,
                                       1146.34912109,
                                       1075.84216309,
                                       1009.67150879,
                                       0,
                                       0,
                                       0,
                                       0,
                                       9878.22460938,
                                       8849.74414062,
                                       7921.35595703,
                                       7107.29541016,
                                       6379.01171875,
                                       5724.14550781,
                                       5135.74365234,
                                       4607.32568359,
                                       4132.93945312,
                                       3719.50512695,
                                       3357.80053711,
                                       3031.15722656,
                                       2736.20654297,
                                       2469.89428711,
                                       2229.45581055,
                                       2035.87133789,
                                       1929.51806641,
                                       1828.70812988,
                                       1733.15539551,
                                       1642.58703613,
                                       1556.74450684,
                                       1475.38232422,
                                       1385.13513184,
                                       1300,
                                       1220.09375,
                                       1145.09570312,
                                       1074.70495605,
                                       1008.63867188,
                                       0,
                                       0,
                                       0,
                                       0,
                                       9497.34082031,
                                       8569.00976562,
                                       7710.1953125,
                                       6947.08251953,
                                       6252.30078125,
                                       5622.56835938,
                                       5053.41699219,
                                       4539.99316406,
                                       4077.45068359,
                                       3676.05541992,
                                       3321.32641602,
                                       3000.390625,
                                       2710.14355469,
                                       2447.73339844,
                                       2210.55053711,
                                       2027.28417969,
                                       1921.78308105,
                                       1821.72375488,
                                       1726.8347168,
                                       1636.85534668,
                                       1551.53735352,
                                       1470.2409668,
                                       1380.08117676,
                                       1295.43139648,
                                       1215.95825195,
                                       1141.34753418,
                                       1071.30383301,
                                       1005.54919434,
                                       0,
                                       0,
                                       0,
                                       0,
                                       8949.01855469,
                                       8149.28955078,
                                       7394.22412109,
                                       6697.34423828,
                                       6052.48828125,
                                       5461.01953125,
                                       4921.63427734,
                                       4431.66796875,
                                       3987.81860352,
                                       3605.57324219,
                                       3262.00317383,
                                       2950.23999023,
                                       2667.58154297,
                                       2411.48632812,
                                       2179.58496094,
                                       2013.13024902,
                                       1909.02331543,
                                       1810.1940918,
                                       1716.39379883,
                                       1627.38232422,
                                       1542.92712402,
                                       1460.9855957,
                                       1371.72302246,
                                       1287.87316895,
                                       1209.11425781,
                                       1135.14245605,
                                       1065.67199707,
                                       1000.43200684,
                                       10016.1787109,
                                       9878.22460938,
                                       9497.34082031,
                                       8949.01855469,
                                       8310.703125,
                                       7644.40527344,
                                       6999.56738281,
                                       6379.01171875,
                                       5793.93896484,
                                       5249.58837891,
                                       4747.62841797,
                                       4287.62841797,
                                       3871.05200195,
                                       3510.74609375,
                                       3181.88964844,
                                       2882.29760742,
                                       2609.7644043,
                                       2362.1328125,
                                       2137.33789062,
                                       1993.63818359,
                                       1891.43066406,
                                       1794.28063965,
                                       1701.97070312,
                                       1614.28540039,
                                       1531.01391602,
                                       1448.18615723,
                                       1360.15734863,
                                       1277.40795898,
                                       1199.63305664,
                                       1126.54284668,
                                       1057.86291504,
                                       993.333496094,
                                       8949.01855469,
                                       8849.74414062,
                                       8569.00976562,
                                       8149.28955078,
                                       7644.40527344,
                                       7107.29541016,
                                       6556.77978516,
                                       6014.109375,
                                       5492.59033203,
                                       4999.91259766,
                                       4539.99316406,
                                       4114.296875,
                                       3734.18823242,
                                       3394.95922852,
                                       3083.60522461,
                                       2798.61328125,
                                       2538.30639648,
                                       2300.9543457,
                                       2084.83349609,
                                       1969.11364746,
                                       1869.26220703,
                                       1774.20117188,
                                       1683.74963379,
                                       1597.7220459,
                                       1515.93359375,
                                       1431.99487305,
                                       1345.51452637,
                                       1264.14855957,
                                       1187.61206055,
                                       1115.63220215,
                                       1047.94946289,
                                       984.940734863,
                                       7995.55859375,
                                       7921.35595703,
                                       7710.1953125,
                                       7394.22412109,
                                       6999.56738281,
                                       6556.77978516,
                                       6091.37744141,
                                       5622.56835938,
                                       5163.75830078,
                                       4723.70117188,
                                       4307.68896484,
                                       3918.65771484,
                                       3578.03271484,
                                       3262.00317383,
                                       2970.13378906,
                                       2701.54418945,
                                       2455.08642578,
                                       2229.45581055,
                                       2041.63623047,
                                       1939.92504883,
                                       1842.82971191,
                                       1750.22119141,
                                       1661.9576416,
                                       1577.88708496,
                                       1497.85339355,
                                       1412.59997559,
                                       1327.95666504,
                                       1248.23461914,
                                       1173.171875,
                                       1102.515625,
                                       1036.02380371,
                                       975.335021973,
                                       7162.60107422,
                                       7107.29541016,
                                       6947.08251953,
                                       6697.34423828,
                                       6379.01171875,
                                       6014.109375,
                                       5622.56835938,
                                       5220.67480469,
                                       4820.77636719,
                                       4431.66796875,
                                       4059.2434082,
                                       3719.50512695,
                                       3407.50024414,
                                       3115.79980469,
                                       2844.60986328,
                                       2593.61132812,
                                       2362.13305664,
                                       2149.27954102,
                                       2004.73095703,
                                       1906.4909668,
                                       1812.48913574,
                                       1722.64440918,
                                       1636.85534668,
                                       1555.00537109,
                                       1476.96813965,
                                       1390.21911621,
                                       1307.67175293,
                                       1229.82922363,
                                       1156.4543457,
                                       1087.31677246,
                                       1022.19244385,
                                       964.170288086,
                                       6422.47558594,
                                       6379.01171875,
                                       6252.30078125,
                                       6052.48828125,
                                       5793.93896484,
                                       5492.59033203,
                                       5163.75830078,
                                       4820.77636719,
                                       4474.43066406,
                                       4132.93945312,
                                       3809.15112305,
                                       3510.74560547,
                                       3227.25976562,
                                       2960.15966797,
                                       2710.14355469,
                                       2477.3515625,
                                       2261.5234375,
                                       2062.12646484,
                                       1963.74353027,
                                       1869.26220703,
                                       1778.62731934,
                                       1691.80358887,
                                       1608.73010254,
                                       1529.32519531,
                                       1450.00341797,
                                       1365.09509277,
                                       1284.86962891,
                                       1209.11425781,
                                       1137.61865234,
                                       1070.17382812,
                                       1006.57757568,
                                       951.533935547,
                                       5758.82910156,
                                       5724.14550781,
                                       5622.56835938,
                                       5461.01953125,
                                       5249.58837891,
                                       4999.91259766,
                                       4723.70117188,
                                       4431.66796875,
                                       4132.93945312,
                                       3839.88183594,
                                       3564.3984375,
                                       3297.38085938,
                                       3041.52880859,
                                       2798.61328125,
                                       2569.67749023,
                                       2355.21166992,
                                       2155.28833008,
                                       2013.13024902,
                                       1919.21801758,
                                       1828.70812988,
                                       1741.64990234,
                                       1658.05053711,
                                       1577.88708496,
                                       1501.11230469,
                                       1419.60339355,
                                       1337.48803711,
                                       1259.77709961,
                                       1186.2878418,
                                       1116.83618164,
                                       1051.23815918,
                                       989.356018066,
                                       937.521850586,
                                       5163.75830078,
                                       5135.74365234,
                                       5053.41699219,
                                       4921.63427734,
                                       4747.62841797,
                                       4539.99316406,
                                       4307.68896484,
                                       4059.2434082,
                                       3809.15112305,
                                       3564.3984375,
                                       3321.32641602,
                                       3083.60522461,
                                       2853.95654297,
                                       2634.29614258,
                                       2425.88378906,
                                       2229.45581055,
                                       2053.26318359,
                                       1961.06884766,
                                       1871.70092773,
                                       1785.30419922,
                                       1701.97070312,
                                       1621.74597168,
                                       1544.64245605,
                                       1470.2409668,
                                       1386.82666016,
                                       1307.67150879,
                                       1232.63317871,
                                       1161.55883789,
                                       1094.29150391,
                                       1030.67077637,
                                       972.740783691,
                                       922.236572266,
                                       4630.17675781,
                                       4607.32568359,
                                       4539.99316406,
                                       4431.66796875,
                                       4287.62841797,
                                       4114.296875,
                                       3918.65771484,
                                       3719.50512695,
                                       3510.74560547,
                                       3297.38085938,
                                       3083.60522461,
                                       2872.79980469,
                                       2667.58154297,
                                       2469.89453125,
                                       2281.10717773,
                                       2102.11450195,
                                       1993.63842773,
                                       1906.4909668,
                                       1821.72387695,
                                       1739.5189209,
                                       1660.00183105,
                                       1583.25292969,
                                       1509.31469727,
                                       1431.99487305,
                                       1351.99133301,
                                       1275.92382812,
                                       1203.68237305,
                                       1135.14245605,
                                       1070.17382812,
                                       1008.63867188,
                                       954.878356934,
                                       905.786682129,
                                       4151.73242188,
                                       4132.93945312,
                                       4077.45068359,
                                       3987.81860352,
                                       3871.05200195,
                                       3734.18823242,
                                       3578.03271484,
                                       3407.50024414,
                                       3227.25976562,
                                       3041.52880859,
                                       2853.95654297,
                                       2667.58154297,
                                       2484.84399414,
                                       2307.63012695,
                                       2137.33789062,
                                       2015.94567871,
                                       1932.10974121,
                                       1849.96801758,
                                       1769.79614258,
                                       1691.80358887,
                                       1616.14465332,
                                       1542.92712402,
                                       1472.10400391,
                                       1391.92028809,
                                       1315.41491699,
                                       1242.52575684,
                                       1173.171875,
                                       1107.25793457,
                                       1044.67651367,
                                       985.821166992,
                                       935.89440918,
                                       888.28326416,
                                       3734.18823242,
                                       3719.50512695,
                                       3676.05541992,
                                       3605.57324219,
                                       3510.74609375,
                                       3394.95922852,
                                       3262.00317383,
                                       3115.79980469,
                                       2960.15966797,
                                       2798.61328125,
                                       2634.29614258,
                                       2469.89453125,
                                       2307.63012695,
                                       2149.27954102,
                                       2027.2845459,
                                       1947.80200195,
                                       1869.26220703,
                                       1792.02880859,
                                       1716.39379883,
                                       1642.58703613,
                                       1570.78308105,
                                       1501.11230469,
                                       1426.6628418,
                                       1350.36767578,
                                       1277.40795898,
                                       1207.75256348,
                                       1141.34753418,
                                       1078.12231445,
                                       1017.99298096,
                                       964.170288086,
                                       915.916137695,
                                       869.840393066,
                                       3370.10986328,
                                       3357.80053711,
                                       3321.32641602,
                                       3262.00317383,
                                       3181.88964844,
                                       3083.60522461,
                                       2970.13378906,
                                       2844.60986328,
                                       2710.14355469,
                                       2569.67749023,
                                       2425.88378906,
                                       2281.10717773,
                                       2137.33789062,
                                       2027.2845459,
                                       1953.08789062,
                                       1879.05322266,
                                       1805.62060547,
                                       1733.15539551,
                                       1661.9576416,
                                       1592.26843262,
                                       1524.27880859,
                                       1455.47753906,
                                       1380.08117676,
                                       1307.67150879,
                                       1238.27075195,
                                       1171.8729248,
                                       1108.44836426,
                                       1047.94946289,
                                       990.31439209,
                                       941.609558105,
                                       895.070007324,
                                       850.572570801,
                                       3041.52880859,
                                       3031.15722656,
                                       3000.390625,
                                       2950.23999023,
                                       2882.29760742,
                                       2798.61328125,
                                       2701.54418945,
                                       2593.61132812,
                                       2477.3515625,
                                       2355.21166992,
                                       2229.45581055,
                                       2102.11450195,
                                       2015.94567871,
                                       1947.80200195,
                                       1879.05322266,
                                       1810.1940918,
                                       1741.64990234,
                                       1673.77990723,
                                       1606.8861084,
                                       1541.21508789,
                                       1476.96813965,
                                       1403.92370605,
                                       1332.70874023,
                                       1264.14855957,
                                       1198.28808594,
                                       1135.14245605,
                                       1074.70495605,
                                       1016.94714355,
                                       965.022094727,
                                       918.278381348,
                                       873.481933594,
                                       830.592407227,
                                       2744.98388672,
                                       2736.20654297,
                                       2710.14355469,
                                       2667.58154297,
                                       2609.7644043,
                                       2538.30639648,
                                       2455.08642578,
                                       2362.13305664,
                                       2261.5234375,
                                       2155.28833008,
                                       2053.26318359,
                                       1993.63842773,
                                       1932.10974121,
                                       1869.26220703,
                                       1805.62060547,
                                       1741.64990234,
                                       1677.75500488,
                                       1614.28540039,
                                       1551.53735352,
                                       1489.75976562,
                                       1421.36291504,
                                       1351.99133301,
                                       1284.86938477,
                                       1220.09375,
                                       1157.72741699,
                                       1097.8046875,
                                       1040.33654785,
                                       985.821166992,
                                       939.153625488,
                                       894.312011719,
                                       851.274475098,
                                       810.01184082,
                                       2477.35107422,
                                       2469.89428711,
                                       2447.73339844,
                                       2411.48632812,
                                       2362.1328125,
                                       2300.9543457,
                                       2229.45581055,
                                       2149.27954102,
                                       2062.12646484,
                                       2013.13024902,
                                       1961.06884766,
                                       1906.4909668,
                                       1849.96801758,
                                       1792.02880859,
                                       1733.15539551,
                                       1673.77990723,
                                       1614.28540039,
                                       1555.00537109,
                                       1496.22851562,
                                       1431.99487305,
                                       1365.09509277,
                                       1300,
                                       1236.85754395,
                                       1175.77709961,
                                       1116.83618164,
                                       1060.08496094,
                                       1005.54919434,
                                       957.398681641,
                                       912.780822754,
                                       869.840393066,
                                       828.566345215,
                                       788.938354492,
                                       2235.81323242,
                                       2229.45581055,
                                       2210.55053711,
                                       2179.58496094,
                                       2137.33789062,
                                       2084.83349609,
                                       2041.63623047,
                                       2004.73095703,
                                       1963.74353027,
                                       1919.21801758,
                                       1871.70092773,
                                       1821.72387695,
                                       1769.79614258,
                                       1716.39379883,
                                       1661.9576416,
                                       1606.8861084,
                                       1551.53735352,
                                       1496.22851562,
                                       1435.56774902,
                                       1371.72302246,
                                       1309.21435547,
                                       1248.23461914,
                                       1188.93847656,
                                       1131.44470215,
                                       1075.84216309,
                                       1022.19244385,
                                       972.740783691,
                                       928.625244141,
                                       886.038757324,
                                       844.988342285,
                                       805.471496582,
                                       767.476257324,
                                       2038.74963379,
                                       2035.87133789,
                                       2027.28417969,
                                       2013.13024902,
                                       1993.63818359,
                                       1969.11364746,
                                       1939.92504883,
                                       1906.4909668,
                                       1869.26220703,
                                       1828.70812988,
                                       1785.30419922,
                                       1739.5189209,
                                       1691.80358887,
                                       1642.58703613,
                                       1592.26843262,
                                       1541.21508789,
                                       1489.75976562,
                                       1431.99487305,
                                       1371.72302246,
                                       1312.30871582,
                                       1253.98498535,
                                       1196.94519043,
                                       1141.34753418,
                                       1087.31677246,
                                       1034.94958496,
                                       984.940734863,
                                       941.609558105,
                                       899.638793945,
                                       859.054748535,
                                       819.872619629,
                                       782.097106934,
                                       745.724487305,
                                       1932.10974121,
                                       1929.51806641,
                                       1921.78308105,
                                       1909.02331543,
                                       1891.43066406,
                                       1869.26220703,
                                       1842.82971191,
                                       1812.48913574,
                                       1778.62731934,
                                       1741.64990234,
                                       1701.97070312,
                                       1660.00183105,
                                       1616.14465332,
                                       1570.78308105,
                                       1524.27880859,
                                       1476.96813965,
                                       1421.36291504,
                                       1365.09509277,
                                       1309.21435547,
                                       1253.98498535,
                                       1199.63305664,
                                       1146.34912109,
                                       1094.29150391,
                                       1043.58874512,
                                       994.342956543,
                                       951.534057617,
                                       910.440185547,
                                       870.567016602,
                                       831.947387695,
                                       794.602966309,
                                       758.545227051,
                                       723.776733398,
                                       1831.04748535,
                                       1828.70812988,
                                       1821.72375488,
                                       1810.1940918,
                                       1794.28063965,
                                       1774.20117188,
                                       1750.22119141,
                                       1722.64440918,
                                       1691.80358887,
                                       1658.05053711,
                                       1621.74597168,
                                       1583.25292969,
                                       1542.92712402,
                                       1501.11230469,
                                       1455.47753906,
                                       1403.92370605,
                                       1351.99133301,
                                       1300,
                                       1248.23461914,
                                       1196.94519043,
                                       1146.34912109,
                                       1096.63146973,
                                       1047.94946289,
                                       1000.43200684,
                                       958.241088867,
                                       918.278259277,
                                       879.356750488,
                                       841.526489258,
                                       804.825805664,
                                       769.28125,
                                       734.910339355,
                                       701.721008301,
                                       1735.27160645,
                                       1733.15539551,
                                       1726.8347168,
                                       1716.39379883,
                                       1701.97070312,
                                       1683.74963379,
                                       1661.9576416,
                                       1636.85534668,
                                       1608.73010254,
                                       1577.88708496,
                                       1544.64245605,
                                       1509.31469727,
                                       1472.10400391,
                                       1426.6628418,
                                       1380.08117676,
                                       1332.70874023,
                                       1284.86938477,
                                       1236.85754395,
                                       1188.93847656,
                                       1141.34753418,
                                       1094.29150391,
                                       1047.94946289,
                                       1002.47418213,
                                       961.622131348,
                                       923.031555176,
                                       885.292236328,
                                       848.471923828,
                                       812.623657227,
                                       777.789794922,
                                       744.001464844,
                                       711.280090332,
                                       684.97052002,
                                       1644.50561523,
                                       1642.58703613,
                                       1636.85534668,
                                       1627.38232422,
                                       1614.28540039,
                                       1597.7220459,
                                       1577.88708496,
                                       1555.00537109,
                                       1529.32519531,
                                       1501.11230469,
                                       1470.2409668,
                                       1431.99487305,
                                       1391.92028809,
                                       1350.36767578,
                                       1307.67150879,
                                       1264.14855957,
                                       1220.09375,
                                       1175.77709961,
                                       1131.44470215,
                                       1087.31677246,
                                       1043.58874512,
                                       1000.43200684,
                                       961.622131348,
                                       924.624450684,
                                       888.28326416,
                                       852.680969238,
                                       817.885742188,
                                       783.954040527,
                                       750.929992676,
                                       718.848205566,
                                       690.50970459,
                                       669.78717041,
                                       1558.48730469,
                                       1556.74450684,
                                       1551.53735352,
                                       1542.92712402,
                                       1531.01391602,
                                       1515.93359375,
                                       1497.85339355,
                                       1476.96813965,
                                       1450.00341797,
                                       1419.60339355,
                                       1386.82666016,
                                       1351.99133301,
                                       1315.41491699,
                                       1277.40795898,
                                       1238.27075195,
                                       1198.28808594,
                                       1157.72741699,
                                       1116.83618164,
                                       1075.84216309,
                                       1034.94958496,
                                       994.342956543,
                                       958.241088867,
                                       923.031555176,
                                       888.28326416,
                                       854.091186523,
                                       820.536315918,
                                       787.687927246,
                                       755.602600098,
                                       724.327697754,
                                       694.713867188,
                                       674.449768066,
                                       654.522705078,
                                       1476.96801758,
                                       1475.38232422,
                                       1470.2409668,
                                       1460.9855957,
                                       1448.18615723,
                                       1431.99487305,
                                       1412.59997559,
                                       1390.21911621,
                                       1365.09509277,
                                       1337.48803711,
                                       1307.67150879,
                                       1275.92382812,
                                       1242.52575684,
                                       1207.75256348,
                                       1171.8729248,
                                       1135.14245605,
                                       1097.8046875,
                                       1060.08496094,
                                       1022.19244385,
                                       984.940734863,
                                       951.534057617,
                                       918.278259277,
                                       885.292236328,
                                       852.680969238,
                                       820.536315918,
                                       788.938354492,
                                       757.955322266,
                                       727.644897461,
                                       698.05480957,
                                       677.813598633,
                                       658.364379883,
                                       639.217041016,
                                       1386.82666016,
                                       1385.13513184,
                                       1380.08117676,
                                       1371.72302246,
                                       1360.15734863,
                                       1345.51452637,
                                       1327.95666504,
                                       1307.67175293,
                                       1284.86962891,
                                       1259.77709961,
                                       1232.63317871,
                                       1203.68237305,
                                       1173.171875,
                                       1141.34753418,
                                       1108.44836426,
                                       1074.70495605,
                                       1040.33654785,
                                       1005.54919434,
                                       972.740783691,
                                       941.609558105,
                                       910.440185547,
                                       879.356750488,
                                       848.471923828,
                                       817.885742188,
                                       787.687927246,
                                       757.955322266,
                                       728.75579834,
                                       700.14642334,
                                       679.84564209,
                                       660.946289062,
                                       642.291992188,
                                       623.906738281,
                                       1301.52868652,
                                       1300,
                                       1295.43139648,
                                       1287.87316895,
                                       1277.40795898,
                                       1264.14855957,
                                       1248.23461914,
                                       1229.82922363,
                                       1209.11425781,
                                       1186.2878418,
                                       1161.55883789,
                                       1135.14245605,
                                       1107.25793457,
                                       1078.12231445,
                                       1047.94946289,
                                       1016.94714355,
                                       985.821166992,
                                       957.398681641,
                                       928.625244141,
                                       899.638793945,
                                       870.567016602,
                                       841.526489258,
                                       812.623657227,
                                       783.954040527,
                                       755.602600098,
                                       727.644897461,
                                       700.14642334,
                                       680.525085449,
                                       662.243774414,
                                       644.148803711,
                                       626.268066406,
                                       608.625976562,
                                       1221.47717285,
                                       1220.09375,
                                       1215.95825195,
                                       1209.11425781,
                                       1199.63305664,
                                       1187.61206055,
                                       1173.171875,
                                       1156.4543457,
                                       1137.61865234,
                                       1116.83618164,
                                       1094.29150391,
                                       1070.17382812,
                                       1044.67651367,
                                       1017.99298096,
                                       990.31439209,
                                       965.022094727,
                                       939.153625488,
                                       912.780822754,
                                       886.038757324,
                                       859.054748535,
                                       831.947387695,
                                       804.825805664,
                                       777.789794922,
                                       750.929992676,
                                       724.327697754,
                                       698.05480957,
                                       679.84564209,
                                       662.243774414,
                                       644.769775391,
                                       627.454284668,
                                       610.324890137,
                                       593.40612793,
                                       1146.34912109,
                                       1145.09570312,
                                       1141.34753418,
                                       1135.14245605,
                                       1126.54284668,
                                       1115.63220215,
                                       1102.515625,
                                       1087.31677246,
                                       1070.17382812,
                                       1051.23815918,
                                       1030.67077637,
                                       1008.63867188,
                                       985.821166992,
                                       964.170288086,
                                       941.609558105,
                                       918.278381348,
                                       894.312011719,
                                       869.840393066,
                                       844.988342285,
                                       819.872619629,
                                       794.602966309,
                                       769.28125,
                                       744.001464844,
                                       718.848205566,
                                       694.713867188,
                                       677.813598633,
                                       660.946289062,
                                       644.148803711,
                                       627.454284668,
                                       610.893005371,
                                       594.491943359,
                                       578.275817871,
                                       1075.84216309,
                                       1074.70495605,
                                       1071.30383301,
                                       1065.67199707,
                                       1057.86291504,
                                       1047.94946289,
                                       1036.02380371,
                                       1022.19244385,
                                       1006.57757568,
                                       989.356018066,
                                       972.740783691,
                                       954.878356934,
                                       935.89440918,
                                       915.916137695,
                                       895.070007324,
                                       873.481933594,
                                       851.274475098,
                                       828.566345215,
                                       805.471496582,
                                       782.097106934,
                                       758.545227051,
                                       734.910339355,
                                       711.280090332,
                                       690.50970459,
                                       674.449768066,
                                       658.364379883,
                                       642.291992188,
                                       626.268066406,
                                       610.324890137,
                                       594.491943359,
                                       578.796020508,
                                       563.261047363,
                                       1009.67150879,
                                       1008.63867188,
                                       1005.54919434,
                                       1000.43200684,
                                       993.333496094,
                                       984.940734863,
                                       975.335021973,
                                       964.170288086,
                                       951.533935547,
                                       937.521850586,
                                       922.236572266,
                                       905.786682129,
                                       888.28326416,
                                       869.840393066,
                                       850.572570801,
                                       830.592407227,
                                       810.01184082,
                                       788.938354492,
                                       767.476257324,
                                       745.724487305,
                                       723.776733398,
                                       701.721008301,
                                       684.97052002,
                                       669.78717041,
                                       654.522705078,
                                       639.217041016,
                                       623.906738281,
                                       608.625976562,
                                       593.40612793,
                                       578.275817871,
                                       563.261047363,
                                       548.385559082},
                                      {0,
                                       0,
                                       0,
                                       0,
                                       1554.1237793,
                                       1242.53955078,
                                       993.424560547,
                                       821.738647461,
                                       688.023742676,
                                       576.067199707,
                                       482.328430176,
                                       403.842987061,
                                       338.128967285,
                                       283.233520508,
                                       237.367095947,
                                       198.928222656,
                                       166.714080811,
                                       139.71661377,
                                       117.091148376,
                                       100.366226196,
                                       93.5875701904,
                                       87.2667160034,
                                       81.3727798462,
                                       75.8769226074,
                                       70.7522583008,
                                       65.9736862183,
                                       62.4703788757,
                                       59.2027587891,
                                       56.1060714722,
                                       53.1713485718,
                                       50.3901405334,
                                       47.7544021606,
                                       0,
                                       0,
                                       0,
                                       0,
                                       1511.89892578,
                                       1215.3125,
                                       975.19708252,
                                       811.432128906,
                                       680.458190918,
                                       570.428588867,
                                       478.074890137,
                                       400.60269165,
                                       335.640289307,
                                       281.318328857,
                                       235.876022339,
                                       197.761489868,
                                       165.797119141,
                                       138.993164062,
                                       116.518371582,
                                       100.18183136,
                                       93.4242019653,
                                       87.1216278076,
                                       81.2436294556,
                                       75.76171875,
                                       70.6492919922,
                                       65.8815155029,
                                       62.4058837891,
                                       59.1439094543,
                                       56.0522842407,
                                       53.1221389771,
                                       50.3450584412,
                                       47.7130508423,
                                       0,
                                       0,
                                       0,
                                       0,
                                       1398.31689453,
                                       1139.93933105,
                                       926.469055176,
                                       781.859680176,
                                       658.586914062,
                                       554.038146973,
                                       465.659057617,
                                       391.113586426,
                                       328.333618164,
                                       275.682922363,
                                       231.480926514,
                                       194.317352295,
                                       163.08682251,
                                       136.852478027,
                                       114.822052002,
                                       99.6321716309,
                                       92.9370193481,
                                       86.6887664795,
                                       80.8581924438,
                                       75.4178009033,
                                       70.3418579102,
                                       65.6360702515,
                                       62.2131195068,
                                       58.9679450989,
                                       55.8914489746,
                                       52.974937439,
                                       50.2101821899,
                                       47.5893363953,
                                       0,
                                       0,
                                       0,
                                       0,
                                       1242.53955078,
                                       1031.72070312,
                                       865.446105957,
                                       736.612304688,
                                       624.660888672,
                                       528.352294922,
                                       446.048339844,
                                       376.032348633,
                                       316.662597656,
                                       266.643341064,
                                       224.406723022,
                                       188.757797241,
                                       158.70111084,
                                       133.381164551,
                                       112.06615448,
                                       98.727722168,
                                       92.1346588135,
                                       85.9753189087,
                                       80.2224273682,
                                       74.8501815796,
                                       69.8341827393,
                                       65.2862091064,
                                       61.8940887451,
                                       58.6766357422,
                                       55.625087738,
                                       52.7310905457,
                                       49.9866943359,
                                       47.3842887878,
                                       1554.1237793,
                                       1511.89892578,
                                       1398.31689453,
                                       1242.53955078,
                                       1072.70471191,
                                       913.631103516,
                                       791.500732422,
                                       680.458190918,
                                       581.79699707,
                                       495.450836182,
                                       420.656097412,
                                       356.335296631,
                                       301.3465271,
                                       254.681488037,
                                       214.999893188,
                                       181.334152222,
                                       152.824005127,
                                       128.714950562,
                                       108.351615906,
                                       97.4852905273,
                                       91.031036377,
                                       84.9928512573,
                                       79.3460922241,
                                       74.0670623779,
                                       69.1331710815,
                                       64.8018112183,
                                       61.4521331787,
                                       58.2728424072,
                                       55.2557067871,
                                       52.3927955627,
                                       49.6765098572,
                                       47.0995864868,
                                       1242.53955078,
                                       1215.3125,
                                       1139.93933105,
                                       1031.72070312,
                                       913.631103516,
                                       811.432128906,
                                       711.604919434,
                                       618.224060059,
                                       533.334899902,
                                       457.657806396,
                                       391.113586426,
                                       333.178527832,
                                       283.233520508,
                                       240.389190674,
                                       203.691101074,
                                       172.362747192,
                                       145.689254761,
                                       123.027793884,
                                       103.808616638,
                                       95.9272842407,
                                       89.6447677612,
                                       83.7569274902,
                                       78.2422027588,
                                       73.0794143677,
                                       68.2481460571,
                                       64.1881027222,
                                       60.8917617798,
                                       57.7605171204,
                                       54.7867393494,
                                       51.9630203247,
                                       49.2822341919,
                                       46.7375259399,
                                       993.424560547,
                                       975.19708252,
                                       926.469055176,
                                       865.446105957,
                                       791.500732422,
                                       711.604919434,
                                       631.209533691,
                                       554.038146973,
                                       482.328430176,
                                       417.209503174,
                                       359.053955078,
                                       307.756866455,
                                       263.145568848,
                                       224.406723022,
                                       190.955062866,
                                       162.196685791,
                                       137.561203003,
                                       116.518371582,
                                       100.551231384,
                                       94.0806045532,
                                       87.9983291626,
                                       82.2864456177,
                                       76.9266967773,
                                       71.9007492065,
                                       67.1905670166,
                                       63.4515571594,
                                       60.2185935974,
                                       57.1445236206,
                                       54.2224197388,
                                       51.4454956055,
                                       48.8071632385,
                                       46.300994873,
                                       821.738647461,
                                       811.432128906,
                                       781.859680176,
                                       736.612304688,
                                       680.458190918,
                                       618.224060059,
                                       554.038146973,
                                       491.015136719,
                                       431.260406494,
                                       376.032348633,
                                       325.949676514,
                                       281.318328857,
                                       241.920471191,
                                       207.367233276,
                                       177.270202637,
                                       151.198699951,
                                       128.714981079,
                                       109.396255493,
                                       98.1919021606,
                                       91.9756011963,
                                       86.1172180176,
                                       80.602897644,
                                       75.4178009033,
                                       70.5465774536,
                                       65.9736938477,
                                       62.5996856689,
                                       59.4391670227,
                                       56.4305839539,
                                       53.5677680969,
                                       50.8446311951,
                                       48.2551269531,
                                       45.7933807373,
                                       688.023742676,
                                       680.458190918,
                                       658.586914062,
                                       624.660888672,
                                       581.79699707,
                                       533.334899902,
                                       482.328430176,
                                       431.260406494,
                                       381.958526611,
                                       335.640289307,
                                       293.096069336,
                                       254.681427002,
                                       220.30645752,
                                       189.852081299,
                                       163.08682251,
                                       139.716659546,
                                       119.419540405,
                                       101.869186401,
                                       95.5869064331,
                                       89.6447677612,
                                       84.0289993286,
                                       78.7296905518,
                                       73.7354660034,
                                       69.0339279175,
                                       64.8706207275,
                                       61.6408843994,
                                       58.5607948303,
                                       55.625087738,
                                       52.8284225464,
                                       50.1653556824,
                                       47.6305236816,
                                       45.2185592651,
                                       576.067199707,
                                       570.428588867,
                                       554.038146973,
                                       528.352294922,
                                       495.450836182,
                                       457.657806396,
                                       417.209503174,
                                       376.032348633,
                                       335.640289307,
                                       297.179992676,
                                       261.421112061,
                                       228.614364624,
                                       198.928222656,
                                       172.362747192,
                                       148.803924561,
                                       128.066162109,
                                       109.923492432,
                                       98.727722168,
                                       92.7755966187,
                                       87.1216278076,
                                       81.7623062134,
                                       76.6913833618,
                                       71.9007492065,
                                       67.3809127808,
                                       63.7176971436,
                                       60.5841941833,
                                       57.5914230347,
                                       54.7350311279,
                                       52.0104789734,
                                       49.4130935669,
                                       46.938117981,
                                       44.5807800293,
                                       482.328430176,
                                       478.074890137,
                                       465.659057617,
                                       446.048339844,
                                       420.656097412,
                                       391.113586426,
                                       359.053955078,
                                       325.949676514,
                                       293.096069336,
                                       261.421112061,
                                       231.480926514,
                                       203.691101074,
                                       178.274459839,
                                       155.306304932,
                                       134.755508423,
                                       116.518371582,
                                       101.297218323,
                                       95.4174804688,
                                       89.7970199585,
                                       84.4398193359,
                                       79.3460922241,
                                       74.5129318237,
                                       69.935256958,
                                       65.6360702515,
                                       62.4703788757,
                                       59.4391593933,
                                       56.5394515991,
                                       53.7678108215,
                                       51.1205253601,
                                       48.5936508179,
                                       46.1830673218,
                                       43.8845863342,
                                       403.842987061,
                                       400.60269165,
                                       391.113586426,
                                       376.032348633,
                                       356.335296631,
                                       333.178527832,
                                       307.756866455,
                                       281.318328857,
                                       254.681427002,
                                       228.614364624,
                                       203.691101074,
                                       180.30632019,
                                       158.70111084,
                                       138.99319458,
                                       121.205970764,
                                       105.29486084,
                                       97.4852981567,
                                       91.9756011963,
                                       86.6887817383,
                                       81.6321105957,
                                       76.8088912964,
                                       72.2191696167,
                                       67.8605422974,
                                       64.1881027222,
                                       61.1397399902,
                                       58.2155418396,
                                       55.4135246277,
                                       52.7310905457,
                                       50.1653556824,
                                       47.7130508423,
                                       45.3707275391,
                                       43.1347961426,
                                       338.128967285,
                                       335.640289307,
                                       328.333618164,
                                       316.662597656,
                                       301.3465271,
                                       283.233520508,
                                       263.145568848,
                                       241.920471191,
                                       220.30645752,
                                       198.928222656,
                                       178.274459839,
                                       158.70111084,
                                       140.445129395,
                                       123.643127441,
                                       108.351615906,
                                       98.9074707031,
                                       93.5875701904,
                                       88.4422607422,
                                       83.4863510132,
                                       78.7296905518,
                                       74.1781234741,
                                       69.8341827393,
                                       65.7064590454,
                                       62.6645126343,
                                       59.736907959,
                                       56.9232521057,
                                       54.2224197388,
                                       51.6327171326,
                                       49.1519355774,
                                       46.7775268555,
                                       44.5066757202,
                                       42.336353302,
                                       283.233520508,
                                       281.318328857,
                                       275.682922363,
                                       266.643341064,
                                       254.681488037,
                                       240.389190674,
                                       224.406723022,
                                       207.367233276,
                                       189.852081299,
                                       172.362747192,
                                       155.306304932,
                                       138.99319458,
                                       123.643127441,
                                       109.396255493,
                                       99.632194519,
                                       94.5781402588,
                                       89.6447677612,
                                       84.8540420532,
                                       80.2224273682,
                                       75.76171875,
                                       71.4796905518,
                                       67.3809127808,
                                       63.9857673645,
                                       61.0775909424,
                                       58.2728424072,
                                       55.5720672607,
                                       52.974937439,
                                       50.4805107117,
                                       48.0872917175,
                                       45.7933807373,
                                       43.5965652466,
                                       41.4943313599,
                                       237.367095947,
                                       235.876022339,
                                       231.480926514,
                                       224.406723022,
                                       214.999893188,
                                       203.691101074,
                                       190.955062866,
                                       177.270202637,
                                       163.08682251,
                                       148.803924561,
                                       134.755508423,
                                       121.205970764,
                                       108.351615906,
                                       99.632194519,
                                       94.9123535156,
                                       90.2564239502,
                                       85.6926956177,
                                       81.2436294556,
                                       76.9266967773,
                                       72.7549057007,
                                       68.7375793457,
                                       65.077835083,
                                       62.2131195068,
                                       59.4391593933,
                                       56.7582321167,
                                       54.1716041565,
                                       51.6796913147,
                                       49.2822341919,
                                       46.9784011841,
                                       44.7668800354,
                                       42.6460189819,
                                       40.6138343811,
                                       198.928222656,
                                       197.761489868,
                                       194.317352295,
                                       188.757797241,
                                       181.334152222,
                                       172.362747192,
                                       162.196685791,
                                       151.198699951,
                                       139.716659546,
                                       128.066162109,
                                       116.518371582,
                                       105.29486084,
                                       98.9074707031,
                                       94.5781402588,
                                       90.2564239502,
                                       85.9753189087,
                                       81.7623062134,
                                       77.6397247314,
                                       73.6254806519,
                                       69.7333374023,
                                       65.9736938477,
                                       63.1215667725,
                                       60.4009246826,
                                       57.7605171204,
                                       55.2032775879,
                                       52.7310905457,
                                       50.3450584412,
                                       48.0454750061,
                                       45.832118988,
                                       43.7042236328,
                                       41.6606483459,
                                       39.699886322,
                                       166.714080811,
                                       165.797119141,
                                       163.08682251,
                                       158.70111084,
                                       152.824005127,
                                       145.689254761,
                                       137.561203003,
                                       128.714981079,
                                       119.419540405,
                                       109.923492432,
                                       101.297218323,
                                       97.4852981567,
                                       93.5875701904,
                                       89.6447677612,
                                       85.6926956177,
                                       81.7623062134,
                                       77.8798141479,
                                       74.0670623779,
                                       70.3418579102,
                                       66.7183837891,
                                       63.7845306396,
                                       61.1397399902,
                                       58.5607872009,
                                       56.0522842407,
                                       53.6176719666,
                                       51.2593917847,
                                       48.9790611267,
                                       46.7775268555,
                                       44.6550750732,
                                       42.6114387512,
                                       40.6459236145,
                                       38.7575035095,
                                       139.71661377,
                                       138.993164062,
                                       136.852478027,
                                       133.381164551,
                                       128.714950562,
                                       123.027793884,
                                       116.518371582,
                                       109.396255493,
                                       101.869186401,
                                       98.727722168,
                                       95.4174804688,
                                       91.9756011963,
                                       88.4422607422,
                                       84.8540420532,
                                       81.2436294556,
                                       77.6397247314,
                                       74.0670623779,
                                       70.5465774536,
                                       67.0957107544,
                                       64.1881027222,
                                       61.6408843994,
                                       59.1439094543,
                                       56.7033996582,
                                       54.3243103027,
                                       52.0104789734,
                                       49.7648124695,
                                       47.5893363953,
                                       45.4853858948,
                                       43.4536628723,
                                       41.4943313599,
                                       39.6071586609,
                                       37.7914886475,
                                       117.091148376,
                                       116.518371582,
                                       114.822052002,
                                       112.06615448,
                                       108.351615906,
                                       103.808616638,
                                       100.551231384,
                                       98.1919021606,
                                       95.5869064331,
                                       92.7755966187,
                                       89.7970199585,
                                       86.6887817383,
                                       83.4863510132,
                                       80.2224273682,
                                       76.9266967773,
                                       73.6254806519,
                                       70.3418579102,
                                       67.0957107544,
                                       64.3236160278,
                                       61.8940887451,
                                       59.4985046387,
                                       57.1445236206,
                                       54.83852005,
                                       52.5856742859,
                                       50.3901405334,
                                       48.2551269531,
                                       46.1830673218,
                                       44.1756248474,
                                       42.2339172363,
                                       40.3584899902,
                                       38.5494613647,
                                       36.8065338135,
                                       100.366226196,
                                       100.18183136,
                                       99.6321716309,
                                       98.727722168,
                                       97.4852905273,
                                       95.9272842407,
                                       94.0806045532,
                                       91.9756011963,
                                       89.6447677612,
                                       87.1216278076,
                                       84.4398193359,
                                       81.6321105957,
                                       78.7296905518,
                                       75.76171875,
                                       72.7549057007,
                                       69.7333374023,
                                       66.7183837891,
                                       64.1881027222,
                                       61.8940887451,
                                       59.6175003052,
                                       57.3672447205,
                                       55.1509132385,
                                       52.974937439,
                                       50.8446311951,
                                       48.7643356323,
                                       46.7375259399,
                                       44.7668800354,
                                       42.8544273376,
                                       41.0015525818,
                                       39.2091522217,
                                       37.4776496887,
                                       35.8070869446,
                                       93.5875701904,
                                       93.4242019653,
                                       92.9370193481,
                                       92.1346588135,
                                       91.031036377,
                                       89.6447677612,
                                       87.9983291626,
                                       86.1172180176,
                                       84.0289993286,
                                       81.7623062134,
                                       79.3460922241,
                                       76.8088912964,
                                       74.1781234741,
                                       71.4796905518,
                                       68.7375793457,
                                       65.9736938477,
                                       63.7845306396,
                                       61.6408843994,
                                       59.4985046387,
                                       57.3672447205,
                                       55.2557067871,
                                       53.1713485718,
                                       51.1205253601,
                                       49.1086196899,
                                       47.1400909424,
                                       45.2185668945,
                                       43.3469619751,
                                       41.5275192261,
                                       39.7618980408,
                                       38.0512619019,
                                       36.396320343,
                                       34.7973823547,
                                       87.2667160034,
                                       87.1216278076,
                                       86.6887664795,
                                       85.9753189087,
                                       84.9928512573,
                                       83.7569274902,
                                       82.2864456177,
                                       80.602897644,
                                       78.7296905518,
                                       76.6913833618,
                                       74.5129318237,
                                       72.2191696167,
                                       69.8341827393,
                                       67.3809127808,
                                       65.077835083,
                                       63.1215667725,
                                       61.1397399902,
                                       59.1439094543,
                                       57.1445236206,
                                       55.1509132385,
                                       53.1713485718,
                                       51.2130279541,
                                       49.2822341919,
                                       47.3842887878,
                                       45.5237045288,
                                       43.7042160034,
                                       41.9289016724,
                                       40.2001571655,
                                       38.5198707581,
                                       36.8894119263,
                                       35.3097419739,
                                       33.7813949585,
                                       81.3727798462,
                                       81.2436294556,
                                       80.8581924438,
                                       80.2224273682,
                                       79.3460922241,
                                       78.2422027588,
                                       76.9266967773,
                                       75.4178009033,
                                       73.7354660034,
                                       71.9007492065,
                                       69.935256958,
                                       67.8605422974,
                                       65.7064590454,
                                       63.9857673645,
                                       62.2131195068,
                                       60.4009246826,
                                       58.5607872009,
                                       56.7033996582,
                                       54.83852005,
                                       52.974937439,
                                       51.1205253601,
                                       49.2822341919,
                                       47.4661407471,
                                       45.6774940491,
                                       43.9208030701,
                                       42.199848175,
                                       40.5177879333,
                                       38.877155304,
                                       37.2799949646,
                                       35.7278671265,
                                       34.2218933105,
                                       32.9320831299,
                                       75.8769226074,
                                       75.76171875,
                                       75.4178009033,
                                       74.8501815796,
                                       74.0670623779,
                                       73.0794143677,
                                       71.9007492065,
                                       70.5465774536,
                                       69.0339279175,
                                       67.3809127808,
                                       65.6360702515,
                                       64.1881027222,
                                       62.6645126343,
                                       61.0775909424,
                                       59.4391593933,
                                       57.7605171204,
                                       56.0522842407,
                                       54.3243103027,
                                       52.5856742859,
                                       50.8446311951,
                                       49.1086196899,
                                       47.3842887878,
                                       45.6774940491,
                                       43.9933776855,
                                       42.336353302,
                                       40.7102241516,
                                       39.1181678772,
                                       37.5628471375,
                                       36.0463790894,
                                       34.5704689026,
                                       33.2245254517,
                                       32.1316642761,
                                       70.7522583008,
                                       70.6492919922,
                                       70.3418579102,
                                       69.8341827393,
                                       69.1331710815,
                                       68.2481460571,
                                       67.1905670166,
                                       65.9736938477,
                                       64.8706207275,
                                       63.7176971436,
                                       62.4703788757,
                                       61.1397399902,
                                       59.736907959,
                                       58.2728424072,
                                       56.7582321167,
                                       55.2032775879,
                                       53.6176719666,
                                       52.0104789734,
                                       50.3901405334,
                                       48.7643356323,
                                       47.1400909424,
                                       45.5237045288,
                                       43.9208030701,
                                       42.336353302,
                                       40.7746887207,
                                       39.2395439148,
                                       37.7341346741,
                                       36.2611160278,
                                       34.8227424622,
                                       33.4466362,
                                       32.3772735596,
                                       31.328754425,
                                       65.9736862183,
                                       65.8815155029,
                                       65.6360702515,
                                       65.2862091064,
                                       64.8018112183,
                                       64.1881027222,
                                       63.4515571594,
                                       62.5996856689,
                                       61.6408843994,
                                       60.5841941833,
                                       59.4391593933,
                                       58.2155418396,
                                       56.9232521057,
                                       55.5720672607,
                                       54.1716041565,
                                       52.7310905457,
                                       51.2593917847,
                                       49.7648124695,
                                       48.2551269531,
                                       46.7375259399,
                                       45.2185668945,
                                       43.7042160034,
                                       42.199848175,
                                       40.7102241516,
                                       39.2395439148,
                                       37.7914886475,
                                       36.3692169189,
                                       34.9754295349,
                                       33.6123847961,
                                       32.5545730591,
                                       31.5306549072,
                                       30.5255126953,
                                       62.4703788757,
                                       62.4058837891,
                                       62.2131195068,
                                       61.8940887451,
                                       61.4521331787,
                                       60.8917617798,
                                       60.2185935974,
                                       59.4391670227,
                                       58.5607948303,
                                       57.5914230347,
                                       56.5394515991,
                                       55.4135246277,
                                       54.2224197388,
                                       52.974937439,
                                       51.6796913147,
                                       50.3450584412,
                                       48.9790611267,
                                       47.5893363953,
                                       46.1830673218,
                                       44.7668800354,
                                       43.3469619751,
                                       41.9289016724,
                                       40.5177879333,
                                       39.1181678772,
                                       37.7341346741,
                                       36.3692169189,
                                       35.0265541077,
                                       33.7088127136,
                                       32.6617202759,
                                       31.6664142609,
                                       30.6867351532,
                                       29.723903656,
                                       59.2027587891,
                                       59.1439094543,
                                       58.9679450989,
                                       58.6766357422,
                                       58.2728424072,
                                       57.7605171204,
                                       57.1445236206,
                                       56.4305839539,
                                       55.625087738,
                                       54.7350311279,
                                       53.7678108215,
                                       52.7310905457,
                                       51.6327171326,
                                       50.4805107117,
                                       49.2822341919,
                                       48.0454750061,
                                       46.7775268555,
                                       45.4853858948,
                                       44.1756248474,
                                       42.8544273376,
                                       41.5275192261,
                                       40.2001571655,
                                       38.877155304,
                                       37.5628471375,
                                       36.2611160278,
                                       34.9754295349,
                                       33.7088127136,
                                       32.6975517273,
                                       31.7346553802,
                                       30.7841281891,
                                       29.8474140167,
                                       28.9257545471,
                                       56.1060714722,
                                       56.0522842407,
                                       55.8914489746,
                                       55.625087738,
                                       55.2557067871,
                                       54.7867393494,
                                       54.2224197388,
                                       53.5677680969,
                                       52.8284225464,
                                       52.0104789734,
                                       51.1205253601,
                                       50.1653556824,
                                       49.1519355774,
                                       48.0872917175,
                                       46.9784011841,
                                       45.832118988,
                                       44.6550750732,
                                       43.4536628723,
                                       42.2339172363,
                                       41.0015525818,
                                       39.7618980408,
                                       38.5198707581,
                                       37.2799949646,
                                       36.0463790894,
                                       34.8227424622,
                                       33.6123847961,
                                       32.6617202759,
                                       31.7346553802,
                                       30.8167037964,
                                       29.9094753265,
                                       29.0143985748,
                                       28.1327323914,
                                       53.1713485718,
                                       53.1221389771,
                                       52.974937439,
                                       52.7310905457,
                                       52.3927955627,
                                       51.9630203247,
                                       51.4454956055,
                                       50.8446311951,
                                       50.1653556824,
                                       49.4130935669,
                                       48.5936508179,
                                       47.7130508423,
                                       46.7775268555,
                                       45.7933807373,
                                       44.7668800354,
                                       43.7042236328,
                                       42.6114387512,
                                       41.4943313599,
                                       40.3584899902,
                                       39.2091522217,
                                       38.0512619019,
                                       36.8894119263,
                                       35.7278671265,
                                       34.5704689026,
                                       33.4466362,
                                       32.5545730591,
                                       31.6664142609,
                                       30.7841281891,
                                       29.9094753265,
                                       29.0440425873,
                                       28.1892433167,
                                       27.3463401794,
                                       50.3901405334,
                                       50.3450584412,
                                       50.2101821899,
                                       49.9866943359,
                                       49.6765098572,
                                       49.2822341919,
                                       48.8071632385,
                                       48.2551269531,
                                       47.6305236816,
                                       46.938117981,
                                       46.1830673218,
                                       45.3707275391,
                                       44.5066757202,
                                       43.5965652466,
                                       42.6460189819,
                                       41.6606483459,
                                       40.6459236145,
                                       39.6071586609,
                                       38.5494613647,
                                       37.4776496887,
                                       36.396320343,
                                       35.3097419739,
                                       34.2218933105,
                                       33.2245254517,
                                       32.3772735596,
                                       31.5306549072,
                                       30.6867351532,
                                       29.8474140167,
                                       29.0143985748,
                                       28.1892433167,
                                       27.3733463287,
                                       26.5679397583,
                                       47.7544021606,
                                       47.7130508423,
                                       47.5893363953,
                                       47.3842887878,
                                       47.0995864868,
                                       46.7375259399,
                                       46.300994873,
                                       45.7933807373,
                                       45.2185592651,
                                       44.5807800293,
                                       43.8845863342,
                                       43.1347961426,
                                       42.336353302,
                                       41.4943313599,
                                       40.6138343811,
                                       39.699886322,
                                       38.7575035095,
                                       37.7914886475,
                                       36.8065338135,
                                       35.8070869446,
                                       34.7973823547,
                                       33.7813949585,
                                       32.9320831299,
                                       32.1316642761,
                                       31.328754425,
                                       30.5255126953,
                                       29.723903656,
                                       28.9257545471,
                                       28.1327323914,
                                       27.3463401794,
                                       26.5679397583,
                                       25.7987575531}};

ap_uint<24> inv_matrix_8_fix[3][64] = {
    {0,      573440, 571914, 500934, 438764, 384309, 336613, 294836, 573440, 573440, 554300, 490277, 431664,
     379299, 332941, 292072, 571914, 554300, 512454, 462308, 412154, 365186, 322442, 284093, 500934, 490277,
     462308, 424880, 384309, 344238, 306460, 271733, 438764, 431664, 412154, 384309, 352272, 319103, 286702,
     256122, 384309, 379299, 365186, 344238, 319103, 292072, 264820, 238433, 336613, 332941, 322442, 306460,
     286702, 264820, 242160, 219708, 294836, 292072, 284093, 271733, 256122, 238433, 219708, 200777},
    {0,       3225600, 3214600, 2712197, 2288313, 1930677, 1628936, 1374353, 3225600, 3225600, 3088189,
     2638422, 2240937, 1898460, 1606185, 1357854, 3214600, 3088189, 2792443, 2446967, 2111879, 1808349,
     1541522, 1310462, 2712197, 2638422, 2446967, 2195873, 1930677, 1676412, 1444223, 1237800, 2288313,
     2240937, 2111879, 1930677, 1726752, 1521076, 1325921, 1086047, 1930677, 1898460, 1808349, 1676412,
     1521076, 1357854, 1197559, 804826,  1628936, 1606185, 1541522, 1444223, 1325921, 1197559, 858830,
     571430,  1374353, 1357854, 1310462, 1237800, 1086047, 804826,  571430,  391838},
    {0,     301014, 173537, 122278, 87381,  87381,  85556, 60284, 301014, 239204, 159771, 115525, 87381,
     87381, 83112,  58803,  173537, 159771, 129848, 98919, 87381, 87381,  76366,  54653,  122278, 115525,
     98919, 87381,  87381,  87381,  66768,  48594,  87381, 87381, 87381,  87381,  87381,  74294,  55990,
     40365, 87381,  87381,  87381,  87381,  74294,  58803, 45395, 29913,  85556,  83112,  76366,  66768,
     55990, 45395,  31920,  21238,  60284,  58803,  54653, 48594, 40365,  29913,  21238,  14563}};

ap_uint<24> inv_matrix_16_fix[3][256] = {
    {0,       0,       2441638, 2110453, 1805935, 1527539, 1292059, 1092880, 979637,  882036,  794159,  720192,
     660388,  605551,  555267,  513377,  0,       0,       2359049, 2061117, 1769095, 1502424, 1274280, 1079954,
     973257,  876924,  790013,  717366,  658011,  603538,  553552,  512061,  2441638, 2359049, 2163900, 1929223,
     1668681, 1432145, 1223726, 1056519, 954648,  861946,  777824,  709020,  650980,  597575,  548467,  508152,
     2110453, 2061117, 1929223, 1734043, 1527539, 1329150, 1147596, 1019948, 925274,  838103,  758296,  695541,
     639580,  587878,  541090,  501757,  1805935, 1769095, 1668681, 1527539, 1368461, 1207734, 1064198, 973257,
     887210,  806857,  734675,  677512,  624254,  574785,  531076,  493051,  1527539, 1502424, 1432145, 1329150,
     1207734, 1079954, 999342,  919628,  842764,  769898,  709020,  655651,  605551,  558724,  518704,  482257,
     1292059, 1274280, 1223726, 1147596, 1064198, 999342,  930994,  861946,  794159,  731730,  680030,  630735,
     584081,  541090,  504297,  469635,  1092880, 1079954, 1056519, 1019948, 973257,  919628,  861946,  802580,
     743657,  695541,  648668,  603538,  560468,  522767,  488199,  455467,  979637,  973257,  954648,  925274,
     887210,  842764,  794159,  743657,  700870,  658011,  615808,  574785,  536755,  503024,  470758,  440042,
     882036,  876924,  861946,  838103,  806857,  769898,  731730,  695541,  658011,  620003,  582200,  545493,
     513377,  482257,  452306,  423640,  794159,  790013,  777824,  758296,  734675,  709020,  680030,  648668,
     615808,  582200,  548467,  518704,  489404,  460825,  433156,  404651,  720192,  717366,  709020,  695541,
     677512,  655651,  630735,  603538,  574785,  545493,  518704,  491830,  465193,  439046,  412893,  384233,
     660388,  658011,  650980,  639580,  624254,  605551,  584081,  560468,  536755,  513377,  489404,  465193,
     441041,  417116,  389895,  363695,  605551,  603538,  597575,  587878,  574785,  558724,  541090,  522767,
     503024,  482257,  460825,  439046,  417116,  391813,  367140,  343268,  555267,  553552,  548467,  541090,
     531076,  518704,  504297,  488199,  470758,  452306,  433156,  412893,  389895,  367140,  344835,  323147,
     513377,  512061,  508152,  501757,  493051,  482257,  469635,  455467,  440042,  423640,  404651,  384233,
     363695,  343268,  323147,  303491},
    {0,       0,       5751209, 4544049, 3799576, 3391573, 3027382, 2702299, 2436075, 2197740, 1982723, 1763518,
     1534572, 1335348, 1161989, 974727,  0,       0,       5440084, 4373603, 3746811, 3353638, 2999054, 2680571,
     2420510, 2185243, 1972567, 1752429, 1525721, 1328236, 1156239, 968844,  5751209, 5440084, 4731487, 3973698,
     3601163, 3246381, 2917801, 2623494, 2375098, 2148620, 1942705, 1719843, 1499653, 1307247, 1139247, 951484,
     4544049, 4373603, 3973698, 3696279, 3391573, 3086079, 2793372, 2534376, 2303382, 2090297, 1894846, 1667696,
     1457751, 1273387, 1103434, 923481,  3799576, 3746811, 3601163, 3391573, 3147719, 2891875, 2642200, 2420510,
     2210386, 2013818, 1820750, 1598900, 1402122, 1228203, 1055862, 886125,  3391573, 3353638, 3246381, 3086079,
     2891875, 2680571, 2484135, 2289592, 2101702, 1923283, 1719843, 1516952, 1335348, 1173618, 998753,  841041,
     3027382, 2999054, 2917801, 2793372, 2642200, 2484135, 2317350, 2148620, 1982723, 1809059, 1608443, 1425546,
     1260221, 1103434, 934545,  790037,  2702299, 2680571, 2623494, 2534376, 2420510, 2289592, 2148620, 2003346,
     1856592, 1667696, 1491121, 1328236, 1179499, 1017307, 865695,  734963,  2436075, 2420510, 2375098, 2303382,
     2210386, 2101702, 1982723, 1856592, 1688240, 1525721, 1371816, 1228203, 1082691, 928991,  794499,  677590,
     2197740, 2185243, 2148620, 2090297, 2013818, 1923283, 1809059, 1667696, 1525721, 1386839, 1253715, 1124732,
     974727,  841041,  722986,  619515,  1982723, 1972567, 1942705, 1894846, 1820750, 1719843, 1608443, 1491121,
     1371816, 1253715, 1139247, 998752,  870742,  755519,  652842,  544631,  1763518, 1752429, 1719843, 1667696,
     1598900, 1516952, 1425546, 1328236, 1228203, 1124732, 998752,  880957,  772520,  673980,  578732,  465986,
     1534572, 1525721, 1499653, 1457751, 1402122, 1335348, 1260221, 1179499, 1082691, 974727,  870742,  772520,
     681226,  596747,  486978,  394922,  1335348, 1328236, 1307247, 1273387, 1228203, 1173618, 1103434, 1017307,
     928991,  841041,  755519,  673980,  596747,  494226,  406298,  331816,  1161989, 1156239, 1139247, 1103434,
     1055862, 998753,  934545,  865695,  794499,  722986,  652842,  578732,  486978,  406298,  336400,  276619,
     974727,  968844,  951484,  923481,  886125,  841041,  790037,  734963,  677590,  619515,  544631,  465986,
     394922,  331816,  276619,  228975},
    {0,      0,      630388, 459728, 346040, 270138, 210885, 164629, 145236, 129332, 115170, 103181, 93307,  84378,
     76303,  60309,  0,      0,      585115, 436769, 335651, 263595, 206607, 161757, 144191, 128504, 114506, 102711,
     92918,  84053,  76030,  59794,  630388, 585115, 485316, 381545, 307860, 245565, 194600, 157883, 141148, 126081,
     112555, 101326, 91767,  83090,  75220,  58282,  459728, 436769, 381545, 325861, 270138, 219900, 176964, 151854,
     136356, 122232, 109437, 99095,  89905,  81527,  71893,  55867,  346040, 335651, 307860, 270138, 229587, 190851,
     159151, 144191, 130171, 117207, 105593, 96120,  87409,  79424,  67542,  52693,  270138, 263595, 245565, 219900,
     190851, 161757, 148468, 135437, 122984, 111288, 101326, 92531,  84378,  76855,  62426,  48936,  210885, 206607,
     194600, 176964, 159151, 148468, 137288, 126081, 115170, 105102, 96535,  88463,  80917,  71893,  56818,  44786,
     164629, 161757, 157883, 151854, 144191, 135437, 126081, 116520, 107092, 99095,  91389,  84053,  77133,  64075,
     50981,  40428,  145236, 144191, 141148, 136356, 130171, 122984, 115170, 107092, 99976,  92918,  86039,  79424,
     69986,  56340,  45145,  36032,  129332, 128504, 126081, 122232, 117207, 111288, 105102, 99095,  92918,  86719,
     80614,  73866,  60309,  48936,  39498,  31736,  115170, 114506, 112555, 109437, 105593, 101326, 96535,  91389,
     86039,  80614,  75220,  62426,  51402,  42040,  34182,  25375,  103181, 102711, 101326, 99095,  96120,  92531,
     88463,  84053,  79424,  73866,  62426,  52258,  43386,  35760,  28391,  19017,  93307,  92918,  91767,  89905,
     87409,  84378,  80917,  77133,  69986,  60309,  51402,  43386,  36306,  30047,  20632,  14004,  84378,  84053,
     83090,  81527,  79424,  76855,  71893,  64075,  56340,  48936,  42040,  35760,  30047,  21203,  14759,  10149,
     76303,  76030,  75220,  71893,  67542,  62426,  56818,  50981,  45145,  39498,  34182,  28391,  20632,  14759,
     10410,  7249,   60309,  59794,  58282,  55867,  52693,  48936,  44786,  40428,  36032,  31736,  25375,  19017,
     14004,  10149,  7249,   5111}};

ap_uint<24> inv_matrix_32_fix[3][1024] = {
    {0,       0,       0,       0,       5131959, 4670491, 4250519, 3878761, 3542927, 3236170, 2955973, 2700037,
     2466260, 2274087, 2118957, 1974409, 1839722, 1714223, 1597285, 1490256, 1397152, 1309866, 1228032, 1151311,
     1079383, 1011949, 954704,  901007,  850330,  802503,  757366,  714767,  0,       0,       0,       0,
     5072775, 4627118, 4217502, 3853877, 3523007, 3219979, 2942652, 2688968, 2456987, 2267924, 2113623, 1969770,
     1835669, 1710667, 1594156, 1487730, 1394902, 1307856, 1226234, 1149698, 1077934, 1010645, 953642,  900042,
     849451,  801702,  756636,  714101,  0,       0,       0,       0,       4908661, 4504031, 4123432, 3781605,
     3464803, 3172463, 2903431, 2656298, 2429565, 2249644, 2097784, 1955978, 1823608, 1700081, 1584833, 1480198,
     1388190, 1301861, 1220866, 1144883, 1073606, 1006935, 950469,  897157,  846825,  799309,  754452,  712106,
     0,       0,       0,       0,       4670491, 4318764, 3982627, 3668379, 3372610, 3096591, 2840422, 2603565,
     2385137, 2219847, 2071905, 1933401, 1803834, 1682702, 1569509, 1467797, 1377130, 1291973, 1212008, 1136931,
     1066456, 1001153, 945218,  892382,  842477,  795345,  750834,  708800,  5131959, 5072775, 4908661, 4670491,
     4390194, 4094197, 3805312, 3523007, 3252544, 2996713, 2756785, 2533105, 2331170, 2179470, 2036722, 1902624,
     1776815, 1658906, 1548492, 1450748, 1361905, 1278347, 1199788, 1125953, 1056576, 993151,  937947,  885767,
     836451,  789848,  745815,  704212,  4670491, 4627118, 4504031, 4318764, 4094197, 3853877, 3604336, 3354843,
     3111448, 2877883, 2656298, 2447781, 2274087, 2129705, 1993181, 1864403, 1743163, 1629194, 1522192, 1429345,
     1342761, 1261188, 1184381, 1112095, 1044091, 983020,  928735,  877378,  828804,  782869,  739438,  698619,
     4250519, 4217502, 4123432, 3982627, 3805312, 3604336, 3390593, 3172463, 2955973, 2745243, 2542942, 2350878,
     2208155, 2071905, 1942371, 1819621, 1703597, 1594156, 1492790, 1403941, 1319993, 1240747, 1165998, 1095537,
     1029156, 970871,  917676,  867300,  819609,  774471,  731761,  692068,  3878761, 3853877, 3781605, 3668379,
     3523007, 3354843, 3172463, 2983002, 2792006, 2603565, 2420554, 2267924, 2135121, 2007491, 1885454, 1769234,
     1658906, 1554446, 1460446, 1374937, 1293940, 1217309, 1144883, 1076488, 1011949, 956834,  904884,  855630,
     808951,  764729,  722846,  684452,  3542927, 3523007, 3464803, 3372610, 3252544, 3111448, 2955973, 2792006,
     2624408, 2456987, 2305432, 2179470, 2056680, 1937876, 1823608, 1714223, 1609913, 1510754, 1424666, 1342761,
     1264967, 1191187, 1121302, 1055177, 994288,  941052,  890484,  842477,  796927,  753726,  712770,  675828,
     3236170, 3219979, 3172463, 3096591, 2996713, 2877883, 2745243, 2603565, 2456987, 2318226, 2202356, 2087355,
     1974409, 1864403, 1757973, 1655557, 1557438, 1467797, 1385966, 1307856, 1233454, 1162707, 1095537, 1031846,
     975260,  923681,  874611,  827961,  783640,  741554,  701628,  666259,  2955973, 2942652, 2903431, 2840422,
     2756785, 2656298, 2542942, 2420554, 2305432, 2202356, 2097784, 1993181, 1889719, 1788302, 1689615, 1594156,
     1503004, 1422336, 1344864, 1270671, 1199788, 1132204, 1067880, 1006935, 954704,  904884,  857409,  812207,
     769201,  728312,  690299,  655815,  2700037, 2688968, 2656298, 2603565, 2533105, 2447781, 2350878, 2267924,
     2179470, 2087355, 1993181, 1898303, 1803834, 1710668, 1619502, 1530871, 1450748, 1374937, 1301861, 1231642,
     1164351, 1100012, 1038620, 983020,  932811,  884828,  839025,  795345,  753726,  714101,  678111,  644568,
     2466260, 2456987, 2429565, 2385137, 2331170, 2274087, 2208155, 2135121, 2056680, 1974409, 1889719, 1803834,
     1717792, 1632448, 1548492, 1470262, 1397152, 1326135, 1257429, 1191187, 1127510, 1066456, 1008099, 957902,
     909769,  863682,  819609,  777508,  737332,  699219,  665148,  632591,  2274087, 2267924, 2249644, 2219847,
     2179470, 2129705, 2071905, 2007491, 1937876, 1864403, 1788302, 1710668, 1632448, 1554446, 1480198, 1410789,
     1342761, 1276421, 1212008, 1149698, 1089617, 1031846, 979682,  931789,  885767,  841612,  799309,  758829,
     720138,  684452,  651494,  619962,  2118957, 2113623, 2097784, 2071905, 2036722, 1993181, 1942371, 1885454,
     1823608, 1757973, 1689615, 1619502, 1548492, 1480198, 1415388, 1351210, 1288054, 1226234, 1165998, 1107538,
     1050997, 997710,  950469,  904884,  860984,  818781,  778271,  739438,  702260,  669051,  637236,  606756,
     1974409, 1969770, 1955978, 1933401, 1902624, 1864403, 1819621, 1769234, 1714223, 1655557, 1594156, 1530871,
     1470262, 1410789, 1351210, 1291973, 1233454, 1175965, 1119759, 1065035, 1011949, 965432,  920670,  877378,
     835596,  795345,  756636,  719463,  685033,  653109,  622456,  593050,  1839722, 1835669, 1823608, 1803834,
     1776815, 1743163, 1703597, 1658906, 1609913, 1557438, 1503004, 1450748, 1397152, 1342761, 1288054, 1233454,
     1179319, 1125953, 1073606, 1022482, 976362,  932811,  890484,  849451,  809763,  771453,  734538,  699219,
     667374,  636717,  607238,  578919,  1714223, 1710667, 1700081, 1682702, 1658906, 1629194, 1594156, 1554446,
     1510754, 1467797, 1422336, 1374937, 1326135, 1276421, 1226234, 1175965, 1125953, 1076488, 1027816, 983020,
     941052,  900042,  860088,  821268,  783640,  747243,  712106,  679831,  649351,  619962,  591660,  564435,
     1597285, 1594156, 1584833, 1569509, 1548492, 1522192, 1492790, 1460446, 1424666, 1385966, 1344864, 1301861,
     1257429, 1212008, 1165998, 1119759, 1073606, 1027816, 985257,  945218,  905857,  867300,  829648,  792982,
     757366,  722846,  690299,  660181,  631055,  602927,  575800,  549669,  1490256, 1487730, 1480198, 1467797,
     1450748, 1429345, 1403941, 1374937, 1342761, 1307856, 1270671, 1231642, 1191187, 1149698, 1107538, 1065035,
     1022482, 983020,  945218,  907810,  870943,  834742,  799309,  764729,  731069,  698619,  669051,  640362,
     612571,  585692,  559730,  534687,  1397152, 1394902, 1388190, 1377130, 1361905, 1342761, 1319993, 1293940,
     1264967, 1233454, 1199788, 1164351, 1127510, 1089617, 1050997, 1011949, 976362,  941052,  905857,  870943,
     836451,  802503,  769201,  736632,  704865,  675828,  647750,  620459,  593980,  568330,  543519,  519552,
     1309866, 1307856, 1301861, 1291973, 1278347, 1261188, 1240747, 1217309, 1191187, 1162707, 1132204, 1100012,
     1066456, 1031846, 997710,  965432,  932811,  900042,  867300,  834742,  802503,  770701,  739438,  708800,
     680406,  653109,  626480,  600553,  575356,  550911,  527232,  504325,  1228032, 1226234, 1220866, 1212008,
     1199788, 1184381, 1165998, 1144883, 1121302, 1095537, 1067880, 1038620, 1008099, 979682,  950469,  920670,
     890484,  860088,  829648,  799309,  769201,  739438,  710120,  682713,  656358,  630543,  605316,  580713,
     556767,  533499,  510927,  492344,  1151311, 1149698, 1144883, 1136931, 1125953, 1112095, 1095537, 1076488,
     1055177, 1031846, 1006935, 983020,  957902,  931789,  904884,  877378,  849451,  821268,  792982,  764729,
     736632,  708800,  682713,  657447,  632591,  608202,  584327,  561007,  538274,  516151,  496368,  481317,
     1079383, 1077934, 1073606, 1066456, 1056576, 1044091, 1029156, 1011949, 994288,  975260,  954704,  932811,
     909769,  885767,  860984,  835596,  809763,  783640,  757366,  731069,  704865,  680406,  656358,  632591,
     609169,  586147,  563576,  541493,  519932,  499422,  484703,  470233,  1011949, 1010645, 1006935, 1001153,
     993151,  983020,  970871,  956834,  941052,  923681,  904884,  884828,  863682,  841612,  818781,  795345,
     771453,  747243,  722846,  698619,  675828,  653109,  630543,  608202,  586147,  564435,  543113,  522221,
     501793,  487146,  473022,  459122,  954704,  953642,  950469,  945218,  937947,  928735,  917676,  904884,
     890484,  874611,  857409,  839025,  819609,  799309,  778271,  756636,  734538,  712106,  690299,  669051,
     647750,  626480,  605316,  584327,  563576,  543113,  522987,  503238,  488622,  474897,  461354,  448010,
     901007,  900042,  897157,  892382,  885767,  877378,  867300,  855630,  842477,  827961,  812207,  795345,
     777508,  758829,  739438,  719463,  699219,  679831,  660181,  640362,  620459,  600553,  580713,  561007,
     541493,  522221,  503238,  489115,  475839,  462701,  449723,  436922,  850330,  849451,  846825,  842477,
     836451,  828804,  819609,  808951,  796927,  783640,  769201,  753726,  737332,  720138,  702260,  685033,
     667374,  649351,  631055,  612571,  593980,  575356,  556767,  538274,  519932,  501793,  488622,  475839,
     463152,  450584,  438155,  425882,  802503,  801702,  799309,  795345,  789848,  782869,  774471,  764729,
     753726,  741554,  728312,  714101,  699219,  684452,  669051,  653109,  636717,  619962,  602927,  585692,
     568330,  550911,  533499,  516151,  499422,  487146,  474897,  462701,  450584,  438567,  426670,  414910,
     757366,  756636,  754452,  750834,  745815,  739438,  731761,  722846,  712770,  701628,  690299,  678111,
     665148,  651494,  637236,  622456,  607238,  591660,  575800,  559730,  543519,  527232,  510927,  496368,
     484703,  473022,  461354,  449723,  438155,  426670,  415287,  404024,  714767,  714101,  712106,  708800,
     704212,  698619,  692068,  684452,  675828,  666259,  655815,  644568,  632591,  619962,  606756,  593050,
     578919,  564435,  549669,  534687,  519552,  504325,  492344,  481317,  470233,  459122,  448010,  436922,
     425882,  414910,  404024,  393243},
    {0,        0,       0,       0,       10256567, 9163795, 8187452, 7334503, 6576615,  5897041,  5287688, 4741301,
     4251374,  3823808, 3450992, 3114525, 2810863,  2536807, 2289472, 2087679, 1978480,  1874992,  1776918, 1683973,
     1595891,  1512415, 1420110, 1332765, 1250792,  1173861, 1101662, 1033903, 0,        0,        0,       0,
     10115302, 9062138, 8111468, 7277870, 6532108,  5861525, 5259001, 4717901, 4232130,  3808773,  3438387, 3103905,
     2801875,  2529171, 2282962, 2084732, 1975826,  1872597, 1774751, 1682009, 1594106,  1510791,  1418378, 1331200,
     1249376,  1172578, 1100497, 1032846, 0,        0,       0,       0,       9725277,  8774666,  7895240, 7113812,
     6402356,  5757510, 5174699, 4648953, 4175309,  3764280, 3401038, 3072400, 2775187,  2506479,  2263603, 2075939,
     1967905,  1865445, 1768278, 1676139, 1588774,  1505526, 1413203, 1326521, 1245141,  1168739,  1097015, 1029682,
     0,        0,       0,       0,       9163795,  8344872, 7571685, 6858080, 6197748,  5592084,  5039753, 4538028,
     4083526,  3692107, 3340291, 3021045, 2731603,  2469362, 2231895, 2061445, 1954839,  1853638,  1757587, 1666439,
     1579957,  1496049, 1404644, 1318782, 1238133,  1162385, 1091248, 1024442, 10256567, 10115302, 9725277, 9163795,
     8510160,  7827871, 7167557, 6532108, 5932993,  5375578, 4861571, 4390531, 3963957,  3595004,  3258255, 2951472,
     2672398,  2418824, 2188634, 2041485, 1936825,  1837343, 1742818, 1653028, 1567758,  1482942,  1392801, 1308065,
     1228424,  1153579, 1083251, 1017173, 9163795,  9062138, 8774666, 8344872, 7827871,  7277870,  6714142, 6158448,
     5624412,  5119910, 4648953, 4213040, 3823808,  3476438, 3157611, 2865780, 2599225,  2356177,  2134869, 2016372,
     1914124,  1816782, 1724159, 1636067, 1552316,  1466362, 1377806, 1294488, 1216114,  1142407,  1073100, 1008579,
     8187452,  8111468, 7895240, 7571685, 7167557,  6714142, 6237570, 5757510, 5287688,  4837070,  4411073, 4012705,
     3663905,  3340291, 3041417, 2766381, 2514008,  2282962, 2090635, 1986483, 1887057,  1792226,  1701844, 1615756,
     1533801,  1446502, 1359827, 1278192, 1201328,  1128976, 1060888, 998743,  7334503,  7277870,  7113812, 6858080,
     6532108,  6158448, 5757510, 5345971, 4936475,  4538028, 4156665, 3808773, 3489280,  3190579,  2912880, 2655858,
     2418824,  2200862, 2052844, 1952246, 1855988,  1763987, 1676139, 1592325, 1512415,  1423584,  1339055, 1259345,
     1184209,  1113412, 1046725, 987310,  6576615,  6532108, 6402356, 6197748, 5932993,  5624412,  5287688, 4936475,
     4581817,  4232130, 3900570, 3595003, 3304714,  3031203, 2775187, 2536808, 2315800,  2111617,  2010873, 1914124,
     1821314,  1732406, 1647339, 1566029, 1484803,  1397857, 1315706, 1238133, 1164921,  1095858,  1030735, 974370,
     5897041,  5861525, 5757510, 5592084, 5375578,  5119910, 4837070, 4538028, 4232130,  3932039,  3649944, 3376518,
     3114525,  2865780, 2631349, 2411736, 2207015,  2061445, 1965279, 1872597, 1783449,  1697843,  1615756, 1537139,
     1453673,  1369587, 1290011, 1214758, 1143640,  1076467, 1013100, 960022,  5287688,  5259001,  5174699, 5039753,
     4861571,  4648953, 4411073, 4156665, 3900570,  3649944, 3401038, 3157611, 2922451,  2697519,  2484105, 2282962,
     2102541,  2008134, 1916621, 1828151, 1742818,  1660667, 1581713, 1505526, 1420110,  1339055,  1262216, 1189436,
     1120554,  1055406, 996086,  944370,  4741301,  4717901, 4648953, 4538028, 4390531,  4213040,  4012705, 3808773,
     3595003,  3376518, 3157611, 2941747, 2731603,  2529172, 2335853, 2152565, 2041485,  1952246,  1865445, 1781267,
     1699841,  1621251, 1545538, 1466362, 1384439,  1306546, 1232570, 1162385, 1095858,  1032846,  977795,  927525,
     4251374,  4232130, 4175309, 4083526, 3963957,  3823808, 3663905, 3489280, 3304714,  3114525,  2922451, 2731603,
     2544480,  2363013, 2188634, 2064328, 1978480,  1894367, 1812271, 1732406, 1654932,  1579957,  1507434, 1425326,
     1346984,  1272346, 1201328, 1133832, 1069748,  1009480, 958355,  909602,  3823808,  3808773,  3764280, 3692107,
     3595004,  3476438, 3340291, 3190579, 3031203,  2865780, 2697519, 2529172, 2363013,  2200862,  2075939, 1994549,
     1914124,  1835037, 1757587, 1682009, 1608481,  1537139, 1460902, 1382776, 1308065,  1236738,  1168739, 1103997,
     1042424,  987310,  937898,  890716,  3450992,  3438387, 3401038, 3340291, 3258255,  3157611,  3041417, 2912880,
     2775187,  2631349, 2484105, 2335853, 2188634,  2075939, 1999962, 1924150, 1848955,  1774751,  1701844, 1630482,
     1560861,  1490409, 1413203, 1339055, 1267989,  1199997, 1135051, 1073100, 1014081,  964208,   916551,  870986,
     3114525,  3103905, 3072400, 3021045, 2951472,  2865780, 2766381, 2655858, 2536808,  2411736,  2282962, 2152565,
     2064328,  1994549, 1924150, 1853638, 1783449,  1713950, 1645451, 1578204, 1512415,  1437617,  1364693, 1294488,
     1227047,  1162385, 1100497, 1041353, 988182,   940317,  894445,  850526,  2810863,  2801875,  2775187, 2731603,
     2672398,  2599225, 2514008, 2418824, 2315800,  2207015, 2102541, 2041485, 1978480,  1914124,  1848955, 1783449,
     1718021,  1653028, 1588774, 1525514, 1455475,  1384439, 1315706, 1249376, 1185512,  1124152,  1065304, 1009480,
     961693,   915775,  871705,  829452,  2536807,  2529171, 2506479, 2469362, 2418824,  2356177,  2282962, 2200862,
     2111617,  2061445, 2008134, 1952246, 1894367,  1835037, 1774751, 1713950, 1653028,  1592325,  1532138, 1466362,
     1397857,  1331200, 1266542, 1203995, 1143640,  1085527, 1029682, 980376,  934687,   890716,   848451,  807872,
     2289472,  2282962, 2263603, 2231895, 2188634,  2134869, 2090635, 2052844, 2010873,  1965279,  1916621, 1865445,
     1812271,  1757587, 1701844, 1645451, 1588774,  1532138, 1470021, 1404644, 1340635,  1278192,  1217473, 1158599,
     1101662,  1046725, 996086,  950912,  907303,   865268,  824802,  785895,  2087679,  2084732,  2075939, 2061445,
     2041485,  2016372, 1986483, 1952246, 1914124,  1872597, 1828151, 1781267, 1732406,  1682009,  1630482, 1578204,
     1525514,  1466362, 1404644, 1343804, 1284080,  1225671, 1168739, 1113412, 1059788,  1008579,  964208,  921230,
     879672,   839549,  800867,  763621,  1978480,  1975826, 1967905, 1954839, 1936825,  1914124,  1887057, 1855988,
     1821314,  1783449, 1742818, 1699841, 1654932,  1608481, 1560861, 1512415, 1455475,  1397857,  1340635, 1284080,
     1228424,  1173861, 1120554, 1068634, 1018207,  974370,  932290,  891460,  851914,   813673,   776750,  741147,
     1874992,  1872597, 1865445, 1853638, 1837343,  1816782, 1792226, 1763987, 1732406,  1697843,  1660667, 1621251,
     1579957,  1537139, 1490409, 1437617, 1384439,  1331200, 1278192, 1225671, 1173861,  1122950,  1073100, 1024442,
     981238,   940316,  900461,  861723,  824141,   787744,  752548,  718562,  1776918,  1774751,  1768278, 1757587,
     1742818,  1724159, 1701844, 1676139, 1647339,  1615756, 1581713, 1545538, 1507434,  1460902,  1413203, 1364693,
     1315706,  1266542, 1217473, 1168739, 1120554,  1073100, 1026533, 984701,  945184,   906539,   868835,  832126,
     796456,   761857,  728350,  701409,  1683973,  1682009, 1676139, 1666439, 1653028,  1636067,  1615756, 1592325,
     1566029,  1537139, 1505526, 1466362, 1425326,  1382776, 1339055, 1294488, 1249376,  1203995,  1158599, 1113412,
     1068634,  1024442, 984701,  946815,  909602,   873145,  837515,  802768,  768952,   736100,   707081,  685862,
     1595891,  1594106, 1588774, 1579957, 1567758,  1552316, 1533801, 1512415, 1484803,  1453673,  1420110, 1384439,
     1346984,  1308065, 1267989, 1227047, 1185512,  1143640, 1101662, 1059788, 1018207,  981238,   945184,  909602,
     874589,   840229,  806592,  773737,  741711,   711387,  690636,  670231,  1512415,  1510791,  1505526, 1496049,
     1482942,  1466362, 1446502, 1423584, 1397857,  1369587, 1339055, 1306546, 1272346,  1236738,  1199997, 1162385,
     1124152,  1085527, 1046725, 1008579, 974370,   940316,  906539,  873145,  840229,   807872,   776146,  745108,
     714808,   694081,  674165,  654558,  1420110,  1418378, 1413203, 1404644, 1392801,  1377806,  1359827, 1339055,
     1315706,  1290011, 1262216, 1232570, 1201328,  1168739, 1135051, 1100497, 1065304,  1029682,  996086,  964208,
     932290,   900461,  868835,  837515,  806592,   776146,  746245,  716949,  696161,   676809,   657707,  638880,
     1332765,  1331200, 1326521, 1318782, 1308065,  1294488, 1278192, 1259345, 1238133,  1214758,  1189436, 1162385,
     1133832,  1103997, 1073100, 1041353, 1009480,  980376,  950912,  921230,  891460,   861723,   832126,  802768,
     773737,   745108,  716949,  696857,  678137,   659608,  641298,  623233,  1250792,  1249376,  1245141, 1238133,
     1228424,  1216114, 1201328, 1184209, 1164921,  1143640, 1120554, 1095858, 1069748,  1042424,  1014081, 988182,
     961693,   934687,  907303,  879672,  851914,   824141,  796456,  768952,  741711,   714808,   696161,  678137,
     660244,   642513,  624972,  607647,  1173861,  1172578, 1168739, 1162385, 1153579,  1142407,  1128976, 1113412,
     1095858,  1076467, 1055406, 1032846, 1009480,  987310,  964208,  940317,  915775,   890716,   865268,  839549,
     813673,   787744,  761857,  736100,  711387,   694081,  676809,  659608,  642513,   625554,   608759,  592154,
     1101662,  1100497, 1097015, 1091248, 1083251,  1073100, 1060888, 1046725, 1030735,  1013100,  996086,  977795,
     958355,   937898,  916551,  894445,  871705,   848451,  824802,  800867,  776750,   752548,   728350,  707081,
     690636,   674165,  657707,  641298,  624972,   608759,  592687,  576779,  1033903,  1032846,  1029682, 1024442,
     1017173,  1008579, 998743,  987310,  974370,   960022,  944370,  927525,  909602,   890716,   870986,  850526,
     829452,   807872,  785895,  763621,  741147,   718562,  701409,  685862,  670231,   654558,   638880,  623233,
     607647,   592154,  576779,  561546},
    {0,       0,       0,       0,       1591422, 1272360, 1017266, 841460,  704536, 589892,  493904,  413535,  346244,
     290031,  243063,  203702,  170715,  143069,  119901,  102775,  95833,   89361,  83325,   77697,   72450,   67557,
     63969,   60623,   57452,   54447,   51599,   48900,   0,       0,       0,      0,       1548184, 1244480, 998601,
     830906,  696789,  584118,  489548,  410217,  343695,  288069,  241537,  202507, 169776,  142329,  119314,  102586,
     95666,   89212,   83193,   77580,   72344,   67462,   63903,   60563,   57397,  54397,   51553,   48858,   0,
     0,       0,       0,       1431876, 1167297, 948704,  800624,  674393,  567335, 476834,  400500,  336213,  282299,
     237036,  198980,  167000,  140136,  117577,  102023,  95167,   88769,   82798,  77227,   72030,   67211,   63706,
     60383,   57232,   54246,   51415,   48731,   0,       0,       0,       0,      1272360, 1056482, 886216,  754291,
     639652,  541032,  456753,  385057,  324262,  273042,  229792,  193287,  162509, 136582,  114755,  101097,  94345,
     88038,   82147,   76646,   71510,   66853,   63379,   60084,   56960,   53996,  51186,   48521,   1591422, 1548184,
     1431876, 1272360, 1098449, 935558,  810496,  696789,  595760,  507341,  430751, 364887,  308578,  260793,  220159,
     185686,  156491,  131804,  110952,  99824,   93215,   87032,   81250,   75844,  70792,   66357,   62926,   59671,
     56581,   53650,   50868,   48229,   1272360, 1244480, 1167297, 1056482, 935558, 830906,  728683,  633061,  546134,
     468641,  400500,  341174,  290031,  246158,  208579,  176499,  149185,  125980, 106300,  98229,   91796,   85767,
     80120,   74833,   69886,   65728,   62353,   59146,   56101,   53210,   50465,  47859,   1017266, 998601,  948704,
     886216,  810496,  728683,  646358,  567335,  493904,  427222,  367671,  315143, 269461,  229792,  195537,  166089,
     140862,  119314,  102964,  96338,   90110,   84261,   78772,   73626,   68803,  64974,   61663,   58515,   55523,
     52680,   49978,   47412,   841460,  830906,  800624,  754291,  696789,  633061, 567335,  502799,  441610,  385057,
     333772,  288069,  247726,  212344,  181524,  154827,  131804,  112021,  100548, 94183,   88184,   82537,   77227,
     72239,   67557,   64102,   60865,   57784,   54853,   52064,   49413,   46892,  704536,  696789,  674393,  639652,
     595760,  546134,  493904,  441610,  391125,  343695,  300130,  260793,  225593, 194408,  167000,  143069,  122285,
     104314,  97880,   91796,   86045,   80619,   75505,   70690,   66427,   63120,  59966,   56960,   54096,   51369,
     48773,   46303,   589892,  584118,  567335,  541032,  507341,  468641,  427222, 385057,  343695,  304312,  267695,
     234101,  203702,  176499,  152375,  131139,  112561,  101097,  95002,   89212,  83724,   78531,   73626,   68998,
     65246,   62038,   58973,   56048,   53258,   50599,   48064,   45650,   493904, 489548,  476834,  456753,  430751,
     400500,  367671,  333772,  300130,  267695,  237036,  208579,  182553,  159033, 137989,  119314,  103728,  97707,
     91952,   86466,   81250,   76301,   71613,   67211,   63969,   60865,   57896,  55058,   52347,   49759,   47291,
     44937,   413535,  410217,  400500,  385057,  364887,  341174,  315143,  288069, 260793,  234101,  208579,  184633,
     162509,  142329,  124114,  107821,  99824,   94183,   88769,   83591,   78652,  73952,   69489,   65728,   62607,
     59612,   56743,   53996,   51369,   48858,   46459,   44170,   346244,  343695, 336213,  324262,  308578,  290031,
     269461,  247726,  225593,  203702,  182553,  162509,  143815,  126610,  110952, 101281,  95833,   90564,   85490,
     80619,   75958,   71510,   67283,   64168,   61170,   58289,   55523,   52871,  50331,   47900,   45574,   43352,
     290031,  288069,  282299,  273042,  260793,  246158,  229792,  212344,  194408, 176499,  159033,  142329,  126610,
     112021,  102023,  96848,   91796,   86890,   82147,   77580,   73195,   68998,  65521,   62543,   59671,   56905,
     54246,   51692,   49241,   46892,   44642,   42490,   243063,  241537,  237036, 229792,  220159,  208579,  195537,
     181524,  167000,  152375,  137989,  124114,  110952,  102023,  97190,   92422,  87749,   83193,   78772,   74501,
     70387,   66639,   63706,   60865,   58120,   55471,   52920,   50465,   48105,  45841,   43669,   41588,   203702,
     202507,  198980,  193287,  185686,  176499,  166089,  154827,  143069,  131139, 119314,  107821,  101281,  96848,
     92422,   88038,   83724,   79503,   75392,   71406,   67557,   64636,   61850,  59146,   56528,   53996,   51553,
     49198,   46932,   44753,   42660,   40652,   170715,  169776,  167000,  162509, 156491,  149185,  140862,  131804,
     122285,  112561,  103728,  99824,   95833,   91796,   87749,   83724,   79748,  75844,   72030,   68319,   65315,
     62607,   59966,   57397,   54904,   52489,   50154,   47900,   45726,   43634,  41621,   39687,   143069,  142329,
     140136,  136582,  131804,  125980,  119314,  112021,  104314,  101097,  97707,  94183,   90564,   86890,   83193,
     79503,   75844,   72239,   68706,   65728,   63120,   60563,   58064,   55628,  53258,   50959,   48731,   46577,
     44496,   42490,   40557,   38698,   119901,  119314,  117577,  114755,  110952, 106300,  102964,  100548,  97880,
     95002,   91952,   88769,   85490,   82147,   78772,   75392,   72030,   68706,  65867,   63379,   60926,   58515,
     56154,   53847,   51599,   49413,   47291,   45235,   43247,   41327,   39474,  37689,   102775,  102586,  102023,
     101097,  99824,   98229,   96338,   94183,   91796,   89212,   86466,   83591,  80619,   77580,   74501,   71406,
     68319,   65728,   63379,   61048,   58744,   56474,   54246,   52064,   49934,  47859,   45841,   43882,   41985,
     40150,   38377,   36666,   95833,   95666,   95167,   94345,   93215,   91796,  90110,   88184,   86045,   83724,
     81250,   78652,   75958,   73195,   70387,   67557,   65315,   63120,   60926,  58744,   56581,   54447,   52347,
     50287,   48271,   46303,   44387,   42524,   40716,   38964,   37269,   35632,  89361,   89212,   88769,   88038,
     87032,   85767,   84261,   82537,   80619,   78531,   76301,   73952,   71510,  68998,   66639,   64636,   62607,
     60563,   58515,   56474,   54447,   52442,   50465,   48521,   46616,   44753,  42935,   41164,   39444,   37774,
     36157,   34592,   83325,   83193,   82798,   82147,   81250,   80120,   78772,  77227,   75505,   73626,   71613,
     69489,   67283,   65521,   63706,   61850,   59966,   58064,   56154,   54246,  52347,   50465,   48605,   46773,
     44974,   43212,   41490,   39810,   38174,   36585,   35043,   33722,   77697,  77580,   77227,   76646,   75844,
     74833,   73626,   72239,   70690,   68998,   67211,   65728,   64168,   62543,  60865,   59146,   57397,   55628,
     53847,   52064,   50287,   48521,   46773,   45049,   43352,   41687,   40057,  38464,   36911,   35400,   34021,
     32902,   72450,   72344,   72030,   71510,   70792,   69886,   68803,   67557,  66427,   65246,   63969,   62607,
     61170,   59671,   58120,   56528,   54904,   53258,   51599,   49934,   48271,  46616,   44974,   43352,   41753,
     40181,   38639,   37131,   35658,   34249,   33154,   32080,   67557,   67462,  67211,   66853,   66357,   65728,
     64974,   64102,   63120,   62038,   60865,   59612,   58289,   56905,   55471,  53996,   52489,   50959,   49413,
     47859,   46303,   44753,   43212,   41687,   40181,   38698,   37242,   35814,  34419,   33335,   32287,   31258,
     63969,   63903,   63706,   63379,   62926,   62353,   61663,   60865,   59966,  58973,   57896,   56743,   55523,
     54246,   52920,   51553,   50154,   48731,   47291,   45841,   44387,   42935,  41490,   40057,   38639,   37242,
     35867,   34517,   33445,   32426,   31423,   30437,   60623,   60563,   60383,  60084,   59671,   59146,   58515,
     57784,   56960,   56048,   55058,   53996,   52871,   51692,   50465,   49198,  47900,   46577,   45235,   43882,
     42524,   41164,   39810,   38464,   37131,   35814,   34517,   33482,   32496,  31522,   30563,   29619,   57452,
     57397,   57232,   56960,   56581,   56101,   55523,   54853,   54096,   53258,  52347,   51369,   50331,   49241,
     48105,   46932,   45726,   44496,   43247,   41985,   40716,   39444,   38174,  36911,   35658,   34419,   33445,
     32496,   31556,   30627,   29710,   28807,   54447,   54397,   54246,   53996,  53650,   53210,   52680,   52064,
     51369,   50599,   49759,   48858,   47900,   46892,   45841,   44753,   43634,  42490,   41327,   40150,   38964,
     37774,   36585,   35400,   34249,   33335,   32426,   31522,   30627,   29741,  28865,   28002,   51599,   51553,
     51415,   51186,   50868,   50465,   49978,   49413,   48773,   48064,   47291,  46459,   45574,   44642,   43669,
     42660,   41621,   40557,   39474,   38377,   37269,   36157,   35043,   34021,  33154,   32287,   31423,   30563,
     29710,   28865,   28030,   27205,   48900,   48858,   48731,   48521,   48229,  47859,   47412,   46892,   46303,
     45650,   44937,   44170,   43352,   42490,   41588,   40652,   39687,   38698,  37689,   36666,   35632,   34592,
     33722,   32902,   32080,   31258,   30437,   29619,   28807,   28002,   27205,  26417}};

const uint8_t LUTCeilLog2Nonzero[1024] = {
    127, 0,  1,  2,  2,  3,  3,  3,  3,  4,  4,  4,  4,  4,  4,  4,  4,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,
    5,   5,  5,  5,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,
    6,   6,  6,  6,  6,  6,  6,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,
    7,   7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,
    7,   7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,
    8,   8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,
    8,   8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,
    8,   8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,
    8,   8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  9,  9,  9,  9,
    9,   9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,
    9,   9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,
    9,   9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,
    9,   9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,
    9,   9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,
    9,   9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,
    9,   9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,
    9,   9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,
    9,   9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  10, 10, 10, 10, 10, 10, 10, 10, 10,
    10,  10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
    10,  10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
    10,  10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
    10,  10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
    10,  10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
    10,  10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
    10,  10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
    10,  10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
    10,  10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
    10,  10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
    10,  10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
    10,  10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
    10,  10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
    10,  10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
    10,  10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
    10,  10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
    10,  10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
    10,  10, 10, 10, 10, 10, 10, 10, 10};

//==========================================================//
// load data
//==========================================================//
void load_dct8_pixel(unsigned ysize, unsigned xsize, float* axi_opsin, hls::stream<float>& opsin8x8_stream) {
#pragma HLS INLINE off

    int tile_xsize = (xsize + 63) / 64 * 64;
    int tile_ysize = (ysize + 63) / 64 * 64;
    uint32_t ysize64 = tile_ysize / 64;
    uint32_t xsize64 = tile_xsize / 64;

loop_load_dct8_pixel:
    for (int i = 0; i < ysize64 * xsize64; i++) {
        uint32_t addr = i * 4096 * 3;
        for (int j = 0; j < 4096 * 3; j++) {
#pragma HLS PIPELINE II = 1
            float reg = axi_opsin[addr + j];
            opsin8x8_stream.write(reg);
        }
    }
}

void load_dct16_pixel(unsigned ysize, unsigned xsize, float* axi_opsin, hls::stream<float>& opsin16x16_stream) {
#pragma HLS INLINE off
    int tile_xsize = (xsize + 63) / 64 * 64;
    int tile_ysize = (ysize + 63) / 64 * 64;
    uint32_t ysize64 = tile_ysize / 64;
    uint32_t xsize64 = tile_xsize / 64;

loop_load_dct16_pixel:
    for (int i = 0; i < ysize64 * xsize64; i++) {
        uint32_t addr = i * 4096 * 3;
        for (int j = 0; j < 4096 * 3; j++) {
#pragma HLS PIPELINE II = 1
            float reg = axi_opsin[addr + j];
            opsin16x16_stream.write(reg);
        }
    }
}

void load_dct32_pixel(unsigned ysize, unsigned xsize, float* axi_opsin, hls::stream<float>& opsin32x32_stream) {
#pragma HLS INLINE off
    int tile_xsize = (xsize + 63) / 64 * 64;
    int tile_ysize = (ysize + 63) / 64 * 64;
    uint32_t ysize64 = tile_ysize / 64;
    uint32_t xsize64 = tile_xsize / 64;

loop_load_dct32_pixel:
    for (int i = 0; i < ysize64 * xsize64; i++) {
        uint32_t addr = i * 4096 * 3;
        for (int j = 0; j < 4096 * 3; j++) {
#pragma HLS PIPELINE II = 1
            float reg = axi_opsin[addr + j];
            opsin32x32_stream.write(reg);
        }
    }
}

void loadPixel(unsigned ysize,
               unsigned xsize,
               float* axi_opsin_1,
               float* axi_opsin_2,
               float* axi_opsin_3,
               hls::stream<float>& opsin8x8_stream,
               hls::stream<float>& opsin16x16_stream,
               hls::stream<float>& opsin32x32_stream) {
#pragma HLS INLINE
    load_dct8_pixel(ysize, xsize, axi_opsin_1, opsin8x8_stream);
    load_dct16_pixel(ysize, xsize, axi_opsin_2, opsin16x16_stream);
    load_dct32_pixel(ysize, xsize, axi_opsin_3, opsin32x32_stream);
}

void load_rqf_mask(int xsize,
                   int ysize,
                   float* aq_map_f,
                   float* masking_field_row,
                   float* quant_field_row,
                   int stride,
                   hls::stream<float>& stream_q,
                   hls::stream<float>& stream_mask,
                   hls::stream<float>& stream_rqf) {
#pragma HLS INLINE off
    int xsize_blocks = xsize / 8;
    int ysize_blocks = ysize / 8;
    int n_enc_tiles = (xsize_blocks + 7) / 8;
    uint32_t xnum_tile = (xsize_blocks + 7) / 8;
    uint32_t ynum_tile = (ysize_blocks + 7) / 8;
LOOP_0:
    for (int tid = 0; tid < xnum_tile * ynum_tile; tid++) {
        int tx1 = tid % n_enc_tiles;
        int ty1 = tid / n_enc_tiles;
        int by = ty1 * 8;
        int by1 = fmin((int)((ty1 + 1) * 8), ysize_blocks);
        int bx = tx1 * 8;
        int bx1 = fmin((int)((tx1 + 1) * 8), xsize_blocks);
        int rect_ysize = by1 - by;
        int rect_xsize = bx1 - bx;
    LOOP_1:
        for (int iy = 0; iy < rect_ysize; iy++) {
        LOOP_2:
            for (int ix = 0; ix < rect_xsize; ix++) {
#pragma HLS PIPELINE II = 1
                int x = 8 * (bx + ix);
                int y = 8 * (by + iy);
                int index0 = (y / 8 * stride) + x / 8;
                float quant_norm8 = 0;
                float masking = 0;
                quant_norm8 = quant_field_row[index0];
                stream_q.write(quant_norm8);
                masking = masking_field_row[index0];
                stream_mask.write(masking);
                int index = (by + iy) * xsize_blocks + (bx + ix);
                float rqf_tmp = aq_map_f[index];
                stream_rqf.write(rqf_tmp);
            }
        }
    }
}

//==========================================================================//
// data write out
//==========================================================================//
void ac_coeff_writeout(int xsize, int ysize, hls::stream<int>& ac_coef_strm, int* ac_coef_axiout) {
    unsigned xsizeblock = (xsize + 7) / 8;
    unsigned ysizeblock = (ysize + 7) / 8;
    for (int i = 0; i < xsizeblock * ysizeblock * 3 * 64; i++) {
        ac_coef_axiout[i] = ac_coef_strm.read();
    }
}

void dc_8x8_writeout(unsigned ysize,
                     unsigned xsize,
                     float* hls_dc8x8,
                     hls::stream<uint8_t>& stream_rectx_dc0,
                     hls::stream<uint8_t>& stream_recty_dc0,
                     hls::stream<float>& dc_coef8x8_stream) {
#pragma HLS INLINE off
    int tile_xsize = (xsize + 63) / 64 * 64;
    int tile_ysize = (ysize + 63) / 64 * 64;
    uint32_t ysize64 = tile_ysize / 64;
    uint32_t xsize64 = tile_xsize / 64;
    uint32_t ysize32 = tile_ysize / 32;
    uint32_t xsize32 = tile_xsize / 32;
    uint32_t ysize16 = tile_ysize / 16;
    uint32_t xsize16 = tile_xsize / 16;
    uint32_t ysize8 = tile_ysize / 8;
    uint32_t xsize8 = tile_xsize / 8;

    // dc writeout
    int N = 1;
    int block_n = N * N;
    int block_half_n = N * 8;
    int xsize_blocks = xsize / 8;
    int ysize_blocks = ysize / 8;
    int n_enc_tiles = (xsize_blocks + 7) / 8;
loop_dc8_writeout:
    for (uint32_t y64 = 0; y64 < ysize64; y64++) {
        for (uint32_t x64 = 0; x64 < xsize64; x64++) {
            int rect_ysize = stream_recty_dc0.read();
            int rect_xsize = stream_rectx_dc0.read();
            for (uint32_t y8 = 0; y8 < 8; y8++) {
                for (uint32_t x8 = 0; x8 < 8; x8++) {
                    for (int c = 0; c < 3; c++) {
#pragma HLS PIPELINE II = 1
                        int c_tmp = 0;
                        if (c == 0) {
                            c_tmp = 1;
                        } else if (c == 1) {
                            c_tmp = 0;
                        } else {
                            c_tmp = 2;
                        }

                        size_t addr = y64 * xsize8 * 8 + x64 * 8 + y8 * xsize8 + x8;

                        if (x8 < rect_xsize && y8 < rect_ysize) {
                            float reg = dc_coef8x8_stream.read();
                            hls_dc8x8[c_tmp * tile_ysize * tile_xsize + addr] = reg;
                        }
                    }
                }
            }
        }
    }
}

void dc_16x16_writeout(unsigned ysize,
                       unsigned xsize,
                       float* hls_dc16x16,
                       hls::stream<uint8_t>& stream_rectx_dc1,
                       hls::stream<uint8_t>& stream_recty_dc1,
                       hls::stream<float>& dc_coef16x16_stream) {
#pragma HLS INLINE off
    int tile_xsize = (xsize + 63) / 64 * 64;
    int tile_ysize = (ysize + 63) / 64 * 64;
    size_t ysize64 = tile_ysize / 64;
    size_t xsize64 = tile_xsize / 64;
    size_t ysize32 = tile_ysize / 32;
    size_t xsize32 = tile_xsize / 32;
    size_t ysize16 = tile_ysize / 16;
    size_t xsize16 = tile_xsize / 16;
    size_t ysize8 = tile_ysize / 8;
    size_t xsize8 = tile_xsize / 8;
    int N = 2;
    int block_n = N * N;
    int block_half_n = N * 8;
    int xsize_blocks = xsize / 8;
    int ysize_blocks = ysize / 8;
    int n_enc_tiles = (xsize_blocks + 7) / 8;
    for (size_t y64 = 0; y64 < ysize64; y64++) {
        for (size_t x64 = 0; x64 < xsize64; x64++) {
            int rect_ysize = stream_recty_dc1.read();
            int rect_xsize = stream_rectx_dc1.read();
            for (size_t y16 = 0; y16 < 4; y16++) {
                for (size_t x16 = 0; x16 < 4; x16++) {
                    for (int c = 0; c < 3; c++) {
                        for (size_t m = 0; m < 2; m++) {
                            for (size_t n = 0; n < 2; n++) {
#pragma HLS PIPELINE II = 1
                                // edge judgement
                                // int tx1 = x64; // tid % n_enc_tiles;
                                // int ty1 = y64; // tid / n_enc_tiles;
                                // int by = ty1 * 8;
                                // int by1 = fmin((int)((ty1 + 1) * 8), ysize_blocks);
                                // int bx = tx1 * 8;
                                // int bx1 = fmin((int)((tx1 + 1) * 8), xsize_blocks);
                                // int rect_ysize = by1 - by;
                                // int rect_xsize = bx1 - bx;
                                // int tile_xsize = (xsize + 63) / 64 * 64;
                                // int tile_ysize = (ysize + 63) / 64 * 64;

                                int c_tmp = 0;
                                if (c == 0) {
                                    c_tmp = 1;
                                } else if (c == 1) {
                                    c_tmp = 0;
                                } else {
                                    c_tmp = 2;
                                }

                                size_t addr =
                                    y64 * xsize16 * 4 * 4 + x64 * 4 * 4 + y16 * xsize16 * 4 + x16 * 4 + m * 2 + n;

                                if ((2 * x16 + 1) < rect_xsize && (2 * y16 + 1) < rect_ysize) {
                                    float reg = dc_coef16x16_stream.read();
                                    hls_dc16x16[c_tmp * tile_ysize * tile_xsize + addr] = reg;
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}

void dc_32x32_writeout(unsigned ysize,
                       unsigned xsize,
                       float* hls_dc32x32,
                       hls::stream<uint8_t>& stream_rectx_dc2,
                       hls::stream<uint8_t>& stream_recty_dc2,
                       hls::stream<float>& dc_coef32x32_stream) {
#pragma HLS INLINE off
    int tile_xsize = (xsize + 63) / 64 * 64;
    int tile_ysize = (ysize + 63) / 64 * 64;
    size_t ysize64 = tile_ysize / 64;
    size_t xsize64 = tile_xsize / 64;
    size_t ysize32 = tile_ysize / 32;
    size_t xsize32 = tile_xsize / 32;
    size_t ysize16 = tile_ysize / 16;
    size_t xsize16 = tile_xsize / 16;
    size_t ysize8 = tile_ysize / 8;
    size_t xsize8 = tile_xsize / 8;
    int N = 4;
    int block_n = N * N;
    int block_half_n = N * 8;
    int xsize_blocks = xsize / 8;
    int ysize_blocks = ysize / 8;
    int n_enc_tiles = (xsize_blocks + 7) / 8;
    for (size_t y64 = 0; y64 < ysize64; y64++) {
        for (size_t x64 = 0; x64 < xsize64; x64++) {
            int rect_ysize = stream_recty_dc2.read();
            int rect_xsize = stream_rectx_dc2.read();
            for (size_t y32 = 0; y32 < 2; y32++) {
                for (size_t x32 = 0; x32 < 2; x32++) {
                    for (int c = 0; c < 3; c++) {
                        for (size_t m = 0; m < 4; m++) {
                            for (size_t n = 0; n < 4; n++) {
#pragma HLS PIPELINE II = 1
                                // edge judgement
                                // int tx1 = x64; // tid % n_enc_tiles;
                                // int ty1 = y64; // tid / n_enc_tiles;
                                // int by = ty1 * 8;
                                // int by1 = fmin((int)((ty1 + 1) * 8), ysize_blocks);
                                // int bx = tx1 * 8;
                                // int bx1 = fmin((int)((tx1 + 1) * 8), xsize_blocks);
                                // int rect_ysize = by1 - by;
                                // int rect_xsize = bx1 - bx;
                                // int tile_xsize = (xsize + 63) / 64 * 64;
                                // int tile_ysize = (ysize + 63) / 64 * 64;

                                int c_tmp = 0;
                                if (c == 0) {
                                    c_tmp = 1;
                                } else if (c == 1) {
                                    c_tmp = 0;
                                } else {
                                    c_tmp = 2;
                                }

                                size_t addr = y64 * xsize32 * 2 * 16 + x64 * 2 * 16 + y32 * xsize32 * 1 * 16 +
                                              x32 * 1 * 16 + m * 4 + n;

                                if ((4 * x32 + 3) < rect_xsize && (4 * y32 + 3) < rect_ysize) {
                                    float reg = dc_coef32x32_stream.read();
                                    hls_dc32x32[c_tmp * tile_ysize * tile_xsize + addr] = reg;
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}

void GetDCSize(short xsize,
               short ysize,
               hls::stream<uint8_t>& stream_rectx_dc,
               hls::stream<uint8_t>& stream_recty_dc,
               hls::stream<uint8_t>& stream_rectx0,
               hls::stream<uint8_t>& stream_recty0,
               hls::stream<uint8_t>& stream_rectx1,
               hls::stream<uint8_t>& stream_recty1,
               hls::stream<uint8_t>& stream_rectx2,
               hls::stream<uint8_t>& stream_recty2) {
    uint16_t xsize_blocks = xsize / 8;
    uint16_t ysize_blocks = ysize / 8;
LOOP_0:
    for (uint16_t y = 0; y < (ysize_blocks + 8 - 1) / 8; y++) {
    LOOP_1:
        for (uint16_t x = 0; x < (xsize_blocks + 8 - 1) / 8; x++) {
#pragma HLS LOOP_TRIPCOUNT min = 64 max = 64
            uint8_t rect_ysize = stream_recty_dc.read();
            uint8_t rect_xsize = stream_rectx_dc.read();
            stream_rectx0.write(rect_xsize);
            stream_recty0.write(rect_ysize);
            stream_rectx1.write(rect_xsize);
            stream_recty1.write(rect_ysize);
            stream_rectx2.write(rect_xsize);
            stream_recty2.write(rect_ysize);
        }
    }
}
void dc_writeout(unsigned ysize,
                 unsigned xsize,
                 float* hls_dc8x8,
                 float* hls_dc16x16,
                 float* hls_dc32x32,

                 hls::stream<uint8_t>& stream_rectx_dc,
                 hls::stream<uint8_t>& stream_recty_dc,
                 hls::stream<float>& dc_coef8x8_stream,
                 hls::stream<float>& dc_coef16x16_stream,
                 hls::stream<float>& dc_coef32x32_stream) {
#pragma HLS INLINE
    hls::stream<uint8_t, 1024> stream_rectx_dc0;
    hls::stream<uint8_t, 1024> stream_recty_dc0;
    hls::stream<uint8_t, 1024> stream_rectx_dc1;
    hls::stream<uint8_t, 1024> stream_recty_dc1;
    hls::stream<uint8_t, 1024> stream_rectx_dc2;
    hls::stream<uint8_t, 1024> stream_recty_dc2;
    GetDCSize(xsize, ysize, stream_rectx_dc, stream_recty_dc, stream_rectx_dc0, stream_recty_dc0, stream_rectx_dc1,
              stream_recty_dc1, stream_rectx_dc2, stream_recty_dc2);
    dc_8x8_writeout(ysize, xsize, hls_dc8x8, stream_rectx_dc0, stream_recty_dc0, dc_coef8x8_stream);
    dc_16x16_writeout(ysize, xsize, hls_dc16x16, stream_rectx_dc1, stream_recty_dc1, dc_coef16x16_stream);
    dc_32x32_writeout(ysize, xsize, hls_dc32x32, stream_rectx_dc2, stream_recty_dc2, dc_coef32x32_stream);
}

void cfl_writeout(unsigned xsize,
                  unsigned ysize,
                  hls::stream<int8_t>& cmapx_strm,
                  hls::stream<int8_t>& cmapb_strm,
                  int8_t* cmap_axi) {
#pragma HLS INLINE off

    int xnum_tile = (xsize + 63) / 64;
    int ynum_tile = (ysize + 63) / 64;
    int num_tile = xnum_tile * ynum_tile;

    for (int tid = 0; tid < num_tile; tid++) {
#pragma HLS PIPELINE II = 2
        cmap_axi[tid] = cmapx_strm.read();
        cmap_axi[num_tile + tid] = cmapb_strm.read();
    }
}

void acs_rqf_writeout(int xsize,
                      int ysize,
                      unsigned char* strategy_all,
                      int* raw_quant_field_i,
                      hls::stream<uint8_t>& stream_strategy,
                      hls::stream<int>& stream_rqf) {
#pragma HLS INLINE off
    int xsize_blocks = xsize / 8;
    int ysize_blocks = ysize / 8;
    uint32_t xnum_tile = (xsize_blocks + 7) / 8;
    uint32_t ynum_tile = (ysize_blocks + 7) / 8;
    ap_uint<64> visited;
LOOP_1:
    for (uint8_t ty1 = 0; ty1 < ynum_tile; ty1++) {
    LOOP_2:
        for (uint8_t tx1 = 0; tx1 < xnum_tile; tx1++) {
#pragma HLS LOOP_TRIPCOUNT min = 64 max = 64
            int by0 = ty1 * 8;
            int by1 = fmin((int)((ty1 + 1) * 8), ysize_blocks);
            int bx0 = tx1 * 8;
            int bx1 = fmin((int)((tx1 + 1) * 8), xsize_blocks);
            int rect_ysize = by1 - by0;
            int rect_xsize = bx1 - bx0;
            visited = 0;
        LOOP_3:
            for (uint8_t y = 0; y < rect_ysize; ++y) {
#pragma HLS LOOP_TRIPCOUNT min = 8 max = 8
            LOOP_4:
                for (uint8_t x = 0; x < rect_xsize; ++x) {
#pragma HLS LOOP_TRIPCOUNT min = 8 max = 8
                    uint8_t idx = y * 8 + x;
                    if (visited.range(idx, idx) == 0) {
                        char strategy = stream_strategy.read();
                        int rqf = stream_rqf.read();
                        int b = strategy_block[strategy];
                    LOOP_5:
                        for (uint8_t iy = 0; iy < b; iy++) {
                        LOOP_6:
                            for (uint8_t ix = 0; ix < b; ix++) {
#pragma HLS pipeline
                                uint16_t idx = (iy + y) * 8 + (ix + x);
                                visited.range(idx, idx) = 1;
                                uint16_t idxout = (y + by0 + iy) * xsize_blocks + (x + bx0 + ix);
                                strategy_all[(y + by0 + iy) * xsize_blocks + (x + bx0 + ix)] = strategy;
                                raw_quant_field_i[(y + by0 + iy) * xsize_blocks + (x + bx0 + ix)] = rqf;
                            }
                        }
                    }
                }
            }
        }
    }
}

//=========================================================//
// module
//=========================================================//
// cfl -----------------------------------------------------
void hls_CFLComputeTile(unsigned xsize,
                        unsigned ysize,
                        hls::stream<float>& ac_coef_strm,
                        hls::stream<int>& rqf_in_stream,
                        hls::stream<uint8_t>& acs_strm,
                        hls::stream<int8_t>& cmapx_strm,
                        hls::stream<int8_t>& cmapb_strm,
                        hls::stream<int8_t>& cmapx_axi_strm,
                        hls::stream<int8_t>& cmapb_axi_strm,
                        hls::stream<float>& ac_coef_cflout_strm,
                        hls::stream<int>& rqf_out_stream,
                        hls::stream<uint8_t>& acs_cflout_strm) {
#pragma HLS INLINE off
    const uint8_t kDefaultColorFactor = 84U;
    const float kInvColorFactor = 1.0f / kDefaultColorFactor;
    const float kYToBRatio = 1.0f;
    const float kDistanceMultiplierAC = 1e-3f;

    unsigned xsize_alg = (xsize + 7) / 8 * 8;
    unsigned ysize_alg = (ysize + 7) / 8 * 8;
    int xnum_tile = (xsize + 63) / 64;
    int ynum_tile = (ysize + 63) / 64;
    int num_tile = xnum_tile * ynum_tile;
    unsigned tx0 = 0;
    unsigned ty0 = 0;

    for (int tid = 0; tid < num_tile; tid++) {
        ca_x_t ca_x = 0;
        cb_x_t cb_x = 0;
        ca_b_t ca_b = 0;
        cb_b_t cb_b = 0;
        unsigned xsize;
        unsigned ysize;

        if (ty0 + 64 > ysize_alg) {
            ysize = ysize_alg - ty0;
        } else {
            ysize = 64;
        }

        if (tx0 + 64 > xsize_alg) {
            xsize = xsize_alg - tx0;
        } else {
            xsize = 64;
        }

        unsigned total_pix = xsize * ysize;
        unsigned cur_pix = 0;

        while (cur_pix < total_pix) {
            uint8_t acsRaw = acs_strm.read();
            acs_cflout_strm.write(acsRaw);
            rqf_out_stream.write(rqf_in_stream.read());

            float q = 27.996826171875;
            float q_dc_x = 0.000218007407966069877147674560546875;
            float q_dc_b = 0.00348811852745711803436279296875;

            unsigned csize;
            if (acsRaw == 0) {
                csize = 64;
            } else if (acsRaw == 4) {
                csize = 256;
            } else if (acsRaw == 5) {
                csize = 1024;
            }

            int error_flag = 0;

            for (unsigned i = 0; i < csize; i++) {
#pragma HLS PIPELINE II = 3
                float b_y = ac_coef_strm.read();
                float b_x = ac_coef_strm.read();
                float b_b = ac_coef_strm.read();

                ac_coef_cflout_strm.write(b_y);
                ac_coef_cflout_strm.write(b_x);
                ac_coef_cflout_strm.write(b_b);

                float qm_x;
                float qm_b;

                if (acsRaw == 0) {
                    qm_x = qmx8x8[i];
                    qm_b = qmb8x8[i];
                } else if (acsRaw == 4) {
                    qm_x = qmx16x16[i];
                    qm_b = qmb16x16[i];
                } else if (acsRaw == 5) {
                    qm_x = qmx32x32[i];
                    qm_b = qmb32x32[i];
                }

                float qqm_x = q * qm_x;
                float qqm_b = q * qm_b;

                float coeffs_yx = b_y * qqm_x;
                float coeffs_x = b_x * qqm_x;
                float a = kInvColorFactor * coeffs_yx;
                float b = 0.0f * coeffs_yx - coeffs_x;
                ca_x = (ca_x_t)(a * a) + ca_x;
                cb_x = (cb_x_t)(a * b) + cb_x;

                float coeffs_yb = b_y * qqm_b;
                float coeffs_b = b_b * qqm_b;

                a = kInvColorFactor * coeffs_yb;
                b = kYToBRatio * coeffs_yb - coeffs_b;
                ca_b = (ca_b_t)(a * a) + ca_b;
                cb_b = (cb_b_t)(a * b) + cb_b;

                cur_pix++;
            }
        }

        float x;
        x = -(float)cb_x / ((float)ca_x + total_pix * kDistanceMultiplierAC * 0.5f);
        int8_t cmap_x_reg = hls::max(-128.0f, hls::min(127.0f, hls::roundf(x)));
        cmapx_strm.write(cmap_x_reg);
        cmapx_axi_strm.write(cmap_x_reg);

        x = -(float)cb_b / ((float)ca_b + total_pix * kDistanceMultiplierAC * 0.5f);
        int8_t cmap_b_reg = hls::max(-128.0f, hls::min(127.0f, hls::roundf(x)));
        cmapb_strm.write(cmap_b_reg);
        cmapb_axi_strm.write(cmap_b_reg);

        // printf("cmap_x:%d, cmap_b:%d\n", (int32_t)cmap_x_reg, (int32_t)cmap_b_reg);

        if (tx0 + 64 >= xsize_alg) {
            tx0 = 0;
            ty0 = ty0 + 64;
        } else {
            tx0 = tx0 + 64;
        }
    }
}
//--------------------------hls_compute_coefficients--------------------------//
float adjustQuantBias(size_t c, int32_t quant_i, const float* biases) {
    int32_t min = INT32_MIN;
    cast<float, int32_t> mi, ani, anno;
    mi.i = min;
    int32_t and_result = quant_i & mi.i;
    ani.i = and_result;
    float sign = ani.f;
    // int32_t and_no_result = (~mi.i) & quant_i;
    // anno.i = and_no_result;
    float abs_quant = hls::abs(quant_i);
    //   printf("%f %f\n", sign, abs_quant);
    bool is_01 = abs_quant < 1.125f;
    bool not_0 = abs_quant > 0;
    cast<float, int32_t> bi, si;
    bi.f = biases[c];
    int32_t iTmp = bi.i ^ ani.i;
    si.i = iTmp;
    float one_bias = not_0 ? (si.f) : 0;
    float tmp = quant_i ? (1.0 / quant_i) : 0.0f;
    float bias = quant_i - biases[3] * tmp;
    return is_01 ? one_bias : bias;
}

void hls_ComputeCoefficients(uint32_t xsize,
                             uint32_t ysize,
                             hls::stream<uint8_t>& acsStrm,
                             hls::stream<float>& dctStrm,
                             hls::stream<int>& quantFieldStrm,
                             hls::stream<int8_t>& ytoxMapStrm,
                             hls::stream<int8_t>& ytobMapStrm,
                             hls::stream<uint8_t>& acs_coeff_stream1,
                             hls::stream<int>& coeffOutStrm,
                             hls::stream<int>& coeff_axi_stream,
                             hls::stream<uint8_t>& acs_axi_strm,
                             hls::stream<int>& qf_axi_strm) {
#pragma HLS INLINE off
    uint8_t acs;
    uint8_t xblocks, yblocks;
    int8_t ytox_map, ytob_map;
    float x_factor, b_factor;
    float qm_multiplier = 1.0f;
    bool stop(false);
    float coef_dct[3];
#pragma HLS ARRAY_PARTITION variable = coef_dct complete dim = 1
    ap_uint<32> offset;
    int block_out;
    float thr_x, thr_y, thr_b, out_x, out_b;

    float thresy[4] = {0.5f, 0.6f, 0.6f, 0.65f};
    float thresxb[4] = {0.5f, 0.75f, 0.75f, 0.75f};
#pragma HLS ARRAY_PARTITION variable = thresy complete dim = 1
#pragma HLS ARRAY_PARTITION variable = thresxb complete dim = 1

    uint32_t xsize_blocks = (xsize + 7) / 8;
    uint32_t ysize_blocks = (ysize + 7) / 8;
    uint16_t xsize_tails = DivCeil(xsize_blocks, kEncTileDimInBlocks);
    uint16_t ysize_tails = DivCeil(ysize_blocks, kEncTileDimInBlocks);
    uint16_t xsize_left = 8 - (xsize_tails * 8 - xsize_blocks); // not aligned for blocks
    uint16_t ysize_left = 8 - (ysize_tails * 8 - ysize_blocks); // not aligned for blocks
    uint16_t num_blocks;

    for (uint16_t ty = 0; ty < ysize_tails; ++ty) {
        for (uint16_t tx = 0; tx < xsize_tails; ++tx) {
            ytoxMapStrm.read(ytox_map);
            ytobMapStrm.read(ytob_map);
            x_factor = base_correlation_x + ytox_map * color_scale;
            b_factor = base_correlation_b + ytob_map * color_scale;
            if (tx == (xsize_tails - 1) && ty != (ysize_tails - 1)) {
                num_blocks = xsize_left * 8;
            } else if (tx != (xsize_tails - 1) && ty == (ysize_tails - 1)) {
                num_blocks = ysize_left * 8;
            } else if (tx == (xsize_tails - 1) && ty == (ysize_tails - 1)) {
                num_blocks = xsize_left * ysize_left;
            } else {
                num_blocks = 64;
            }

            uint32_t total = num_blocks * 64;
            uint32_t cur = 0;
            ap_uint<16> size = 0, count = 0;
            ap_uint<16> y, x;
            int quant;
            float qac, fquant, inv_qac;

            while (cur < total) {
#pragma HLS PIPELINE II = 3
                if (count == 0) {
                    acsStrm.read(acs);
                    acs_axi_strm.write(acs);
                    acs_coeff_stream1.write(acs);
                    if (acs == Type::DCT) {
                        xblocks = 1;
                        yblocks = 1;
                    } else if (acs == Type::DCT16X16) {
                        xblocks = 2;
                        yblocks = 2;
                    } else {
                        xblocks = 4;
                        yblocks = 4;
                    }

                    size = kDCTBlockSize * xblocks * yblocks;
                    quant = quantFieldStrm.read();
                    qf_axi_strm.write(quant);
                    qac = global_scale_float * quant;
                    fquant = qac * qm_multiplier;       // fquant_table[quant - 1];
                    inv_qac = inv_global_scale / quant; // inv_qac_table[quant - 1];
                }
                y = count / (yblocks * kBlockDim);
                x = count % (xblocks * kBlockDim);
                ap_uint<32> off;
                ap_uint<32> yfix;
                if (x == 0) {
                    off = y * kBlockDim * xblocks;
                    ap_uint<32> yhalf = yblocks * 4; // ysize * kBlockDim / 2
                    if (y >= yhalf)
                        yfix = 2;
                    else
                        yfix = 0;
                }

                thr_x = 0;
                thr_y = 0;
                thr_b = 0;
                if (xblocks == 1) {
                    if (x >= 4) {
                        thr_x = thresxb[yfix + 1]; //(c == 1) ? thresy[yfix + 1] : thresxb[yfix + 1];
                        thr_y = thresy[yfix + 1];
                        thr_b = thresxb[yfix + 1];
                    } else {
                        thr_x = thresxb[yfix]; //(c == 1) ? thresy[yfix + 1] :
                                               // thresxb[yfix + 1];
                        thr_y = thresy[yfix];
                        thr_b = thresxb[yfix];
                    }
                } else {
                    ap_uint<32> xhalf = xblocks * 4; // xsize * kBlockDim / 2
                    ap_uint<32> xfix;
                    if (x < xhalf)
                        xfix = 0;
                    else
                        xfix = 1;
                    thr_x = thresxb[yfix + xfix];
                    thr_y = thresy[yfix + xfix];
                    thr_b = thresxb[yfix + xfix]; // thr = (c == 1) ? thresy[yfix +
                                                  // xfix] : thresxb[yfix + xfix];
                }

                float q_x;
                float q_y;
                float q_b;
                if (acs == Type::DCT) {
                    q_x = inv_dequant_stable[0 + off + x] * fquant;
                    q_y = inv_dequant_stable[64 + off + x] * fquant;
                    q_b = inv_dequant_stable[128 + off + x] * fquant;
                } else if (acs == Type::DCT16X16) {
                    q_x = inv_dequant_stable[768 + off + x] * fquant;
                    q_y = inv_dequant_stable[1024 + off + x] * fquant;
                    q_b = inv_dequant_stable[1280 + off + x] * fquant;
                } else if (acs == Type::DCT32X32) {
                    q_x = inv_dequant_stable[1536 + off + x] * fquant;
                    q_y = inv_dequant_stable[2560 + off + x] * fquant;
                    q_b = inv_dequant_stable[3584 + off + x] * fquant;
                }

                coef_dct[1] = dctStrm.read();
                coef_dct[0] = dctStrm.read();
                coef_dct[2] = dctStrm.read();

                float val_y;
                val_y = q_y * coef_dct[1];

                bool nzero_mask_y = hls::abs(val_y) >= thr_y;

                int32_t v_y;
                if (nzero_mask_y) {
                    v_y = hls::roundf(val_y);
                } else {
                    v_y = 0;
                }

                float adj_quant = adjustQuantBias(1, v_y, kDefaultQuantBias);
                float dequantm;
                if (acs == Type::DCT) {
                    dequantm = dequant_table[64 + off + x];
                } else if (acs == Type::DCT16X16) {
                    dequantm = dequant_table[1024 + off + x];
                } else if (acs == Type::DCT32X32) {
                    dequantm = dequant_table[2560 + off + x];
                }
                coef_dct[1] = adj_quant * dequantm * inv_qac;

                out_x = coef_dct[0] - x_factor * coef_dct[1];
                coef_dct[0] = out_x;

                out_b = coef_dct[2] - b_factor * coef_dct[1];
                coef_dct[2] = out_b;

                float val_x; //= q * coef_dct[c]; // block_in[off + x]
                float val_b;
                val_x = q_x * coef_dct[0];
                val_b = q_b * coef_dct[2];

                bool nzero_mask_x = hls::abs(val_x) >= thr_x;

                bool nzero_mask_b = hls::abs(val_b) >= thr_b;

                int32_t v_x;

                int32_t v_b;
                if (nzero_mask_x) {
                    v_x = hls::roundf(val_x);
                } else {
                    v_x = 0;
                }

                if (nzero_mask_b) {
                    v_b = hls::roundf(val_b);
                } else {
                    v_b = 0;
                }

                coeffOutStrm.write(v_y);
                coeffOutStrm.write(v_x);
                coeffOutStrm.write(v_b);

                coeff_axi_stream.write(v_y);
                coeff_axi_stream.write(v_x);
                coeff_axi_stream.write(v_b);
                cur++;
                count++;
                if (count == size) count = 0;
            } // while
        }     // tx
    }         // ty
}

//--------------------- Compute ALL orders---------------------//
template <int RANGE> // opt1:256(slow), opt2:8(fast)
void hls_sort(int size,
              hls::stream<unsigned>& count_instrm,
              hls::stream<unsigned>& pos_instrm,
              hls::stream<unsigned>& pos_outstrm) {
    unsigned count_shift[RANGE];
    unsigned pos_shift[RANGE];
    ap_uint<RANGE> cmp = 0;

    for (int i = 0; i < RANGE; i++) {
#pragma HLS UNROLL
        count_shift[i] = 0;
    }

    for (int i = 0; i < size + RANGE; i++) {
#pragma HLS PIPELINE II = 1
        unsigned count_reg;
        unsigned pos_reg;
        if (i < size) {
            pos_reg = pos_instrm.read();
            count_reg = count_instrm.read();
        } else {
            count_reg = -1;
            pos_reg = -1;
        }

        for (int i = 0; i < RANGE; i++) {
#pragma HLS UNROLL
            cmp[i] = count_reg >= count_shift[i];
        }

        if (i >= RANGE) {
            pos_outstrm.write(pos_shift[0]);
        }

        for (int i = 1; i < RANGE; i++) {
#pragma HLS UNROLL
            if (cmp[i] == 1) {
                count_shift[i - 1] = count_shift[i];
                pos_shift[i - 1] = pos_shift[i];
            }
        }

        unsigned insert_pos;
        ap_uint<RANGE> cmp_br = ~cmp;
        cmp_br.reverse();
        if (cmp_br == 0) {
            insert_pos = RANGE - 1;
        } else if (cmp == 0) {
            insert_pos = 0;
        } else {
            insert_pos = cmp_br.countLeadingZeros() - 1;
        }

        count_shift[insert_pos] = count_reg;
        pos_shift[insert_pos] = pos_reg;
    }
}

void hls_sort_top(hls::stream<unsigned>& count_instrm,
                  hls::stream<unsigned>& pos_instrm,
                  hls::stream<unsigned>& pos_outstrm) {
    unsigned sz;
    for (uint8_t o = 0; o < 2; ++o) {
        if (o == 0) {
            sz = 64;
        } else {
            sz = 256;
        }

        for (uint8_t c = 0; c < 3; c++) {
#ifndef __SYNTHESIS__
            hls_sort<8>(sz, count_instrm, pos_instrm, pos_outstrm);
#else
            hls_sort<8>(sz, count_instrm, pos_instrm, pos_outstrm);
#endif
        }
    }
}

void init_numzeros(int32_t num_zeros[3][320]) {
    for (int i = 0; i < 320; i++) {
        for (int c = 0; c < 3; c++) {
#pragma HLS PIPELINE II = 1
            num_zeros[c][i] = 0;
        }
    }
}

void count_numzeros(unsigned xsize,
                    unsigned ysize,
                    hls::stream<uint8_t>& ac_strategy_strm,
                    hls::stream<int>& ac_coef_quant_strm,
                    hls::stream<ap_uint<3> >& used_orders_strm,
                    int32_t num_zeros[3][320]) {
#pragma HLS INLINE off
    unsigned xsize_alg = (xsize + 7) / 8 * 8;
    unsigned ysize_alg = (ysize + 7) / 8 * 8;
    unsigned total_pix = xsize_alg * ysize_alg;
    unsigned cur_pix = 0;

    const int32_t offset8x8 = 0;
    // const int32_t offsetIDT = 64;
    const int32_t offset16x16 = 64;

    ap_uint<3> used_orders_ap = 0;

    while (cur_pix < total_pix) {
        uint8_t acsRaw = ac_strategy_strm.read();
        unsigned size;
        if (acsRaw == 0) {
            size = 64;
            used_orders_ap[0] = 1;
        } else if (acsRaw != 0 && acsRaw < 4) {
            used_orders_ap[1] = 1;
            size = 64;
        } else if (acsRaw == 4) {
            used_orders_ap[2] = 1;
            size = 256;
        } else if (acsRaw == 5) {
            size = 1024;
        }
        cur_pix = cur_pix + size;

        for (unsigned k = 0; k < size; k++) {
            for (int c = 0; c < 3; c++) {
#pragma HLS PIPELINE II = 1
#pragma HLS DEPENDENCE variable = num_zeros type = inter false
                bool is_zerox = ac_coef_quant_strm.read() == 0;
                if (is_zerox) {
                    if (acsRaw == 0) {
                        num_zeros[c][offset8x8 + k]++;
                    } else if (acsRaw == 4) {
                        num_zeros[c][offset16x16 + k]++;
                    }
                }
            }
        }
    }

    used_orders_strm.write(used_orders_ap);
    num_zeros[0][offset8x8] = -1;
    num_zeros[0][offset16x16 + 0] = -1;
    num_zeros[0][offset16x16 + 1] = -1;
    num_zeros[0][offset16x16 + 16] = -1;
    num_zeros[0][offset16x16 + 17] = -1;
    num_zeros[1][offset8x8] = -1;
    num_zeros[1][offset16x16 + 0] = -1;
    num_zeros[1][offset16x16 + 1] = -1;
    num_zeros[1][offset16x16 + 16] = -1;
    num_zeros[1][offset16x16 + 17] = -1;
    num_zeros[2][offset8x8] = -1;
    num_zeros[2][offset16x16 + 0] = -1;
    num_zeros[2][offset16x16 + 1] = -1;
    num_zeros[2][offset16x16 + 16] = -1;
    num_zeros[2][offset16x16 + 17] = -1;
}

void load_nz2strm(int32_t num_zeros[3][320], hls::stream<unsigned>& count_strm, hls::stream<unsigned>& pos_strm) {
    const int32_t offset8x8 = 0;
    // const int32_t offsetIDT = 64;
    const int32_t offset16x16 = 64;

    const uint32_t coef8x8_zigzag[64] = {0,  1,  8,  16, 9,  2,  3,  10, 17, 24, 32, 25, 18, 11, 4,  5,
                                         12, 19, 26, 33, 40, 48, 41, 34, 27, 20, 13, 6,  7,  14, 21, 28,
                                         35, 42, 49, 56, 57, 50, 43, 36, 29, 22, 15, 23, 30, 37, 44, 51,
                                         58, 59, 52, 45, 38, 31, 39, 46, 53, 60, 61, 54, 47, 55, 62, 63};
    const uint32_t coef16x16_zigzag[256] = {
        0,   1,   16,  17,  32,  2,   3,   18,  33,  48,  64,  49,  34,  19,  4,   5,   20,  35,  50,  65,  80,  96,
        81,  66,  51,  36,  21,  6,   7,   22,  37,  52,  67,  82,  97,  112, 128, 113, 98,  83,  68,  53,  38,  23,
        8,   9,   24,  39,  54,  69,  84,  99,  114, 129, 144, 160, 145, 130, 115, 100, 85,  70,  55,  40,  25,  10,
        11,  26,  41,  56,  71,  86,  101, 116, 131, 146, 161, 176, 192, 177, 162, 147, 132, 117, 102, 87,  72,  57,
        42,  27,  12,  13,  28,  43,  58,  73,  88,  103, 118, 133, 148, 163, 178, 193, 208, 224, 209, 194, 179, 164,
        149, 134, 119, 104, 89,  74,  59,  44,  29,  14,  15,  30,  45,  60,  75,  90,  105, 120, 135, 150, 165, 180,
        195, 210, 225, 240, 241, 226, 211, 196, 181, 166, 151, 136, 121, 106, 91,  76,  61,  46,  31,  47,  62,  77,
        92,  107, 122, 137, 152, 167, 182, 197, 212, 227, 242, 243, 228, 213, 198, 183, 168, 153, 138, 123, 108, 93,
        78,  63,  79,  94,  109, 124, 139, 154, 169, 184, 199, 214, 229, 244, 245, 230, 215, 200, 185, 170, 155, 140,
        125, 110, 95,  111, 126, 141, 156, 171, 186, 201, 216, 231, 246, 247, 232, 217, 202, 187, 172, 157, 142, 127,
        143, 158, 173, 188, 203, 218, 233, 248, 249, 234, 219, 204, 189, 174, 159, 175, 190, 205, 220, 235, 250, 251,
        236, 221, 206, 191, 207, 222, 237, 252, 253, 238, 223, 239, 254, 255};

    unsigned sz;

    for (uint8_t o = 0; o < 2; ++o) {
        float inv_sqrt_sz;

        if (o == 0) {
            sz = 64;
            inv_sqrt_sz = 1.0f / 8.0f;
        } else {
            sz = 256;
            inv_sqrt_sz = 1.0f / 16.0f;
        }

        for (uint8_t c = 0; c < 3; c++) {
            for (unsigned i = 0; i < sz; ++i) {
#pragma HLS PIPELINE II = 1
                unsigned pos;
                if (o == 0) {
                    pos = coef8x8_zigzag[i];
                } else {
                    pos = coef16x16_zigzag[i];
                }

                // We don't care for the exact number -> quantize number of zeros,
                // to get less permuted order.
                if (o == 0) {
                    pos_strm.write(pos);
                    count_strm.write(num_zeros[c][offset8x8 + pos] * inv_sqrt_sz + 0.1f);
                } else {
                    pos_strm.write(pos);
                    count_strm.write(num_zeros[c][offset16x16 + pos] * inv_sqrt_sz + 0.1f);
                }
            }
        }
    }
}

void order_writeout(hls::stream<ap_uint<3> >& used_orders_strm,
                    hls::stream<unsigned>& pos_strm,
                    uint32_t hls_order[320 * 3 + 1] // AXI port
                    ) {
    const int32_t offset8x8 = 0;
    // const int32_t offsetIDT = 64;
    const int32_t offset16x16 = 64;

    const uint32_t coef8x8_zigzag[64] = {0,  1,  8,  16, 9,  2,  3,  10, 17, 24, 32, 25, 18, 11, 4,  5,
                                         12, 19, 26, 33, 40, 48, 41, 34, 27, 20, 13, 6,  7,  14, 21, 28,
                                         35, 42, 49, 56, 57, 50, 43, 36, 29, 22, 15, 23, 30, 37, 44, 51,
                                         58, 59, 52, 45, 38, 31, 39, 46, 53, 60, 61, 54, 47, 55, 62, 63};
    const uint32_t coef16x16_zigzag[256] = {
        0,   1,   16,  17,  32,  2,   3,   18,  33,  48,  64,  49,  34,  19,  4,   5,   20,  35,  50,  65,  80,  96,
        81,  66,  51,  36,  21,  6,   7,   22,  37,  52,  67,  82,  97,  112, 128, 113, 98,  83,  68,  53,  38,  23,
        8,   9,   24,  39,  54,  69,  84,  99,  114, 129, 144, 160, 145, 130, 115, 100, 85,  70,  55,  40,  25,  10,
        11,  26,  41,  56,  71,  86,  101, 116, 131, 146, 161, 176, 192, 177, 162, 147, 132, 117, 102, 87,  72,  57,
        42,  27,  12,  13,  28,  43,  58,  73,  88,  103, 118, 133, 148, 163, 178, 193, 208, 224, 209, 194, 179, 164,
        149, 134, 119, 104, 89,  74,  59,  44,  29,  14,  15,  30,  45,  60,  75,  90,  105, 120, 135, 150, 165, 180,
        195, 210, 225, 240, 241, 226, 211, 196, 181, 166, 151, 136, 121, 106, 91,  76,  61,  46,  31,  47,  62,  77,
        92,  107, 122, 137, 152, 167, 182, 197, 212, 227, 242, 243, 228, 213, 198, 183, 168, 153, 138, 123, 108, 93,
        78,  63,  79,  94,  109, 124, 139, 154, 169, 184, 199, 214, 229, 244, 245, 230, 215, 200, 185, 170, 155, 140,
        125, 110, 95,  111, 126, 141, 156, 171, 186, 201, 216, 231, 246, 247, 232, 217, 202, 187, 172, 157, 142, 127,
        143, 158, 173, 188, 203, 218, 233, 248, 249, 234, 219, 204, 189, 174, 159, 175, 190, 205, 220, 235, 250, 251,
        236, 221, 206, 191, 207, 222, 237, 252, 253, 238, 223, 239, 254, 255};

    unsigned sz;
    ap_uint<3> used_orders_ap = used_orders_strm.read();
    for (uint8_t o = 0; o < 2; ++o) {
        if (o == 0) {
            sz = 64;
        } else {
            sz = 256;
        }

        bool is_nondefault = false;
        for (uint8_t c = 0; c < 3; c++) {
            for (unsigned i = 0; i < sz; ++i) {
#pragma HLS PIPELINE II = 1
                unsigned pos_reg = pos_strm.read();
                if (o == 0) {
                    hls_order[c * 320 + offset8x8 + i] = pos_reg;
                } else {
                    hls_order[c * 320 + offset16x16 + i] = pos_reg;
                }
                if (o == 0) {
                    is_nondefault |= coef8x8_zigzag[i] != pos_reg;
                } else {
                    is_nondefault |= coef16x16_zigzag[i] != pos_reg;
                }
            }
        }
        if (!is_nondefault) {
            if (o == 0)
                used_orders_ap[0] = 0;
            else
                used_orders_ap[2] = 0;
        }
    }
    hls_order[320 * 3] = used_orders_ap;
}

void order_finalize_dataflow(hls::stream<ap_uint<3> >& used_orders_strm,
                             int32_t num_zeros[3][320],
                             uint32_t hls_order[320 * 3 + 1]) {
// #pragma HLS INTERFACE mode = m_axi bundle = mm1 latency = 32 offset = slave num_write_outstanding =             \
//     1 num_read_outstanding = 64 max_write_burst_length = 64 max_read_burst_length = 64 depth = ALL_PIXEL port = \
//         hls_opsin_1
// #pragma HLS INTERFACE mode = m_axi bundle = mm2 latency = 32 offset = slave num_write_outstanding =             \
//     1 num_read_outstanding = 64 max_write_burst_length = 64 max_read_burst_length = 64 depth = ALL_PIXEL port = \
//         hls_opsin_2
// #pragma HLS INTERFACE mode = m_axi bundle = mm3 latency = 32 offset = slave num_write_outstanding =             \
//     1 num_read_outstanding = 64 max_write_burst_length = 64 max_read_burst_length = 64 depth = ALL_PIXEL port = \
//         hls_opsin_3
// #pragma HLS INTERFACE mode = m_axi bundle = mm4 latency = 32 offset = slave num_write_outstanding = \
//     1 num_read_outstanding = 64 max_write_burst_length = 64 max_read_burst_length = 64 depth =      \
//         BLOCK8_H* BLOCK8_W port = quant_field_row
// #pragma HLS INTERFACE mode = m_axi bundle = mm5 latency = 32 offset = slave num_write_outstanding = \
//     1 num_read_outstanding = 64 max_write_burst_length = 64 max_read_burst_length = 64 depth =      \
//         BLOCK8_H* BLOCK8_W port = masking_field_row
// #pragma HLS INTERFACE mode = m_axi bundle = mm6 latency = 32 offset = slave num_write_outstanding = \
//     1 num_read_outstanding = 64 max_write_burst_length = 64 max_read_burst_length = 64 depth =      \
//         BLOCK8_H* BLOCK8_W port = aq_map_f
// #pragma HLS INTERFACE mode = m_axi bundle = mm7 latency = 32 offset = slave num_write_outstanding = \
//     1 num_read_outstanding = 64 max_write_burst_length = 64 max_read_burst_length = 64 depth =      \
//         TILE_W* TILE_H* 2 port = cmap_axi
// #pragma HLS INTERFACE mode = m_axi bundle = mm8 latency = 32 offset = slave num_write_outstanding =             \
//     1 num_read_outstanding = 64 max_write_burst_length = 64 max_read_burst_length = 64 depth = ALL_PIXEL port = \
//         ac_coef_axiout
// #pragma HLS INTERFACE mode = m_axi bundle = mm9 latency = 32 offset = slave num_write_outstanding = \
//     1 num_read_outstanding = 64 max_write_burst_length = 64 max_read_burst_length = 64 depth =      \
//         BLOCK8_W* BLOCK8_H port = strategy_all
// #pragma HLS INTERFACE mode = m_axi bundle = mm10 latency = 32 offset = slave num_write_outstanding = \
//     1 num_read_outstanding = 64 max_write_burst_length = 64 max_read_burst_length = 64 depth =       \
//         BLOCK8_H* BLOCK8_W port = raw_quant_field_i
#pragma HLS INTERFACE mode = m_axi bundle = mm11 latency = 32 offset = slave num_write_outstanding =            \
    1 num_read_outstanding = 64 max_write_burst_length = 64 max_read_burst_length = 64 depth = MAX_ORDER port = \
        hls_order
// #pragma HLS INTERFACE mode = m_axi bundle = mm12 latency = 32 offset = slave num_write_outstanding =            \
//     1 num_read_outstanding = 64 max_write_burst_length = 64 max_read_burst_length = 64 depth = ALL_PIXEL port = \
//         hls_dc8x8
// #pragma HLS INTERFACE mode = m_axi bundle = mm13 latency = 32 offset = slave num_write_outstanding =            \
//     1 num_read_outstanding = 64 max_write_burst_length = 64 max_read_burst_length = 64 depth = ALL_PIXEL port = \
//         hls_dc16x16
// #pragma HLS INTERFACE mode = m_axi bundle = mm14 latency = 32 offset = slave num_write_outstanding =            \
//     1 num_read_outstanding = 64 max_write_burst_length = 64 max_read_burst_length = 64 depth = ALL_PIXEL port = \
//         hls_dc32x32
// #pragma HLS INTERFACE mode = m_axi bundle = mm15 latency = 32 offset = slave num_write_outstanding =                 \
//     1 num_read_outstanding = 64 max_write_burst_length = 64 max_read_burst_length = 64 depth = MAX_NUM_CONFIG port = \
//         config
// #pragma HLS INTERFACE mode = m_axi bundle = mm16 latency = 32 offset = slave num_write_outstanding =                 \
//     1 num_read_outstanding = 64 max_write_burst_length = 64 max_read_burst_length = 64 depth = MAX_NUM_CONFIG port = \
//         config_fl
#pragma HLS DATAFLOW
    hls::stream<unsigned, 32> count_instrm("count_instrm");
    hls::stream<unsigned, 32> pos_instrm("pos_instrm");
    hls::stream<unsigned, 8> pos_outstrm("pos_outstrm");

    load_nz2strm(num_zeros, count_instrm, pos_instrm);

    hls_sort_top(count_instrm, pos_instrm, pos_outstrm);

    order_writeout(used_orders_strm, pos_outstrm, hls_order);
}

//-------------------------- dct --------------------------//
// dct8x8
void hls_DCT1DImpl_8x8(float in[64], float out[64]) {
#pragma HLS INLINE off
    float kMultipliers_N8_c1 = 0.5097955791041592;
    float kMultipliers_N8_c2 = 0.6013448869350453;
    float kMultipliers_N8_c3 = 0.8999762231364156;
    float kMultipliers_N8_c4 = 2.5629154477415055;
    float kMultipliers_N4_c1 = 0.541196100146197;
    float kMultipliers_N4_c2 = 1.3065629648763764;
    float sqrt2 = 1.4142135623730951f;

loop_dct8x8:
    for (int i = 0; i < 8; i += 1) {
#pragma HLS DEPENDENCE variable = in inter false
#pragma HLS DEPENDENCE variable = out inter false
#pragma HLS LOOP_FLATTEN off
#pragma HLS pipeline II = 2
        float tmp8_0 = in[i * 8 + 0] + in[i * 8 + 7];
        float tmp8_1 = in[i * 8 + 1] + in[i * 8 + 6];
        float tmp8_2 = in[i * 8 + 2] + in[i * 8 + 5];
        float tmp8_3 = in[i * 8 + 3] + in[i * 8 + 4];
        float tmp8_4 = in[i * 8 + 0] - in[i * 8 + 7];
        float tmp8_5 = in[i * 8 + 1] - in[i * 8 + 6];
        float tmp8_6 = in[i * 8 + 2] - in[i * 8 + 5];
        float tmp8_7 = in[i * 8 + 3] - in[i * 8 + 4];

        float t00 = tmp8_0 + tmp8_3;
        float t01 = tmp8_1 + tmp8_2;
        float t02 = tmp8_0 - tmp8_3;
        float t03 = tmp8_1 - tmp8_2;

        float t16 = tmp8_4 * kMultipliers_N8_c1;
        float t17 = tmp8_5 * kMultipliers_N8_c2;
        float t18 = tmp8_6 * kMultipliers_N8_c3;
        float t19 = tmp8_7 * kMultipliers_N8_c4;

        // tmp 0~3
        float t04 = t00 + t01;
        float t05 = t00 - t01;
        float t06 = t02 * kMultipliers_N4_c1;
        float t07 = t03 * kMultipliers_N4_c2;

        float t09 = t05;
        float t10 = t06 + t07;
        float t11 = t06 - t07;

        float t13 = t09;
        float t14 = t10 * sqrt2 + t11;
        float t15 = t11;
        // tmp 4~7
        float t00_a = t16 + t19;
        float t01_a = t17 + t18;
        float t02_a = t16 - t19;
        float t03_a = t17 - t18;

        float t04_a = t00_a + t01_a;
        float t05_a = t00_a - t01_a;
        float t06_a = t02_a * kMultipliers_N4_c1;
        float t07_a = t03_a * kMultipliers_N4_c2;

        float t08_a = t04_a;
        float t09_a = t05_a;
        float t10_a = t06_a + t07_a;
        float t11_a = t06_a - t07_a;

        float t12_a = t08_a;
        float t13_a = t09_a;
        float t14_a = t10_a * sqrt2 + t11_a;
        float t15_a = t11_a;

        float tmp8_out1 = t14;
        float tmp8_out2 = t05;
        float tmp8_out3 = t15;
        float tmp8_out4 = t12_a * sqrt2 + t14_a;
        float tmp8_out5 = t14_a + t13_a;
        float tmp8_out6 = t13_a + t15_a;
        float tmp8_out7 = t15_a;

        out[i * 8 + 0] = t04;
        out[i * 8 + 1] = tmp8_out4;
        out[i * 8 + 2] = tmp8_out1;
        out[i * 8 + 3] = tmp8_out5;
        out[i * 8 + 4] = t05;
        out[i * 8 + 5] = tmp8_out6;
        out[i * 8 + 6] = tmp8_out3;
        out[i * 8 + 7] = tmp8_out7;
    }
}

void hls_TransposeBlock8(float in[64], float out[64]) {
#pragma HLS INLINE off
loop_transposeBlock8:
    for (int m = 0; m < 8; m++) {
        for (int n = 0; n < 8; n++) {
#pragma HLS pipeline II = 1
            float mul = 1.0f / 8.0f;
            out[n * 8 + m] = mul * in[m * 8 + n];
        }
    }
}

void dct8_block(float in[1024], float out[1024]) {
#pragma HLS INLINE off
    float kMultipliers_N8_c1 = 0.5097955791041592;
    float kMultipliers_N8_c2 = 0.6013448869350453;
    float kMultipliers_N8_c3 = 0.8999762231364156;
    float kMultipliers_N8_c4 = 2.5629154477415055;
    float kMultipliers_N4_c1 = 0.541196100146197;
    float kMultipliers_N4_c2 = 1.3065629648763764;
    float sqrt2 = 1.4142135623730951f;

loop_dct_block:
    for (ap_uint<8> by = 0; by < 4; by++) {
        for (ap_uint<8> bx = 0; bx < 4; bx++) {
            for (ap_uint<8> x = 0; x < 8; x++) {
#pragma HLS DEPENDENCE variable = in inter false
#pragma HLS DEPENDENCE variable = out inter false
#pragma HLS LOOP_FLATTEN off
#pragma HLS pipeline
                int addr = 8 * x + bx * 64 + by * 256;

                float mem_0 = in[addr + 0];
                float mem_1 = in[addr + 1];
                float mem_2 = in[addr + 2];
                float mem_3 = in[addr + 3];
                float mem_4 = in[addr + 4];
                float mem_5 = in[addr + 5];
                float mem_6 = in[addr + 6];
                float mem_7 = in[addr + 7];

                float tmp8_0 = mem_0 + mem_7;
                float tmp8_1 = mem_1 + mem_6;
                float tmp8_2 = mem_2 + mem_5;
                float tmp8_3 = mem_3 + mem_4;
                float tmp8_4 = mem_0 - mem_7;
                float tmp8_5 = mem_1 - mem_6;
                float tmp8_6 = mem_2 - mem_5;
                float tmp8_7 = mem_3 - mem_4;

                float t00 = tmp8_0 + tmp8_3;
                float t01 = tmp8_1 + tmp8_2;
                float t02 = tmp8_0 - tmp8_3;
                float t03 = tmp8_1 - tmp8_2;

                float t16 = tmp8_4 * kMultipliers_N8_c1;
                float t17 = tmp8_5 * kMultipliers_N8_c2;
                float t18 = tmp8_6 * kMultipliers_N8_c3;
                float t19 = tmp8_7 * kMultipliers_N8_c4;

                // tmp 0~3
                float t04 = t00 + t01;
                float t05 = t00 - t01;
                float t06 = t02 * kMultipliers_N4_c1;
                float t07 = t03 * kMultipliers_N4_c2;

                float t08 = t04;
                float t09 = t05;
                float t10 = t06 + t07;
                float t11 = t06 - t07;

                float t12 = t08;
                float t13 = t09;
                float t14 = t10 * sqrt2 + t11;
                float t15 = t11;
                // tmp 4~7
                float t00_a = t16 + t19;
                float t01_a = t17 + t18;
                float t02_a = t16 - t19;
                float t03_a = t17 - t18;

                float t04_a = t00_a + t01_a;
                float t05_a = t00_a - t01_a;
                float t06_a = t02_a * kMultipliers_N4_c1;
                float t07_a = t03_a * kMultipliers_N4_c2;

                float t08_a = t04_a;
                float t09_a = t05_a;
                float t10_a = t06_a + t07_a;
                float t11_a = t06_a - t07_a;

                float t12_a = t08_a;
                float t13_a = t09_a;
                float t14_a = t10_a * sqrt2 + t11_a;
                float t15_a = t11_a;

                float tmp8_out0 = t12;
                float tmp8_out1 = t14;
                float tmp8_out2 = t13;
                float tmp8_out3 = t15;
                float tmp8_out4 = t12_a * sqrt2 + t14_a;
                float tmp8_out5 = t14_a + t13_a;
                float tmp8_out6 = t13_a + t15_a;
                float tmp8_out7 = t15_a;

                out[addr + 0] = tmp8_out0;
                out[addr + 1] = tmp8_out4;
                out[addr + 2] = tmp8_out1;
                out[addr + 3] = tmp8_out5;
                out[addr + 4] = tmp8_out2;
                out[addr + 5] = tmp8_out6;
                out[addr + 6] = tmp8_out3;
                out[addr + 7] = tmp8_out7;
            }
        }
    }
}

void hls_TransposeBlock_dct8(float in[1024], float out[1024]) {
#pragma HLS INLINE off
    for (ap_uint<8> by = 0; by < 4; by++) {
        for (ap_uint<8> bx = 0; bx < 4; bx++) {
            for (ap_uint<8> y = 0; y < 8; y++) {
                for (ap_uint<8> x = 0; x < 8; x++) {
#pragma HLS pipeline II = 1
                    ap_uint<10> addr_i, addr_o;
                    addr_i(9, 8) = by(1, 0);
                    addr_i(7, 5) = x(2, 0);
                    addr_i(4, 3) = bx(1, 0);
                    addr_i(2, 0) = y(2, 0);
                    addr_o(9, 8) = by(1, 0);
                    addr_o(7, 5) = y(2, 0);
                    addr_o(4, 3) = bx(1, 0);
                    addr_o(2, 0) = x(2, 0);
                    float mul = 1.0f / 8.0f;
                    out[addr_o] = mul * in[addr_i];
                }
            }
        }
    }
}

void split_ac_dc_dct8(float in[64], float to_ac[64], float to_dc[1]) {
#pragma HLS INLINE off
    for (int m = 0; m < 8; m++) {
        for (int n = 0; n < 8; n++) {
#pragma HLS PIPELINE II = 1
            to_ac[8 * m + n] = in[8 * m + n];
            if (m == 0 && n == 0) {
                to_dc[0] = in[0];
            }
        }
    }
}

void feed_ac_dct8(uint32_t x8,
                  uint32_t y8,
                  hls::stream<uint8_t>& stream_recty,
                  hls::stream<uint8_t>& stream_rectx,
                  float in[64],
                  hls::stream<float>& ac_coef8x8_stream) {
#pragma HLS INLINE off
    uint8_t rect_xsize;
    uint8_t rect_ysize;
hls_feed_b64:
    for (int m = 0; m < 8; m++) {
        for (int n = 0; n < 8; n++) {
#pragma HLS PIPELINE II = 1
            if (m == 0 && n == 0) {
                rect_xsize = stream_rectx.read();
                rect_ysize = stream_recty.read();
            }
            if (x8 < rect_xsize && y8 < rect_ysize) {
                ac_coef8x8_stream.write(in[m * 8 + n]);
            }
        }
    }
}

void feed_dc_dct8(uint32_t x8,
                  uint32_t y8,
                  hls::stream<uint8_t>& stream_recty,
                  hls::stream<uint8_t>& stream_rectx,
                  float in[1],
                  hls::stream<float>& dc_coef8x8_stream) {
#pragma HLS INLINE off
    uint8_t rect_xsize;
    uint8_t rect_ysize;
hls_feed_b64:
    for (int m = 0; m < 8; m++) {
        for (int n = 0; n < 8; n++) {
#pragma HLS PIPELINE II = 1
            if (m == 0 && n == 0) {
                rect_xsize = stream_rectx.read();
                rect_ysize = stream_recty.read();
            }
            if (x8 < rect_xsize && y8 < rect_ysize) {
                if (m == 0 && n == 0) {
                    dc_coef8x8_stream.write(in[0]);
                }
            }
        }
    }
}

void load_b64(float temp0[64], hls::stream<float>& opsin8x8_stream) {
#pragma HLS INLINE off
    for (int m = 0; m < 8; m++) {
        for (int n = 0; n < 8; n++) {
#pragma HLS PIPELINE II = 1
            int addr = n * 8 + m;
            temp0[addr] = opsin8x8_stream.read();
        }
    }
}

void hls_dct8x8_module(unsigned ysize,
                       unsigned xsize,
                       hls::stream<uint8_t>& stream_recty8,
                       hls::stream<uint8_t>& stream_rectx8,
                       hls::stream<uint8_t>& stream_recty8_1,
                       hls::stream<uint8_t>& stream_rectx8_1,
                       hls::stream<float>& opsin8x8_stream,
                       hls::stream<float>& ac_coef8x8_stream,
                       hls::stream<float>& dc_coef8x8_stream) {
#pragma HLS INLINE off
    int tile_xsize = (xsize + 63) / 64 * 64;
    int tile_ysize = (ysize + 63) / 64 * 64;

    uint32_t ysize64 = tile_ysize / 64;
    uint32_t xsize64 = tile_xsize / 64;
    int xsize_blocks = xsize / 8;
    int ysize_blocks = ysize / 8;

    float temp0[64];
#pragma HLS bind_storage variable = temp0 type = ram_2p impl = bram
    float temp1[64];
#pragma HLS bind_storage variable = temp1 type = ram_2p impl = bram
    float temp2[64];
#pragma HLS bind_storage variable = temp2 type = ram_2p impl = bram
    float temp3[64];
#pragma HLS bind_storage variable = temp3 type = ram_2p impl = bram
    float temp4[64];
#pragma HLS bind_storage variable = temp4 type = ram_2p impl = bram
    float to_ac[64];
#pragma HLS bind_storage variable = to_ac type = ram_2p impl = bram
    float to_dc[1];
#pragma HLS bind_storage variable = to_dc type = ram_2p impl = bram

loop_dct8_all:
    for (uint32_t y64 = 0; y64 < ysize64; y64++) {
        for (uint32_t x64 = 0; x64 < xsize64; x64++) {
            for (uint32_t y8 = 0; y8 < 8; y8++) {
                for (uint32_t x8 = 0; x8 < 8; x8++) {
                    for (int c = 0; c < 3; c++) {
#pragma HLS DATAFLOW
                        load_b64(temp0, opsin8x8_stream);
                        hls_DCT1DImpl_8x8(temp0, temp1);
                        hls_TransposeBlock8(temp1, temp2);
                        hls_DCT1DImpl_8x8(temp2, temp3);
                        hls_TransposeBlock8(temp3, temp4);
                        split_ac_dc_dct8(temp4, to_ac, to_dc);
                        feed_ac_dct8(x8, y8, stream_recty8, stream_rectx8, to_ac, ac_coef8x8_stream);
                        feed_dc_dct8(x8, y8, stream_recty8_1, stream_rectx8_1, to_dc, dc_coef8x8_stream);
                    }
                }
            }
        }
    }
}

void hls_DCT1DImpl_16(float in[256], float out[256]) {
#pragma HLS INLINE off
    float kMultipliers_N8_c1 = 0.5097955791041592;

    float kMultipliers_N8_c2 = 0.6013448869350453;
    float kMultipliers_N8_c3 = 0.8999762231364156;
    float kMultipliers_N8_c4 = 2.5629154477415055;
    float kMultipliers_N4_c1 = 0.541196100146197;
    float kMultipliers_N4_c2 = 1.3065629648763764;

    float kMultipliers_N16_0 = 0.5024192861881557;
    float kMultipliers_N16_1 = 0.5224986149396889;
    float kMultipliers_N16_2 = 0.5669440348163577;
    float kMultipliers_N16_3 = 0.6468217833599901;
    float kMultipliers_N16_4 = 0.7881546234512502;
    float kMultipliers_N16_5 = 1.060677685990347;
    float kMultipliers_N16_6 = 1.7224470982383342;
    float kMultipliers_N16_7 = 5.101148618689155;
    float sqrt2 = 1.4142135623730951f;

    float tmp16_0 = in[0] + in[15];
    float tmp16_1 = in[1] + in[14];
    float tmp16_2 = in[2] + in[13];
    float tmp16_3 = in[3] + in[12];
    float tmp16_4 = in[4] + in[11];
    float tmp16_5 = in[5] + in[10];
    float tmp16_6 = in[6] + in[9];
    float tmp16_7 = in[7] + in[8];
    float tmp16_8 = in[0] - in[15];
    float tmp16_9 = in[1] - in[14];
    float tmp16_10 = in[2] - in[13];
    float tmp16_11 = in[3] - in[12];
    float tmp16_12 = in[4] - in[11];
    float tmp16_13 = in[5] - in[10];
    float tmp16_14 = in[6] - in[9];
    float tmp16_15 = in[7] - in[8];

    float tmp8_0 = tmp16_0 + tmp16_7;
    float tmp8_1 = tmp16_1 + tmp16_6;
    float tmp8_2 = tmp16_2 + tmp16_5;
    float tmp8_3 = tmp16_3 + tmp16_4;
    float tmp8_4 = tmp16_0 - tmp16_7;
    float tmp8_5 = tmp16_1 - tmp16_6;
    float tmp8_6 = tmp16_2 - tmp16_5;
    float tmp8_7 = tmp16_3 - tmp16_4;

    float t00 = tmp8_0 + tmp8_3;
    float t01 = tmp8_1 + tmp8_2;
    float t02 = tmp8_0 - tmp8_3;
    float t03 = tmp8_1 - tmp8_2;
    float t04 = tmp8_4 * kMultipliers_N8_c1;
    float t05 = tmp8_5 * kMultipliers_N8_c2;
    float t06 = tmp8_6 * kMultipliers_N8_c3;
    float t07 = tmp8_7 * kMultipliers_N8_c4;

    float t08 = t02 * kMultipliers_N4_c1;
    float t09 = t03 * kMultipliers_N4_c2;
    float t10 = t04 + t07;
    float t11 = t05 + t06;
    float t12 = t04 - t07;
    float t13 = t05 - t06;

    float t14 = t08 + t09;
    float t15 = t10 + t11;
    float t16 = t08 - t09;
    float t17 = t10 - t11;

    float t18 = t12 * kMultipliers_N4_c1;
    float t19 = t13 * kMultipliers_N4_c2;
    float t20 = t14 * sqrt2;
    float t21 = t15 * sqrt2;

    float t22 = t18 + t19;
    float t23 = t18 - t19;

    float t24 = t22 * sqrt2;

    float t25 = t24 + t23;

    float t26 = kMultipliers_N16_0 * tmp16_8;
    float t27 = kMultipliers_N16_1 * tmp16_9;
    float t28 = kMultipliers_N16_2 * tmp16_10;
    float t29 = kMultipliers_N16_3 * tmp16_11;
    float t30 = kMultipliers_N16_4 * tmp16_12;
    float t31 = kMultipliers_N16_5 * tmp16_13;
    float t32 = kMultipliers_N16_6 * tmp16_14;
    float t33 = kMultipliers_N16_7 * tmp16_15;

    float dmp8_0 = t26 + t33;
    float dmp8_1 = t27 + t32;
    float dmp8_2 = t28 + t31;
    float dmp8_3 = t29 + t30;
    float dmp8_4 = t26 - t33;
    float dmp8_5 = t27 - t32;
    float dmp8_6 = t28 - t31;
    float dmp8_7 = t29 - t30;

    float d00 = dmp8_0 + dmp8_3;
    float d01 = dmp8_1 + dmp8_2;
    float d02 = dmp8_0 - dmp8_3;
    float d03 = dmp8_1 - dmp8_2;
    float d04 = dmp8_4 * kMultipliers_N8_c1;
    float d05 = dmp8_5 * kMultipliers_N8_c2;
    float d06 = dmp8_6 * kMultipliers_N8_c3;
    float d07 = dmp8_7 * kMultipliers_N8_c4;

    float d08 = d02 * kMultipliers_N4_c1;
    float d09 = d03 * kMultipliers_N4_c2;
    float d10 = d04 + d07;
    float d11 = d05 + d06;
    float d12 = d04 - d07;
    float d13 = d05 - d06;

    float d14 = d08 + d09;
    float d15 = d10 + d11;
    float d16 = d08 - d09;
    float d17 = d10 - d11;

    float d18 = d12 * kMultipliers_N4_c1;
    float d19 = d13 * kMultipliers_N4_c2;
    float d20 = d14 * sqrt2;
    float d21 = d15 * sqrt2;

    float d22 = d18 + d19;
    float d23 = d18 - d19;

    float d24 = d22 * sqrt2;

    float d25 = d24 + d23;

    float d26 = d00 + d01;
    float d27 = d21 + d25;
    float d28 = d20 + d16;
    float d29 = d25 + d17;
    float d30 = d00 - d01;
    float d31 = d17 + d23;
    float d32 = d26 * sqrt2;

    out[0] = t00 + t01;
    out[1] = d32 + d27;
    out[2] = t21 + t25;
    out[3] = d27 + d28;
    out[4] = t20 + t16;
    out[5] = d28 + d29;
    out[6] = t25 + t17;
    out[7] = d29 + d30;
    out[8] = t00 - t01;
    out[9] = d30 + d31;
    out[10] = t17 + t23;
    out[11] = d31 + d16;
    out[12] = t16;
    out[13] = d16 + d23;
    out[14] = t23;
    out[15] = d23;
}

void hls_dct16_block(float in[256], float out[256]) {
#pragma HLS INLINE off
    float kMultipliers_N8_c1 = 0.5097955791041592;

    float kMultipliers_N8_c2 = 0.6013448869350453;
    float kMultipliers_N8_c3 = 0.8999762231364156;
    float kMultipliers_N8_c4 = 2.5629154477415055;
    float kMultipliers_N4_c1 = 0.541196100146197;
    float kMultipliers_N4_c2 = 1.3065629648763764;

    float kMultipliers_N16_0 = 0.5024192861881557;
    float kMultipliers_N16_1 = 0.5224986149396889;
    float kMultipliers_N16_2 = 0.5669440348163577;
    float kMultipliers_N16_3 = 0.6468217833599901;
    float kMultipliers_N16_4 = 0.7881546234512502;
    float kMultipliers_N16_5 = 1.060677685990347;
    float kMultipliers_N16_6 = 1.7224470982383342;
    float kMultipliers_N16_7 = 5.101148618689155;
    float sqrt2 = 1.4142135623730951f;

    for (int i = 0; i < 16; i++) {
#pragma HLS DEPENDENCE variable = in inter false
#pragma HLS DEPENDENCE variable = out inter false
#pragma HLS LOOP_FLATTEN off
#pragma HLS pipeline II = 11
        float tmp16_0 = in[16 * i + 0] + in[16 * i + 15];
        float tmp16_1 = in[16 * i + 1] + in[16 * i + 14];
        float tmp16_2 = in[16 * i + 2] + in[16 * i + 13];
        float tmp16_3 = in[16 * i + 3] + in[16 * i + 12];
        float tmp16_4 = in[16 * i + 4] + in[16 * i + 11];
        float tmp16_5 = in[16 * i + 5] + in[16 * i + 10];
        float tmp16_6 = in[16 * i + 6] + in[16 * i + 9];
        float tmp16_7 = in[16 * i + 7] + in[16 * i + 8];
        float tmp16_8 = in[16 * i + 0] - in[16 * i + 15];
        float tmp16_9 = in[16 * i + 1] - in[16 * i + 14];
        float tmp16_10 = in[16 * i + 2] - in[16 * i + 13];
        float tmp16_11 = in[16 * i + 3] - in[16 * i + 12];
        float tmp16_12 = in[16 * i + 4] - in[16 * i + 11];
        float tmp16_13 = in[16 * i + 5] - in[16 * i + 10];
        float tmp16_14 = in[16 * i + 6] - in[16 * i + 9];
        float tmp16_15 = in[16 * i + 7] - in[16 * i + 8];

        float tmp8_0 = tmp16_0 + tmp16_7;
        float tmp8_1 = tmp16_1 + tmp16_6;
        float tmp8_2 = tmp16_2 + tmp16_5;
        float tmp8_3 = tmp16_3 + tmp16_4;
        float tmp8_4 = tmp16_0 - tmp16_7;
        float tmp8_5 = tmp16_1 - tmp16_6;
        float tmp8_6 = tmp16_2 - tmp16_5;
        float tmp8_7 = tmp16_3 - tmp16_4;

        float t00 = tmp8_0 + tmp8_3;
        float t01 = tmp8_1 + tmp8_2;
        float t02 = tmp8_0 - tmp8_3;
        float t03 = tmp8_1 - tmp8_2;
        float t04 = tmp8_4 * kMultipliers_N8_c1;
        float t05 = tmp8_5 * kMultipliers_N8_c2;
        float t06 = tmp8_6 * kMultipliers_N8_c3;
        float t07 = tmp8_7 * kMultipliers_N8_c4;

        float t08 = t02 * kMultipliers_N4_c1;
        float t09 = t03 * kMultipliers_N4_c2;
        float t10 = t04 + t07;
        float t11 = t05 + t06;
        float t12 = t04 - t07;
        float t13 = t05 - t06;

        float t14 = t08 + t09;
        float t15 = t10 + t11;
        float t16 = t08 - t09;
        float t17 = t10 - t11;

        float t18 = t12 * kMultipliers_N4_c1;
        float t19 = t13 * kMultipliers_N4_c2;
        float t20 = t14 * sqrt2;
        float t21 = t15 * sqrt2;

        float t22 = t18 + t19;
        float t23 = t18 - t19;

        float t24 = t22 * sqrt2;

        float t25 = t24 + t23;

        float t26 = kMultipliers_N16_0 * tmp16_8;
        float t27 = kMultipliers_N16_1 * tmp16_9;
        float t28 = kMultipliers_N16_2 * tmp16_10;
        float t29 = kMultipliers_N16_3 * tmp16_11;
        float t30 = kMultipliers_N16_4 * tmp16_12;
        float t31 = kMultipliers_N16_5 * tmp16_13;
        float t32 = kMultipliers_N16_6 * tmp16_14;
        float t33 = kMultipliers_N16_7 * tmp16_15;

        float dmp8_0 = t26 + t33;
        float dmp8_1 = t27 + t32;
        float dmp8_2 = t28 + t31;
        float dmp8_3 = t29 + t30;
        float dmp8_4 = t26 - t33;
        float dmp8_5 = t27 - t32;
        float dmp8_6 = t28 - t31;
        float dmp8_7 = t29 - t30;

        float d00 = dmp8_0 + dmp8_3;
        float d01 = dmp8_1 + dmp8_2;
        float d02 = dmp8_0 - dmp8_3;
        float d03 = dmp8_1 - dmp8_2;
        float d04 = dmp8_4 * kMultipliers_N8_c1;
        float d05 = dmp8_5 * kMultipliers_N8_c2;
        float d06 = dmp8_6 * kMultipliers_N8_c3;
        float d07 = dmp8_7 * kMultipliers_N8_c4;

        float d08 = d02 * kMultipliers_N4_c1;
        float d09 = d03 * kMultipliers_N4_c2;
        float d10 = d04 + d07;
        float d11 = d05 + d06;
        float d12 = d04 - d07;
        float d13 = d05 - d06;

        float d14 = d08 + d09;
        float d15 = d10 + d11;
        float d16 = d08 - d09;
        float d17 = d10 - d11;

        float d18 = d12 * kMultipliers_N4_c1;
        float d19 = d13 * kMultipliers_N4_c2;
        float d20 = d14 * sqrt2;
        float d21 = d15 * sqrt2;

        float d22 = d18 + d19;
        float d23 = d18 - d19;

        float d24 = d22 * sqrt2;

        float d25 = d24 + d23;

        float d26 = d00 + d01;
        float d27 = d21 + d25;
        float d28 = d20 + d16;
        float d29 = d25 + d17;
        float d30 = d00 - d01;
        float d31 = d17 + d23;
        float d32 = d26 * sqrt2;

        out[16 * i + 0] = t00 + t01;
        out[16 * i + 1] = d32 + d27;
        out[16 * i + 2] = t21 + t25;
        out[16 * i + 3] = d27 + d28;
        out[16 * i + 4] = t20 + t16;
        out[16 * i + 5] = d28 + d29;
        out[16 * i + 6] = t25 + t17;
        out[16 * i + 7] = d29 + d30;
        out[16 * i + 8] = t00 - t01;
        out[16 * i + 9] = d30 + d31;
        out[16 * i + 10] = t17 + t23;
        out[16 * i + 11] = d31 + d16;
        out[16 * i + 12] = t16;
        out[16 * i + 13] = d16 + d23;
        out[16 * i + 14] = t23;
        out[16 * i + 15] = d23;
    }
}

void hls_ReinterpretingIDCT16(float input[4], float output[4]) {
#pragma HLS INLINE off
    float resample = 0.901764214038848876953125;

    float t0 = input[0];
    float t1 = input[1] * resample;
    float t2 = input[2] * resample;
    float t3 = input[3] * resample * resample;

    float t4 = t0 + t2;
    float t5 = t1 + t3;
    float t6 = t0 - t2;
    float t7 = t1 - t3;

    float t8 = t4;
    float t9 = t6;
    float t10 = t5;
    float t11 = t7;

    output[0] = t8 + t10;
    output[2] = t8 - t10;
    output[1] = t9 + t11;
    output[3] = t9 - t11;
}

// dct 16x16
void load_dct16(float in[256], hls::stream<float>& opsin16x16_stream) {
#pragma HLS INLINE off
    for (int y8 = 0; y8 < 2; y8++) {
        for (int x8 = 0; x8 < 2; x8++) {
            for (int m = 0; m < 8; m++) {
                for (int n = 0; n < 8; n++) {
#pragma HLS PIPELINE II = 1
                    int addr = y8 * 16 * 8 + x8 * 8 + m * 16 + n;
                    in[addr] = opsin16x16_stream.read();
                }
            }
        }
    }
}

void transposeDct16(float in[256], float out[256]) {
#pragma HLS INLINE off
    for (int i = 0; i < 16; i++) {
        for (int j = 0; j < 16; j++) {
#pragma HLS PIPELINE II = 1
            out[j * 16 + i] = in[i * 16 + j];
        }
    }
}

void transposeDct16_scale(float in[256], float out[256]) {
#pragma HLS INLINE off
    for (int i = 0; i < 16; i++) {
        for (int j = 0; j < 16; j++) {
#pragma HLS PIPELINE II = 1
            float mul = 1.0f / 16.0f;
            out[j * 16 + i] = mul * in[i * 16 + j];
        }
    }
}

void dct16_ac_writeout(float to_ac[256],
                       hls::stream<uint8_t>& stream_recty,
                       hls::stream<uint8_t>& stream_rectx,
                       hls::stream<float>& ac_coef16x16_stream,
                       uint32_t x16,
                       uint32_t y16) {
#pragma HLS INLINE off
    uint8_t rect_xsize;
    uint8_t rect_ysize;
    for (int m = 0; m < 256; m++) {
#pragma HLS PIPELINE II = 1
        if (m == 0) {
            rect_xsize = stream_rectx.read();
            rect_ysize = stream_recty.read();
        }
        if ((2 * x16 + 1) < rect_xsize && (2 * y16 + 1) < rect_ysize) {
            ac_coef16x16_stream.write(to_ac[m]);
        }
    }
}

void dct16_dc_writeout(float to_dc[4],
                       hls::stream<uint8_t>& stream_recty,
                       hls::stream<uint8_t>& stream_rectx,
                       hls::stream<float>& dc_coef16x16_stream,
                       uint32_t x16,
                       uint32_t y16) {
#pragma HLS INLINE off
    uint8_t rect_xsize;
    uint8_t rect_ysize;
    for (int m = 0; m < 4; m++) {
#pragma HLS PIPELINE II = 1
        if (m == 0) {
            rect_xsize = stream_rectx.read();
            rect_ysize = stream_recty.read();
        }
        if ((2 * x16 + 1) < rect_xsize && (2 * y16 + 1) < rect_ysize) {
            dc_coef16x16_stream.write(to_dc[m]);
        }
    }
}

void dct16_ac_dc_split(float in[256], float ac_out1[256], float dc_out[4]) {
#pragma HLS INLINE off
    for (int i = 0; i < 256; i++) {
#pragma HLS PIPELINE II = 1
        ac_out1[i] = in[i];
        if (i == 0)
            dc_out[0] = in[i];
        else if (i == 1)
            dc_out[1] = in[i];
        else if (i == 16)
            dc_out[2] = in[i];
        else if (i == 17)
            dc_out[3] = in[i];
    }
}

void dct16_test_load(float from[256], hls::stream<float>& opsin16x16_stream) {
#pragma HLS INLINE off
    for (int m = 0; m < 16; m++) {
        for (int n = 0; n < 16; n++) {
#pragma HLS PIPELINE II = 1
            int addr = 16 * m + n;
            from[addr] = opsin16x16_stream.read();
        }
    }
}

void hls_dct16x16_module(unsigned ysize,
                         unsigned xsize,
                         hls::stream<uint8_t>& stream_recty16,
                         hls::stream<uint8_t>& stream_rectx16,
                         hls::stream<uint8_t>& stream_recty16_1,
                         hls::stream<uint8_t>& stream_rectx16_1,
                         hls::stream<float>& opsin16x16_stream,
                         hls::stream<float>& ac_coef16x16_stream,
                         hls::stream<float>& dc_coef16x16_stream) {
#pragma HLS INLINE off

    int tile_xsize = (xsize + 63) / 64 * 64;
    int tile_ysize = (ysize + 63) / 64 * 64;

    uint32_t ysize64 = tile_ysize / 64;
    uint32_t xsize64 = tile_xsize / 64;
    uint32_t ysize16 = tile_ysize / 16;
    uint32_t xsize16 = tile_xsize / 16;
    int xsize_blocks = xsize / 8;
    int ysize_blocks = ysize / 8;

    float from[256];
#pragma HLS bind_storage variable = from type = ram_2p impl = bram
    float temp0[256];
#pragma HLS bind_storage variable = temp0 type = ram_2p impl = bram
    float temp1[256];
#pragma HLS bind_storage variable = temp1 type = ram_2p impl = bram
    float temp2[256];
#pragma HLS bind_storage variable = temp2 type = ram_2p impl = bram
    float temp3[256];
#pragma HLS bind_storage variable = temp3 type = ram_2p impl = bram
    float temp4[256];
#pragma HLS bind_storage variable = temp4 type = ram_2p impl = bram
    float to_ac[256];
#pragma HLS bind_storage variable = to_ac type = ram_2p impl = bram
    float to_dc[4];
#pragma HLS bind_storage variable = to_dc type = ram_2p impl = bram
    float dc_mem[4];
#pragma HLS bind_storage variable = dc_mem type = ram_2p impl = bram

    for (uint32_t y64 = 0; y64 < ysize64; y64++) {
        for (uint32_t x64 = 0; x64 < xsize64; x64++) {
            for (uint32_t y16 = 0; y16 < 4; y16++) {
                for (uint32_t x16 = 0; x16 < 4; x16++) {
                    for (int c = 0; c < 3; c++) {
// #pragma HLS PIPELINE rewind
#pragma HLS DATAFLOW
                        dct16_test_load(from, opsin16x16_stream);
                        transposeDct16(from, temp0);
                        hls_dct16_block(temp0, temp1);
                        transposeDct16_scale(temp1, temp2);
                        hls_dct16_block(temp2, temp3);
                        transposeDct16_scale(temp3, temp4);
                        dct16_ac_dc_split(temp4, to_ac, to_dc);
                        // output ac_coeff_stream
                        dct16_ac_writeout(to_ac, stream_recty16, stream_rectx16, ac_coef16x16_stream, x16, y16);
                        // output dc_coeff_stream
                        hls_ReinterpretingIDCT16(to_dc, dc_mem);
                        dct16_dc_writeout(dc_mem, stream_recty16_1, stream_rectx16_1, dc_coef16x16_stream, x16, y16);
                    }
                }
            }
        }
    }
}

// template <bool transpose_scale>
void hls_DCT1DImpl_32(float in[1024], float out[1024]) {
#pragma HLS INLINE off

    float kMultipliers_N32_0 = 0.5006029982351963;
    float kMultipliers_N32_1 = 0.5054709598975436;
    float kMultipliers_N32_2 = 0.5154473099226246;
    float kMultipliers_N32_3 = 0.531042591089784;
    float kMultipliers_N32_4 = 0.553103896034444;
    float kMultipliers_N32_5 = 0.5829349682061339;
    float kMultipliers_N32_6 = 0.622504123035664;
    float kMultipliers_N32_7 = 0.674808341455005;
    float kMultipliers_N32_8 = 0.7445362710022986;
    float kMultipliers_N32_9 = 0.839349645415526;
    float kMultipliers_N32_10 = 0.9725682378619608;
    float kMultipliers_N32_11 = 1.169439933432884;
    float kMultipliers_N32_12 = 1.4841646163141662;
    float kMultipliers_N32_13 = 2.057781009953411;
    float kMultipliers_N32_14 = 3.407608418468719;
    float kMultipliers_N32_15 = 10.19000812354803;

    float sqrt2 = 1.4142135623730951f;

    float kMultipliers_N8_c1 = 0.5097955791041592;

    float kMultipliers_N8_c2 = 0.6013448869350453;
    float kMultipliers_N8_c3 = 0.8999762231364156;
    float kMultipliers_N8_c4 = 2.5629154477415055;
    float kMultipliers_N4_c1 = 0.541196100146197;
    float kMultipliers_N4_c2 = 1.3065629648763764;

    float kMultipliers_N16_0 = 0.5024192861881557;
    float kMultipliers_N16_1 = 0.5224986149396889;
    float kMultipliers_N16_2 = 0.5669440348163577;
    float kMultipliers_N16_3 = 0.6468217833599901;
    float kMultipliers_N16_4 = 0.7881546234512502;
    float kMultipliers_N16_5 = 1.060677685990347;
    float kMultipliers_N16_6 = 1.7224470982383342;
    float kMultipliers_N16_7 = 5.101148618689155;

    for (int i = 0; i < 32; i++) {
#pragma HLS PIPELINE II = 30
        float tmp32_b16_0 = in[0 + 32 * i] + in[31 + 32 * i];
        float tmp32_b16_1 = in[1 + 32 * i] + in[30 + 32 * i];
        float tmp32_b16_2 = in[2 + 32 * i] + in[29 + 32 * i];
        float tmp32_b16_3 = in[3 + 32 * i] + in[28 + 32 * i];
        float tmp32_b16_4 = in[4 + 32 * i] + in[27 + 32 * i];
        float tmp32_b16_5 = in[5 + 32 * i] + in[26 + 32 * i];
        float tmp32_b16_6 = in[6 + 32 * i] + in[25 + 32 * i];
        float tmp32_b16_7 = in[7 + 32 * i] + in[24 + 32 * i];
        float tmp32_b16_8 = in[8 + 32 * i] + in[23 + 32 * i];
        float tmp32_b16_9 = in[9 + 32 * i] + in[22 + 32 * i];
        float tmp32_b16_10 = in[10 + 32 * i] + in[21 + 32 * i];
        float tmp32_b16_11 = in[11 + 32 * i] + in[20 + 32 * i];
        float tmp32_b16_12 = in[12 + 32 * i] + in[19 + 32 * i];
        float tmp32_b16_13 = in[13 + 32 * i] + in[18 + 32 * i];
        float tmp32_b16_14 = in[14 + 32 * i] + in[17 + 32 * i];
        float tmp32_b16_15 = in[15 + 32 * i] + in[16 + 32 * i];

        float tmp16_0_b16 = tmp32_b16_0 + tmp32_b16_15;
        float tmp16_1_b16 = tmp32_b16_1 + tmp32_b16_14;
        float tmp16_2_b16 = tmp32_b16_2 + tmp32_b16_13;
        float tmp16_3_b16 = tmp32_b16_3 + tmp32_b16_12;
        float tmp16_4_b16 = tmp32_b16_4 + tmp32_b16_11;
        float tmp16_5_b16 = tmp32_b16_5 + tmp32_b16_10;
        float tmp16_6_b16 = tmp32_b16_6 + tmp32_b16_9;
        float tmp16_7_b16 = tmp32_b16_7 + tmp32_b16_8;
        float tmp16_8_b16 = tmp32_b16_0 - tmp32_b16_15;
        float tmp16_9_b16 = tmp32_b16_1 - tmp32_b16_14;
        float tmp16_10_b16 = tmp32_b16_2 - tmp32_b16_13;
        float tmp16_11_b16 = tmp32_b16_3 - tmp32_b16_12;
        float tmp16_12_b16 = tmp32_b16_4 - tmp32_b16_11;
        float tmp16_13_b16 = tmp32_b16_5 - tmp32_b16_10;
        float tmp16_14_b16 = tmp32_b16_6 - tmp32_b16_9;
        float tmp16_15_b16 = tmp32_b16_7 - tmp32_b16_8;

        float tmp8_0_b16 = tmp16_0_b16 + tmp16_7_b16;
        float tmp8_1_b16 = tmp16_1_b16 + tmp16_6_b16;
        float tmp8_2_b16 = tmp16_2_b16 + tmp16_5_b16;
        float tmp8_3_b16 = tmp16_3_b16 + tmp16_4_b16;
        float tmp8_4_b16 = tmp16_0_b16 - tmp16_7_b16;
        float tmp8_5_b16 = tmp16_1_b16 - tmp16_6_b16;
        float tmp8_6_b16 = tmp16_2_b16 - tmp16_5_b16;
        float tmp8_7_b16 = tmp16_3_b16 - tmp16_4_b16;

        float t00_b16 = tmp8_0_b16 + tmp8_3_b16;
        float t01_b16 = tmp8_1_b16 + tmp8_2_b16;
        float t02_b16 = tmp8_0_b16 - tmp8_3_b16;
        float t03_b16 = tmp8_1_b16 - tmp8_2_b16;
        float t04_b16 = tmp8_4_b16 * kMultipliers_N8_c1;
        float t05_b16 = tmp8_5_b16 * kMultipliers_N8_c2;
        float t06_b16 = tmp8_6_b16 * kMultipliers_N8_c3;
        float t07_b16 = tmp8_7_b16 * kMultipliers_N8_c4;

        float t08_b16 = t02_b16 * kMultipliers_N4_c1;
        float t09_b16 = t03_b16 * kMultipliers_N4_c2;
        float t10_b16 = t04_b16 + t07_b16;
        float t11_b16 = t05_b16 + t06_b16;
        float t12_b16 = t04_b16 - t07_b16;
        float t13_b16 = t05_b16 - t06_b16;

        float t14_b16 = t08_b16 + t09_b16;
        float t15_b16 = t10_b16 + t11_b16;
        float t16_b16 = t08_b16 - t09_b16;
        float t17_b16 = t10_b16 - t11_b16;

        float t18_b16 = t12_b16 * kMultipliers_N4_c1;
        float t19_b16 = t13_b16 * kMultipliers_N4_c2;
        float t20_b16 = t14_b16 * sqrt2;
        float t21_b16 = t15_b16 * sqrt2;

        float t22_b16 = t18_b16 + t19_b16;
        float t23_b16 = t18_b16 - t19_b16;

        float t24_b16 = t22_b16 * sqrt2;

        float t25_b16 = t24_b16 + t23_b16;

        float t26_b16 = kMultipliers_N16_0 * tmp16_8_b16;
        float t27_b16 = kMultipliers_N16_1 * tmp16_9_b16;
        float t28_b16 = kMultipliers_N16_2 * tmp16_10_b16;
        float t29_b16 = kMultipliers_N16_3 * tmp16_11_b16;
        float t30_b16 = kMultipliers_N16_4 * tmp16_12_b16;
        float t31_b16 = kMultipliers_N16_5 * tmp16_13_b16;
        float t32_b16 = kMultipliers_N16_6 * tmp16_14_b16;
        float t33_b16 = kMultipliers_N16_7 * tmp16_15_b16;

        float dmp8_0_b16 = t26_b16 + t33_b16;
        float dmp8_1_b16 = t27_b16 + t32_b16;
        float dmp8_2_b16 = t28_b16 + t31_b16;
        float dmp8_3_b16 = t29_b16 + t30_b16;
        float dmp8_4_b16 = t26_b16 - t33_b16;
        float dmp8_5_b16 = t27_b16 - t32_b16;
        float dmp8_6_b16 = t28_b16 - t31_b16;
        float dmp8_7_b16 = t29_b16 - t30_b16;

        float d00_b16 = dmp8_0_b16 + dmp8_3_b16;
        float d01_b16 = dmp8_1_b16 + dmp8_2_b16;
        float d02_b16 = dmp8_0_b16 - dmp8_3_b16;
        float d03_b16 = dmp8_1_b16 - dmp8_2_b16;
        float d04_b16 = dmp8_4_b16 * kMultipliers_N8_c1;
        float d05_b16 = dmp8_5_b16 * kMultipliers_N8_c2;
        float d06_b16 = dmp8_6_b16 * kMultipliers_N8_c3;
        float d07_b16 = dmp8_7_b16 * kMultipliers_N8_c4;

        float d08_b16 = d02_b16 * kMultipliers_N4_c1;
        float d09_b16 = d03_b16 * kMultipliers_N4_c2;
        float d10_b16 = d04_b16 + d07_b16;
        float d11_b16 = d05_b16 + d06_b16;
        float d12_b16 = d04_b16 - d07_b16;
        float d13_b16 = d05_b16 - d06_b16;

        float d14_b16 = d08_b16 + d09_b16;
        float d15_b16 = d10_b16 + d11_b16;
        float d16_b16 = d08_b16 - d09_b16;
        float d17_b16 = d10_b16 - d11_b16;

        float d18_b16 = d12_b16 * kMultipliers_N4_c1;
        float d19_b16 = d13_b16 * kMultipliers_N4_c2;
        float d20_b16 = d14_b16 * sqrt2;
        float d21_b16 = d15_b16 * sqrt2;

        float d22_b16 = d18_b16 + d19_b16;
        float d23_b16 = d18_b16 - d19_b16;

        float d24_b16 = d22_b16 * sqrt2;

        float d25_b16 = d24_b16 + d23_b16;

        float d26_b16 = d00_b16 + d01_b16;
        float d27_b16 = d21_b16 + d25_b16;
        float d28_b16 = d20_b16 + d16_b16;
        float d29_b16 = d25_b16 + d17_b16;
        float d30_b16 = d00_b16 - d01_b16;
        float d31_b16 = d17_b16 + d23_b16;
        float d32_b16 = d26_b16 * sqrt2;

        float tmp32_b16_out1_0 = t00_b16 + t01_b16;
        float tmp32_b16_out1_1 = d32_b16 + d27_b16;
        float tmp32_b16_out1_2 = t21_b16 + t25_b16;
        float tmp32_b16_out1_3 = d27_b16 + d28_b16;
        float tmp32_b16_out1_4 = t20_b16 + t16_b16;
        float tmp32_b16_out1_5 = d28_b16 + d29_b16;
        float tmp32_b16_out1_6 = t25_b16 + t17_b16;
        float tmp32_b16_out1_7 = d29_b16 + d30_b16;
        float tmp32_b16_out1_8 = t00_b16 - t01_b16;
        float tmp32_b16_out1_9 = d30_b16 + d31_b16;
        float tmp32_b16_out1_10 = t17_b16 + t23_b16;
        float tmp32_b16_out1_11 = d31_b16 + d16_b16;
        float tmp32_b16_out1_12 = t16_b16;
        float tmp32_b16_out1_13 = d16_b16 + d23_b16;
        float tmp32_b16_out1_14 = t23_b16;
        float tmp32_b16_out1_15 = d23_b16;

        float tmp32_b32_add_sub_16 = in[0 + 32 * i] - in[31 + 32 * i];
        float tmp32_b32_add_sub_17 = in[1 + 32 * i] - in[30 + 32 * i];
        float tmp32_b32_add_sub_18 = in[2 + 32 * i] - in[29 + 32 * i];
        float tmp32_b32_add_sub_19 = in[3 + 32 * i] - in[28 + 32 * i];
        float tmp32_b32_add_sub_20 = in[4 + 32 * i] - in[27 + 32 * i];
        float tmp32_b32_add_sub_21 = in[5 + 32 * i] - in[26 + 32 * i];
        float tmp32_b32_add_sub_22 = in[6 + 32 * i] - in[25 + 32 * i];
        float tmp32_b32_add_sub_23 = in[7 + 32 * i] - in[24 + 32 * i];
        float tmp32_b32_add_sub_24 = in[8 + 32 * i] - in[23 + 32 * i];
        float tmp32_b32_add_sub_25 = in[9 + 32 * i] - in[22 + 32 * i];
        float tmp32_b32_add_sub_26 = in[10 + 32 * i] - in[21 + 32 * i];
        float tmp32_b32_add_sub_27 = in[11 + 32 * i] - in[20 + 32 * i];
        float tmp32_b32_add_sub_28 = in[12 + 32 * i] - in[19 + 32 * i];
        float tmp32_b32_add_sub_29 = in[13 + 32 * i] - in[18 + 32 * i];
        float tmp32_b32_add_sub_30 = in[14 + 32 * i] - in[17 + 32 * i];
        float tmp32_b32_add_sub_31 = in[15 + 32 * i] - in[16 + 32 * i];

        float tmp32_b32_mul_16 = tmp32_b32_add_sub_16 * kMultipliers_N32_0;
        float tmp32_b32_mul_17 = tmp32_b32_add_sub_17 * kMultipliers_N32_1;
        float tmp32_b32_mul_18 = tmp32_b32_add_sub_18 * kMultipliers_N32_2;
        float tmp32_b32_mul_19 = tmp32_b32_add_sub_19 * kMultipliers_N32_3;
        float tmp32_b32_mul_20 = tmp32_b32_add_sub_20 * kMultipliers_N32_4;
        float tmp32_b32_mul_21 = tmp32_b32_add_sub_21 * kMultipliers_N32_5;
        float tmp32_b32_mul_22 = tmp32_b32_add_sub_22 * kMultipliers_N32_6;
        float tmp32_b32_mul_23 = tmp32_b32_add_sub_23 * kMultipliers_N32_7;
        float tmp32_b32_mul_24 = tmp32_b32_add_sub_24 * kMultipliers_N32_8;
        float tmp32_b32_mul_25 = tmp32_b32_add_sub_25 * kMultipliers_N32_9;
        float tmp32_b32_mul_26 = tmp32_b32_add_sub_26 * kMultipliers_N32_10;
        float tmp32_b32_mul_27 = tmp32_b32_add_sub_27 * kMultipliers_N32_11;
        float tmp32_b32_mul_28 = tmp32_b32_add_sub_28 * kMultipliers_N32_12;
        float tmp32_b32_mul_29 = tmp32_b32_add_sub_29 * kMultipliers_N32_13;
        float tmp32_b32_mul_30 = tmp32_b32_add_sub_30 * kMultipliers_N32_14;
        float tmp32_b32_mul_31 = tmp32_b32_add_sub_31 * kMultipliers_N32_15;

        float tmp16_0_b32 = tmp32_b32_mul_16 + tmp32_b32_mul_31;
        float tmp16_1_b32 = tmp32_b32_mul_17 + tmp32_b32_mul_30;
        float tmp16_2_b32 = tmp32_b32_mul_18 + tmp32_b32_mul_29;
        float tmp16_3_b32 = tmp32_b32_mul_19 + tmp32_b32_mul_28;
        float tmp16_4_b32 = tmp32_b32_mul_20 + tmp32_b32_mul_27;
        float tmp16_5_b32 = tmp32_b32_mul_21 + tmp32_b32_mul_26;
        float tmp16_6_b32 = tmp32_b32_mul_22 + tmp32_b32_mul_25;
        float tmp16_7_b32 = tmp32_b32_mul_23 + tmp32_b32_mul_24;
        float tmp16_8_b32 = tmp32_b32_mul_16 - tmp32_b32_mul_31;
        float tmp16_9_b32 = tmp32_b32_mul_17 - tmp32_b32_mul_30;
        float tmp16_10_b32 = tmp32_b32_mul_18 - tmp32_b32_mul_29;
        float tmp16_11_b32 = tmp32_b32_mul_19 - tmp32_b32_mul_28;
        float tmp16_12_b32 = tmp32_b32_mul_20 - tmp32_b32_mul_27;
        float tmp16_13_b32 = tmp32_b32_mul_21 - tmp32_b32_mul_26;
        float tmp16_14_b32 = tmp32_b32_mul_22 - tmp32_b32_mul_25;
        float tmp16_15_b32 = tmp32_b32_mul_23 - tmp32_b32_mul_24;

        float tmp8_0_b32 = tmp16_0_b32 + tmp16_7_b32;
        float tmp8_1_b32 = tmp16_1_b32 + tmp16_6_b32;
        float tmp8_2_b32 = tmp16_2_b32 + tmp16_5_b32;
        float tmp8_3_b32 = tmp16_3_b32 + tmp16_4_b32;
        float tmp8_4_b32 = tmp16_0_b32 - tmp16_7_b32;
        float tmp8_5_b32 = tmp16_1_b32 - tmp16_6_b32;
        float tmp8_6_b32 = tmp16_2_b32 - tmp16_5_b32;
        float tmp8_7_b32 = tmp16_3_b32 - tmp16_4_b32;

        float t00_b32 = tmp8_0_b32 + tmp8_3_b32;
        float t01_b32 = tmp8_1_b32 + tmp8_2_b32;
        float t02_b32 = tmp8_0_b32 - tmp8_3_b32;
        float t03_b32 = tmp8_1_b32 - tmp8_2_b32;
        float t04_b32 = tmp8_4_b32 * kMultipliers_N8_c1;
        float t05_b32 = tmp8_5_b32 * kMultipliers_N8_c2;
        float t06_b32 = tmp8_6_b32 * kMultipliers_N8_c3;
        float t07_b32 = tmp8_7_b32 * kMultipliers_N8_c4;

        float t08_b32 = t02_b32 * kMultipliers_N4_c1;
        float t09_b32 = t03_b32 * kMultipliers_N4_c2;
        float t10_b32 = t04_b32 + t07_b32;
        float t11_b32 = t05_b32 + t06_b32;
        float t12_b32 = t04_b32 - t07_b32;
        float t13_b32 = t05_b32 - t06_b32;

        float t14_b32 = t08_b32 + t09_b32;
        float t15_b32 = t10_b32 + t11_b32;
        float t16_b32 = t08_b32 - t09_b32;
        float t17_b32 = t10_b32 - t11_b32;

        float t18_b32 = t12_b32 * kMultipliers_N4_c1;
        float t19_b32 = t13_b32 * kMultipliers_N4_c2;
        float t20_b32 = t14_b32 * sqrt2;
        float t21_b32 = t15_b32 * sqrt2;

        float t22_b32 = t18_b32 + t19_b32;
        float t23_b32 = t18_b32 - t19_b32;

        float t24_b32 = t22_b32 * sqrt2;

        float t25_b32 = t24_b32 + t23_b32;

        float t26_b32 = kMultipliers_N16_0 * tmp16_8_b32;
        float t27_b32 = kMultipliers_N16_1 * tmp16_9_b32;
        float t28_b32 = kMultipliers_N16_2 * tmp16_10_b32;
        float t29_b32 = kMultipliers_N16_3 * tmp16_11_b32;
        float t30_b32 = kMultipliers_N16_4 * tmp16_12_b32;
        float t31_b32 = kMultipliers_N16_5 * tmp16_13_b32;
        float t32_b32 = kMultipliers_N16_6 * tmp16_14_b32;
        float t33_b32 = kMultipliers_N16_7 * tmp16_15_b32;

        float dmp8_0_b32 = t26_b32 + t33_b32;
        float dmp8_1_b32 = t27_b32 + t32_b32;
        float dmp8_2_b32 = t28_b32 + t31_b32;
        float dmp8_3_b32 = t29_b32 + t30_b32;
        float dmp8_4_b32 = t26_b32 - t33_b32;
        float dmp8_5_b32 = t27_b32 - t32_b32;
        float dmp8_6_b32 = t28_b32 - t31_b32;
        float dmp8_7_b32 = t29_b32 - t30_b32;

        float d00_b32 = dmp8_0_b32 + dmp8_3_b32;
        float d01_b32 = dmp8_1_b32 + dmp8_2_b32;
        float d02_b32 = dmp8_0_b32 - dmp8_3_b32;
        float d03_b32 = dmp8_1_b32 - dmp8_2_b32;
        float d04_b32 = dmp8_4_b32 * kMultipliers_N8_c1;
        float d05_b32 = dmp8_5_b32 * kMultipliers_N8_c2;
        float d06_b32 = dmp8_6_b32 * kMultipliers_N8_c3;
        float d07_b32 = dmp8_7_b32 * kMultipliers_N8_c4;

        float d08_b32 = d02_b32 * kMultipliers_N4_c1;
        float d09_b32 = d03_b32 * kMultipliers_N4_c2;
        float d10_b32 = d04_b32 + d07_b32;
        float d11_b32 = d05_b32 + d06_b32;
        float d12_b32 = d04_b32 - d07_b32;
        float d13_b32 = d05_b32 - d06_b32;

        float d14_b32 = d08_b32 + d09_b32;
        float d15_b32 = d10_b32 + d11_b32;
        float d16_b32 = d08_b32 - d09_b32;
        float d17_b32 = d10_b32 - d11_b32;

        float d18_b32 = d12_b32 * kMultipliers_N4_c1;
        float d19_b32 = d13_b32 * kMultipliers_N4_c2;
        float d20_b32 = d14_b32 * sqrt2;
        float d21_b32 = d15_b32 * sqrt2;

        float d22_b32 = d18_b32 + d19_b32;
        float d23_b32 = d18_b32 - d19_b32;

        float d24_b32 = d22_b32 * sqrt2;

        float d25_b32 = d24_b32 + d23_b32;

        float d26_b32 = d00_b32 + d01_b32;
        float d27_b32 = d21_b32 + d25_b32;
        float d28_b32 = d20_b32 + d16_b32;
        float d29_b32 = d25_b32 + d17_b32;
        float d30_b32 = d00_b32 - d01_b32;
        float d31_b32 = d17_b32 + d23_b32;
        float d32_b32 = d26_b32 * sqrt2;

        float tmp32_b32_add_out2_16 = t00_b32 + t01_b32;
        float tmp32_b32_add_out2_17 = d32_b32 + d27_b32;
        float tmp32_b32_add_out2_18 = t21_b32 + t25_b32;
        float tmp32_b32_add_out2_19 = d27_b32 + d28_b32;
        float tmp32_b32_add_out2_20 = t20_b32 + t16_b32;
        float tmp32_b32_add_out2_21 = d28_b32 + d29_b32;
        float tmp32_b32_add_out2_22 = t25_b32 + t17_b32;
        float tmp32_b32_add_out2_23 = d29_b32 + d30_b32;
        float tmp32_b32_add_out2_24 = t00_b32 - t01_b32;
        float tmp32_b32_add_out2_25 = d30_b32 + d31_b32;
        float tmp32_b32_add_out2_26 = t17_b32 + t23_b32;
        float tmp32_b32_add_out2_27 = d31_b32 + d16_b32;
        float tmp32_b32_add_out2_28 = t16_b32;
        float tmp32_b32_add_out2_29 = d16_b32 + d23_b32;
        float tmp32_b32_add_out2_30 = t23_b32;
        float tmp32_b32_add_out2_31 = d23_b32;

        float tmp32_b32_out2_16 = tmp32_b32_add_out2_16 * sqrt2 + tmp32_b32_add_out2_17;
        float tmp32_b32_out2_17 = tmp32_b32_add_out2_17 + tmp32_b32_add_out2_18;
        float tmp32_b32_out2_18 = tmp32_b32_add_out2_18 + tmp32_b32_add_out2_19;
        float tmp32_b32_out2_19 = tmp32_b32_add_out2_19 + tmp32_b32_add_out2_20;
        float tmp32_b32_out2_20 = tmp32_b32_add_out2_20 + tmp32_b32_add_out2_21;
        float tmp32_b32_out2_21 = tmp32_b32_add_out2_21 + tmp32_b32_add_out2_22;
        float tmp32_b32_out2_22 = tmp32_b32_add_out2_22 + tmp32_b32_add_out2_23;
        float tmp32_b32_out2_23 = tmp32_b32_add_out2_23 + tmp32_b32_add_out2_24;
        float tmp32_b32_out2_24 = tmp32_b32_add_out2_24 + tmp32_b32_add_out2_25;
        float tmp32_b32_out2_25 = tmp32_b32_add_out2_25 + tmp32_b32_add_out2_26;
        float tmp32_b32_out2_26 = tmp32_b32_add_out2_26 + tmp32_b32_add_out2_27;
        float tmp32_b32_out2_27 = tmp32_b32_add_out2_27 + tmp32_b32_add_out2_28;
        float tmp32_b32_out2_28 = tmp32_b32_add_out2_28 + tmp32_b32_add_out2_29;
        float tmp32_b32_out2_29 = tmp32_b32_add_out2_29 + tmp32_b32_add_out2_30;
        float tmp32_b32_out2_30 = tmp32_b32_add_out2_30 + tmp32_b32_add_out2_31;
        float tmp32_b32_out2_31 = tmp32_b32_add_out2_31;

        out[0 + 32 * i] = tmp32_b16_out1_0;
        out[2 + 32 * i] = tmp32_b16_out1_1;
        out[4 + 32 * i] = tmp32_b16_out1_2;
        out[6 + 32 * i] = tmp32_b16_out1_3;
        out[8 + 32 * i] = tmp32_b16_out1_4;
        out[10 + 32 * i] = tmp32_b16_out1_5;
        out[12 + 32 * i] = tmp32_b16_out1_6;
        out[14 + 32 * i] = tmp32_b16_out1_7;
        out[16 + 32 * i] = tmp32_b16_out1_8;
        out[18 + 32 * i] = tmp32_b16_out1_9;
        out[20 + 32 * i] = tmp32_b16_out1_10;
        out[22 + 32 * i] = tmp32_b16_out1_11;
        out[24 + 32 * i] = tmp32_b16_out1_12;
        out[26 + 32 * i] = tmp32_b16_out1_13;
        out[28 + 32 * i] = tmp32_b16_out1_14;
        out[30 + 32 * i] = tmp32_b16_out1_15;

        out[1 + 32 * i] = tmp32_b32_out2_16;
        out[3 + 32 * i] = tmp32_b32_out2_17;
        out[5 + 32 * i] = tmp32_b32_out2_18;
        out[7 + 32 * i] = tmp32_b32_out2_19;
        out[9 + 32 * i] = tmp32_b32_out2_20;
        out[11 + 32 * i] = tmp32_b32_out2_21;
        out[13 + 32 * i] = tmp32_b32_out2_22;
        out[15 + 32 * i] = tmp32_b32_out2_23;
        out[17 + 32 * i] = tmp32_b32_out2_24;
        out[19 + 32 * i] = tmp32_b32_out2_25;
        out[21 + 32 * i] = tmp32_b32_out2_26;
        out[23 + 32 * i] = tmp32_b32_out2_27;
        out[25 + 32 * i] = tmp32_b32_out2_28;
        out[27 + 32 * i] = tmp32_b32_out2_29;
        out[29 + 32 * i] = tmp32_b32_out2_30;
        out[31 + 32 * i] = tmp32_b32_out2_31;
    }
}

void hls_IDCT1D_32(float from[16], float to[16]) {
#pragma HLS INLINE off
    float IDCT_kMUltipliers_N4_0 = 0.541196100146197;
    float IDCT_kMUltipliers_N4_1 = 1.3065629648763764;
    float sqrt2 = 1.4142135623730951f;

    for (int i = 0; i < 4; i++) {
#pragma HLS PIPELINE II = 128
        float* from_addr = &from[i];
        float* to_addr = &to[i];

        float tmp_IDCT_in_0 = from[i + 0];
        float tmp_IDCT_in_1 = from[i + 8];
        float tmp_IDCT_in_2 = from[i + 4];
        float tmp_IDCT_in_3 = from[i + 12];

        float tmp_IDCT_add_0 = tmp_IDCT_in_0 + tmp_IDCT_in_1;
        float in1_dct = tmp_IDCT_in_2 * sqrt2;
        float tmp_IDCT_add_1 = tmp_IDCT_in_0 - tmp_IDCT_in_1;
        float in2_dct = tmp_IDCT_in_3 + tmp_IDCT_in_2;

        float tmp_IDCT_add_2 = in1_dct + in2_dct;
        float tmp_IDCT_add_3 = in1_dct - in2_dct;

        to[i + 0] = IDCT_kMUltipliers_N4_0 * tmp_IDCT_add_2 + tmp_IDCT_add_0;
        to[i + 4] = IDCT_kMUltipliers_N4_1 * tmp_IDCT_add_3 + tmp_IDCT_add_1;
        to[i + 8] = tmp_IDCT_add_1 - IDCT_kMUltipliers_N4_1 * tmp_IDCT_add_3;
        to[i + 12] = tmp_IDCT_add_0 - IDCT_kMUltipliers_N4_0 * tmp_IDCT_add_2;
    }
}

void hls_idct32_scale_2d(float in[16], float out[16]) {
#pragma HLS INLINE off

Loop_idct32_1:
    for (int y = 0; y < 4; y++) {
    Loop_idct32_2:
        for (int x = 0; x < 4; x++) {
#pragma HLS PIPELINE
            float resampley;
            float resamplex;
            if (x == 0) {
                resamplex = 1;
            } else if (x == 1) {
                resamplex = 0.974886834621429443359375;
            } else if (x == 2) {
                resamplex = 0.901764214038848876953125;
            } else if (x == 3) {
                resamplex = 0.78705489635467529296875;
            }
            if (y == 0) {
                resampley = 1;
            } else if (y == 1) {
                resampley = 0.974886834621429443359375;
            } else if (y == 2) {
                resampley = 0.901764214038848876953125;
            } else if (y == 3) {
                resampley = 0.78705489635467529296875;
            }
            out[y * 4 + x] = in[y * 4 + x] * resampley * resamplex;
        }
    }
}

void hls_idct_transpose4x4(float in[16], float out[16]) {
#pragma HLS INLINE off
Loop_idct_transpose:
    for (int i = 0; i < 4; i++) {
        for (int j = 0; j < 4; j++) {
#pragma HLS PIPELINE
            out[i * 4 + j] = in[j * 4 + i];
        }
    }
}

void load_dct32(hls::stream<float>& opsin32x32_stream, float from[1024]) {
#pragma HLS INLINE off
load_dct32:
    for (int m = 0; m < 32; m++) {
        for (int n = 0; n < 32; n++) {
#pragma HLS PIPELINE II = 1
            int addr = n * 32 + m; // m * 32 + n;
            from[addr] = opsin32x32_stream.read();
        }
    }
}

void transpose_dct32(float in[1024], float out[1024]) {
#pragma HLS INLINE off
    for (int i = 0; i < 32; i++) {
        for (int j = 0; j < 32; j++) {
#pragma HLS PIPELINE II = 1
            out[32 * j + i] = in[i * 32 + j];
        }
    }
}

void transpose_scaled_dct32(float in[1024], float out[1024]) {
#pragma HLS INLINE off
    for (int i = 0; i < 32; i++) {
        for (int j = 0; j < 32; j++) {
#pragma HLS PIPELINE II = 1
            float mul = 1.0f / 32.0f;
            float temp = mul * in[i * 32 + j];
            out[32 * j + i] = temp;
        }
    }
}

void split_ac_dc_dct32(float in[1024], float to_ac[1024], float to_dc[16]) {
#pragma HLS INLINE off
    for (int i = 0; i < 32; i++) {
        for (int j = 0; j < 32; j++) {
#pragma HLS PIPELINE II = 1
            to_ac[32 * i + j] = in[32 * i + j];

            if (j < 4 && i < 4) {
                to_dc[i * 4 + j] = in[32 * i + j];
            }
        }
    }
}

void scaled_dct32(float in[1024], float out[1024]) {
#pragma HLS INLINE off
    for (int i = 0; i < 32; i++) {
        for (int j = 0; j < 32; j++) {
#pragma HLS PIPELINE II = 1
            float mul = 1.0f / 32.0f;
            out[32 * i + j] = mul * in[i * 32 + j];
        }
    }
}

void feed_dct32_ac(uint32_t x32,
                   uint32_t y32,
                   hls::stream<uint8_t>& stream_rectx32,
                   hls::stream<uint8_t>& stream_recty32,
                   float in[1024],
                   hls::stream<float>& ac_coef32x32_stream) {
#pragma HLS INLINE off
    uint32_t rect_xsize;
    uint32_t rect_ysize;
loop_feed_dct32_ac:
    for (int m = 0; m < 1024; m++) {
#pragma HLS PIPELINE II = 1
        if (m == 0) {
            rect_xsize = stream_rectx32.read();
            rect_ysize = stream_recty32.read();
        }
        if ((4 * x32 + 3) < rect_xsize && (4 * y32 + 3) < rect_ysize) {
            // printf("feed ac %d %d %d\n", in[m], rect_xsize, rect_ysize);
            ac_coef32x32_stream.write(in[m]);
        }
    }
}

void feed_dct32_dc(uint32_t x32,
                   uint32_t y32,
                   hls::stream<uint8_t>& stream_rectx32,
                   hls::stream<uint8_t>& stream_recty32,
                   float dc_mem[16],
                   hls::stream<float>& dc_coef32x32_stream) {
#pragma HLS INLINE off
    uint32_t rect_xsize;
    uint32_t rect_ysize;
loop_feed_dct32_dc:
    for (int m = 0; m < 16; m++) {
#pragma HLS PIPELINE II = 1
        if (m == 0) {
            rect_xsize = stream_rectx32.read();
            rect_ysize = stream_recty32.read();
        }
        if ((4 * x32 + 3) < rect_xsize && (4 * y32 + 3) < rect_ysize) {
            dc_coef32x32_stream.write(dc_mem[m]);
        }
    }
}

void hls_dct32x32_module(unsigned ysize,
                         unsigned xsize,
                         hls::stream<uint8_t>& stream_recty32,
                         hls::stream<uint8_t>& stream_rectx32,
                         hls::stream<uint8_t>& stream_recty32_1,
                         hls::stream<uint8_t>& stream_rectx32_1,
                         hls::stream<float>& opsin32x32_stream,
                         hls::stream<float>& ac_coef32x32_stream,
                         hls::stream<float>& dc_coef32x32_stream) {
#pragma HLS INLINE off
    int tile_xsize = (xsize + 63) / 64 * 64;
    int tile_ysize = (ysize + 63) / 64 * 64;

    int ysize64 = tile_ysize / 64;
    int xsize64 = tile_xsize / 64;

    float from[1024];
#pragma HLS bind_storage variable = from type = ram_2p impl = bram
    float temp0[1024];
#pragma HLS bind_storage variable = temp0 type = ram_2p impl = bram
    float temp1[1024];
#pragma HLS bind_storage variable = temp1 type = ram_2p impl = bram
    float temp2[1024];
#pragma HLS bind_storage variable = temp2 type = ram_2p impl = bram
    float temp3[1024];
#pragma HLS bind_storage variable = temp3 type = ram_2p impl = bram
    float temp4[1024];
#pragma HLS bind_storage variable = temp4 type = ram_2p impl = bram
    float temp5[1024];
#pragma HLS bind_storage variable = temp4 type = ram_2p impl = bram
    float to_ac[1024];
#pragma HLS bind_storage variable = to_ac type = ram_2p impl = bram
    float to_dc[16];
#pragma HLS bind_storage variable = to_dc type = ram_2p impl = bram
    float dc_mem[16];
#pragma HLS bind_storage variable = to_dc type = ram_2p impl = bram
    float dc_temp0[16];
#pragma HLS bind_storage variable = temp0 type = ram_2p impl = bram
    float dc_temp1[16];
#pragma HLS bind_storage variable = temp1 type = ram_2p impl = bram
    float dc_temp2[16];
#pragma HLS bind_storage variable = temp2 type = ram_2p impl = bram

loop_dct32_tile_y:
    for (uint32_t y64 = 0; y64 < ysize64; y64++) {
        for (uint32_t x64 = 0; x64 < xsize64; x64++) {
            for (uint32_t y32 = 0; y32 < 2; y32++) {
                for (uint32_t x32 = 0; x32 < 2; x32++) {
                    for (int c = 0; c < 3; c++) {
#pragma HLS DATAFLOW
                        load_dct32(opsin32x32_stream, from);
                        hls_DCT1DImpl_32(from, temp1);
                        scaled_dct32(temp1, temp2);
                        transpose_dct32(temp2, temp3);
                        hls_DCT1DImpl_32(temp3, temp4);
                        transpose_scaled_dct32(temp4, temp5);
                        split_ac_dc_dct32(temp5, to_ac, to_dc);
                        // output ac_coeff dct32
                        feed_dct32_ac(x32, y32, stream_rectx32, stream_recty32, to_ac, ac_coef32x32_stream);
                        // ouput dc_coeff dct32
                        hls_idct32_scale_2d(to_dc, dc_temp0);
                        hls_IDCT1D_32(dc_temp0, dc_temp1);
                        hls_idct_transpose4x4(dc_temp1, dc_temp2);
                        hls_IDCT1D_32(dc_temp2, dc_mem);
                        feed_dct32_dc(x32, y32, stream_rectx32_1, stream_recty32_1, dc_mem, dc_coef32x32_stream);
                    }
                }
            }
        }
    }
}

int Div_Ceil2(int a, int b) {
#pragma HLS inline
    return (a + b - 1) / b;
}

void GetRectSizeDCT(short xsize,
                    short ysize,
                    hls::stream<uint8_t>& stream_rectx_dct,
                    hls::stream<uint8_t>& stream_recty_dct,
                    hls::stream<uint8_t>& stream_rectx32,
                    hls::stream<uint8_t>& stream_recty32,
                    hls::stream<uint8_t>& stream_rectx32_1,
                    hls::stream<uint8_t>& stream_recty32_1,
                    hls::stream<uint8_t>& stream_rectx16,
                    hls::stream<uint8_t>& stream_recty16,
                    hls::stream<uint8_t>& stream_rectx16_1,
                    hls::stream<uint8_t>& stream_recty16_1,
                    hls::stream<uint8_t>& stream_rectx8,
                    hls::stream<uint8_t>& stream_recty8,
                    hls::stream<uint8_t>& stream_rectx8_1,
                    hls::stream<uint8_t>& stream_recty8_1) {
    uint16_t xsize_blocks = xsize / 8;
    uint16_t ysize_blocks = ysize / 8;
LOOP_0:
    for (uint16_t y = 0; y < Div_Ceil2(ysize_blocks, 8); y++) {
    LOOP_1:
        for (uint16_t x = 0; x < Div_Ceil2(xsize_blocks, 8); x++) {
#pragma HLS LOOP_TRIPCOUNT min = 64 max = 64
            // uint16_t by = y * 8;
            // uint16_t by1 = ((y + 1) * 8) < ysize_blocks ? ((y + 1) * 8) : ysize_blocks;
            // uint16_t bx = x * 8;
            // uint16_t bx1 = ((x + 1) * 8) < xsize_blocks ? ((x + 1) * 8) : xsize_blocks;
            // uint8_t rect_ysize = by1 - by;
            // uint8_t rect_xsize = bx1 - bx;
            uint8_t rect_ysize = stream_recty_dct.read();
            uint8_t rect_xsize = stream_rectx_dct.read();
            // printf("rect_xsize=%d, rect_ysize=%d\n", rect_xsize, rect_ysize);
            for (int i = 0; i < 192; i++) {
                if (i < 12) {
                    stream_rectx32.write(rect_xsize);
                    stream_recty32.write(rect_ysize);
                    stream_rectx32_1.write(rect_xsize);
                    stream_recty32_1.write(rect_ysize);
                }
                if (i < 48) {
                    stream_rectx16.write(rect_xsize);
                    stream_recty16.write(rect_ysize);
                    stream_rectx16_1.write(rect_xsize);
                    stream_recty16_1.write(rect_ysize);
                }
                stream_rectx8.write(rect_xsize);
                stream_recty8.write(rect_ysize);
                stream_rectx8_1.write(rect_xsize);
                stream_recty8_1.write(rect_ysize);
            }
        }
    }
}

void hls_dct_top(unsigned ysize,
                 unsigned xsize,
                 hls::stream<uint8_t>& stream_rectx_dct,
                 hls::stream<uint8_t>& stream_recty_dct,
                 hls::stream<float>& opsin8x8_stream,
                 hls::stream<float>& opsin16x16_stream,
                 hls::stream<float>& opsin32x32_stream,
                 hls::stream<float>& ac_coef8x8_stream,
                 hls::stream<float>& ac_coef16x16_stream,
                 hls::stream<float>& ac_coef32x32_stream,
                 hls::stream<float>& dc_coef8x8_stream,
                 hls::stream<float>& dc_coef16x16_stream,
                 hls::stream<float>& dc_coef32x32_stream) {
    // #pragma HLS INLINE
    hls::stream<uint8_t, 1024> stream_rectx32;
    hls::stream<uint8_t, 1024> stream_recty32;
    hls::stream<uint8_t, 1024> stream_rectx32_1;
    hls::stream<uint8_t, 1024> stream_recty32_1;
    hls::stream<uint8_t, 1024> stream_rectx16;
    hls::stream<uint8_t, 1024> stream_recty16;
    hls::stream<uint8_t, 1024> stream_rectx16_1;
    hls::stream<uint8_t, 1024> stream_recty16_1;
    hls::stream<uint8_t, 1024> stream_rectx8;
    hls::stream<uint8_t, 1024> stream_recty8;
    hls::stream<uint8_t, 1024> stream_rectx8_1;
    hls::stream<uint8_t, 1024> stream_recty8_1;
// #pragma HLS DATAFLOW
#pragma HLS INLINE
    GetRectSizeDCT(xsize, ysize, stream_rectx_dct, stream_recty_dct, stream_rectx32, stream_recty32, stream_rectx32_1,
                   stream_recty32_1, stream_rectx16, stream_recty16, stream_rectx16_1, stream_recty16_1, stream_rectx8,
                   stream_recty8, stream_rectx8_1, stream_recty8_1);
    hls_dct8x8_module(ysize, xsize, stream_recty8, stream_rectx8, stream_recty8_1, stream_rectx8_1, opsin8x8_stream,
                      ac_coef8x8_stream, dc_coef8x8_stream);
    hls_dct16x16_module(ysize, xsize, stream_recty16, stream_rectx16, stream_recty16_1, stream_rectx16_1,
                        opsin16x16_stream, ac_coef16x16_stream, dc_coef16x16_stream);
    hls_dct32x32_module(ysize, xsize, stream_recty32, stream_rectx32, stream_recty32_1, stream_rectx32_1,
                        opsin32x32_stream, ac_coef32x32_stream, dc_coef32x32_stream);
}

//-----------------------acs_heuristic---------------------//

int Div_Ceil(int a, int b) {
#pragma HLS inline
    return (a + b - 1) / b;
}

float EvalRationalPolynomial3_2(float x, float p[3], float q[3]) {
    float yp = p[2];
    float yq = q[2];
    yp = (yp * x) + p[1];
    yq = (yq * x) + q[1];
    yp = (yp * x) + p[0];
    yq = (yq * x) + q[0];
    return yp / yq;
}

float FastLog2f_HLS2(float x) {
    union {
        float x_f;
        int x_i;
    } u = {x};
    float p[3] = {-1.8503833400518310E-06f, 1.4287160470083755E+00f, 7.4245873327820566E-01f};
    float q[3] = {9.9032814277590719E-01f, 1.0096718572241148E+00f, 1.7409343003366853E-01f};
    int x_bits = u.x_i;
    int exp_bits = x_bits - 0x3f2aaaab; // = 2/3
    int exp_shifted = exp_bits >> 23;
    int result0 = exp_shifted << 23;
    int result = x_bits - result0;
    u.x_i = result;
    float mantissa = u.x_f;
    float exp_val = static_cast<float>(exp_shifted);
    float output = EvalRationalPolynomial3_2(mantissa - 1.0f, p, q) + exp_val;
    return output;
}

float FastPow2f_HLS(float x) {
    int floorx = floor(x);
    int tmp = ((floorx + 127) << 23);
    union {
        float x_f;
        int x_i;
    } u;
    u.x_i = tmp;
    float exp = u.x_f;
    float frac = x - floorx;
    float num = frac + 1.01749063e+01;
    num = num * frac + 4.88687798e+01;
    num = num * frac + 9.85506591e+01;
    num = num * exp;
    float den = frac * 2.10242958e-01 - 2.22328856e-02;
    den = den * frac - 1.94414990e+01;
    den = den * frac + 9.85506633e+01;
    return num / den;
}

float FastPowf_HLS(float base, float exponent) {
    return FastPow2f_HLS(FastLog2f_HLS2(base) * exponent);
}

int CeilLog2NonzeroHLS(ap_int<32> x) {
    int leading_zeros = x.countLeadingZeros();
    int floor_log2 = 63 ^ (leading_zeros + 32);
    if ((x & (x - 1)) != 0) {
        floor_log2 = floor_log2 + 1;
    }
    return floor_log2;
}

void GetACSSize(short xsize,
                short ysize,
                hls::stream<uint8_t>& stream_rectx_acs,
                hls::stream<uint8_t>& stream_recty_acs,
                hls::stream<uint8_t>& stream_rectx0,
                hls::stream<uint8_t>& stream_recty0,
                hls::stream<uint8_t>& stream_rectx1,
                hls::stream<uint8_t>& stream_recty1,
                hls::stream<uint8_t>& stream_rectx2,
                hls::stream<uint8_t>& stream_recty2,
                hls::stream<uint8_t>& stream_rectx3,
                hls::stream<uint8_t>& stream_recty3,
                hls::stream<uint8_t>& stream_rectx10,
                hls::stream<uint8_t>& stream_recty10) {
    uint16_t xsize_blocks = xsize / 8;
    uint16_t ysize_blocks = ysize / 8;
LOOP_0:
    for (uint16_t y = 0; y < Div_Ceil(ysize_blocks, 8); y++) {
    LOOP_1:
        for (uint16_t x = 0; x < Div_Ceil(xsize_blocks, 8); x++) {
#pragma HLS LOOP_TRIPCOUNT min = 64 max = 64
            // uint16_t by = y * 8;
            // uint16_t by1 = ((y + 1) * 8) < ysize_blocks ? ((y + 1) * 8) : ysize_blocks;
            // uint16_t bx = x * 8;
            // uint16_t bx1 = ((x + 1) * 8) < xsize_blocks ? ((x + 1) * 8) : xsize_blocks;
            // uint8_t rect_ysize = by1 - by;
            // uint8_t rect_xsize = bx1 - bx;
            uint8_t rect_ysize = stream_recty_acs.read();
            uint8_t rect_xsize = stream_rectx_acs.read();
            stream_rectx0.write(rect_xsize);
            stream_recty0.write(rect_ysize);
            stream_rectx1.write(rect_xsize);
            stream_recty1.write(rect_ysize);
            stream_rectx2.write(rect_xsize);
            stream_recty2.write(rect_ysize);
            stream_rectx3.write(rect_xsize);
            stream_recty3.write(rect_ysize);
            stream_rectx10.write(rect_xsize);
            stream_recty10.write(rect_ysize);
        }
    }
}

void DupQuantAndMask(uint16_t num_tile,
                     hls::stream<uint8_t>& stream_rectx,
                     hls::stream<uint8_t>& stream_recty,
                     hls::stream<float>& stream_q_org,
                     hls::stream<float>& stream_mask_org,
                     hls::stream<float>& stream_q_org_8,
                     hls::stream<float>& stream_mask_org_8,
                     hls::stream<float>& stream_q_org_16,
                     hls::stream<float>& stream_mask_org_16,
                     hls::stream<float>& stream_q_org_32,
                     hls::stream<float>& stream_mask_org_32) {
DUP_0:
    for (uint16_t tid = 0; tid < num_tile; tid++) {
#pragma HLS LOOP_TRIPCOUNT min = 64 max = 64
        uint8_t rect_ysize = stream_recty.read();
        uint8_t rect_xsize = stream_rectx.read();
    DUP_1:
        for (uint8_t iy = 0; iy < rect_ysize; iy++) {
#pragma HLS LOOP_TRIPCOUNT min = 8 max = 8
        DUP_2:
            for (uint8_t ix = 0; ix < rect_xsize; ix++) {
#pragma HLS LOOP_TRIPCOUNT min = 8 max = 8
                // do computation once for 16 and 32
                float tmp0 = stream_q_org.read();
                stream_q_org_8.write(tmp0);
                tmp0 *= tmp0;
                tmp0 *= tmp0;
                tmp0 *= tmp0;
                stream_q_org_16.write(tmp0);
                stream_q_org_32.write(tmp0);
                float tmp1 = stream_mask_org.read();
                stream_mask_org_8.write(tmp1);
                stream_mask_org_16.write(tmp1);
                stream_mask_org_32.write(tmp1);
            }
        }
    }
}

void GetQAndMask_8(uint16_t num_tile,
                   hls::stream<uint8_t>& stream_rectx,
                   hls::stream<uint8_t>& stream_recty,
                   hls::stream<uint8_t>& stream_rectx_out,
                   hls::stream<uint8_t>& stream_recty_out,
                   hls::stream<float>& stream_q_org,
                   hls::stream<float>& stream_mask_org,
                   hls::stream<float>& stream_q,
                   hls::stream<float>& stream_mask) {
LOOP_0:
    for (uint16_t tid = 0; tid < num_tile; tid++) {
#pragma HLS LOOP_TRIPCOUNT min = 64 max = 64
        uint8_t rect_ysize = stream_recty.read();
        uint8_t rect_xsize = stream_rectx.read();
        stream_recty_out.write(rect_ysize);
        stream_rectx_out.write(rect_xsize);
    LOOP_1:
        for (uint8_t iy = 0; iy < rect_ysize; iy++) {
#pragma HLS LOOP_TRIPCOUNT min = 8 max = 8
        LOOP_2:
            for (uint8_t ix = 0; ix < rect_xsize; ix++) {
#pragma HLS LOOP_TRIPCOUNT min = 8 max = 8
#pragma HLS pipeline II = 64
                float quant_norm8 = 0;
                float masking = 0;
                quant_norm8 = stream_q_org.read();
                stream_q.write(quant_norm8);
                masking = 2.0f * stream_mask_org.read();
                stream_mask.write(masking);
            }
        }
    }
}

template <int N>
void GetQAndMask_16_32(uint16_t num_tile,
                       hls::stream<uint8_t>& stream_rectx,
                       hls::stream<uint8_t>& stream_recty,
                       hls::stream<uint8_t>& stream_rectx_out,
                       hls::stream<uint8_t>& stream_recty_out,
                       hls::stream<float>& stream_q_org,
                       hls::stream<float>& stream_mask_org,
                       hls::stream<float>& stream_q,
                       hls::stream<float>& stream_mask) {
    uint8_t block_n = N * N;
LOOP_0:
    for (uint16_t tid = 0; tid < num_tile; tid++) {
#pragma HLS LOOP_TRIPCOUNT min = 64 max = 64
        uint8_t rect_ysize = stream_recty.read();
        uint8_t rect_xsize = stream_rectx.read();
        stream_recty_out.write(rect_ysize);
        stream_rectx_out.write(rect_xsize);
        float q_array[64];
#pragma HLS BIND_STORAGE variable = q_array type = RAM_1P impl = bram
        float mask_array[64];
#pragma HLS BIND_STORAGE variable = mask_array type = RAM_1P impl = bram
    LOOP_1:
        for (uint8_t iy = 0; iy < rect_ysize; iy++) {
#pragma HLS LOOP_TRIPCOUNT min = 8 max = 8
#pragma HLS loop_flatten off
        LOOP_2:
            for (uint8_t ix = 0; ix < rect_xsize; ix++) {
#pragma HLS pipeline II = 1
#pragma HLS LOOP_TRIPCOUNT min = 8 max = 8
#pragma HLS loop_flatten off
                int index = iy * 8 + ix;
                q_array[index] = stream_q_org.read();
                mask_array[index] = stream_mask_org.read();
            }
        }
    LOOP_3:
        for (uint8_t iy = 0; iy + N - 1 < rect_ysize; iy += N) {
#pragma HLS LOOP_TRIPCOUNT min = 2 max = 2
#pragma HLS loop_flatten off
        LOOP_4:
            for (uint8_t ix = 0; ix + N - 1 < rect_xsize; ix += N) {
#pragma HLS LOOP_TRIPCOUNT min = 2 max = 2
#pragma HLS loop_flatten off
                float quant_norm8 = 0;
                float masking = 0;
                float masking_norm2 = 0;
                float masking_max = 0;
            LOOP_5:
                for (uint8_t dy = 0; dy < N; dy++) {
#pragma HLS LOOP_TRIPCOUNT min = 4 max = 4
#pragma HLS loop_flatten off
                LOOP_6:
                    for (uint8_t dx = 0; dx < N; dx++) {
#pragma HLS LOOP_TRIPCOUNT min = 4 max = 4
#pragma HLS loop_flatten off
#pragma HLS pipeline
                        uint8_t idx = (iy + dy) * 8 + ix + dx;
                        float qval = q_array[idx];
                        quant_norm8 += qval;
                        float maskval = mask_array[idx];
                        masking_max = fmax(masking_max, maskval);
                        masking_norm2 += maskval * maskval;
                    }
                }
                quant_norm8 /= block_n;
            // Change: use 3 sqrtf to replace FastPowf_HLS, and try to only use on sqrtf to do all things
            // float tmp = quant_norm8;
            // quant_norm8 = sqrtf(quant_norm8);
            // quant_norm8 = sqrtf(quant_norm8);
            // quant_norm8 = sqrtf(quant_norm8);
            LOOP_7:
                for (int dx = 0; dx < 3; dx++) {
#pragma HLS pipeline
                    quant_norm8 = sqrtf(quant_norm8);
                }
                // quant_norm8 = FastPowf_HLS(quant_norm8, 1.0f / 8.0f);
                masking_norm2 = sqrtf(masking_norm2 / block_n);
                masking = masking_norm2 + masking_max;
                stream_q.write(quant_norm8);
                stream_mask.write(masking);
            }
        }
    }
}

template <int N>
void ComputeEntropy1(uint16_t num_tile,
                     hls::stream<uint8_t>& stream_rectx,
                     hls::stream<uint8_t>& stream_recty,
                     hls::stream<uint8_t>& stream_rectx_out,
                     hls::stream<uint8_t>& stream_recty_out,
                     hls::stream<float>& stream_q,
                     hls::stream<float>& stream_dctin,
#ifdef FIX
                     hls::stream<ap_int<28> >& stream_loss,
                     hls::stream<ap_int<44> >& stream_loss2,
                     hls::stream<ap_int<42> >& stream_entropy,
                     hls::stream<ap_int<11> >& stream_nzeros
#else
                     hls::stream<float>& stream_loss,
                     hls::stream<float>& stream_loss2,
                     hls::stream<float>& stream_entropy,
                     hls::stream<float>& stream_nzeros
#endif
                     ) {
    uint8_t block_n = N * N;
    int count_array;
    float info_loss = 0.0;
    float info_loss2 = 0.0;
    float entropy = 0.0;
    float zeros_mul = 7.565053364251793f;
    float cost2 = 4.4628149885273363f;
    float cost_delta = 5.3359184934516337f;
    float cmap_factor;
    float q;
    float entropy_v[3] = {0.0, 0.0, 0.0};
    float nzeros_v[3] = {0.0, 0.0, 0.0};
    float entropy_array[8];
    float info_loss_array[8];
    float info_loss2_array[8];
    float nzeros_array[8];
    float y_ram[1024];
    float cmap_factors_init[3] = {0.0f, 0.0f, 1.0f};
#ifdef FIX
    ap_int<23> info_loss_fix[8];
    ap_int<45> info_loss2_fix[8];
    ap_int<11> nzeros_fix[8];
    ap_int<32> y_fix_ram[1024];
    ap_int<32> cost2_fix = (int)(cost2 * 1024);
    ap_int<32> cost_delta_fix = (int)(cost_delta * 1024);
    ap_int<28> info_loss_sum;
    ap_int<44> info_loss2_sum;
    ap_int<11> nzeros_sum;
    ap_int<42> entropy_sum;
#endif
LOOP_0:
    for (uint16_t tid = 0; tid < num_tile; tid++) {
#pragma HLS LOOP_TRIPCOUNT min = 64 max = 64
        uint16_t rect_ysize = stream_recty.read();
        uint16_t rect_xsize = stream_rectx.read();
        stream_recty_out.write(rect_ysize);
        stream_rectx_out.write(rect_xsize);
        float q_tmp[64];
    LOOP_1:
        for (uint8_t iy = 0; iy + N - 1 < rect_ysize; iy += N) {
#pragma HLS LOOP_TRIPCOUNT min = 8 max = 8
        LOOP_2:
            for (uint8_t ix = 0; ix + N - 1 < rect_xsize; ix += N) {
#pragma HLS LOOP_TRIPCOUNT min = 8 max = 8
            LOOP_3:
                for (uint8_t c = 0; c < 3; c++) {
#pragma HLS LOOP_TRIPCOUNT min = 3 max = 3
                LOOP_4:
                    for (uint16_t i = 0; i < block_n * 64; i += 1) {
#pragma HLS LOOP_TRIPCOUNT min = 64 max = 64
#pragma HLS pipeline II = 1
                        float in = stream_dctin.read();
#ifdef FIX
                        if (i == 0) {
                            nzeros_sum = 0;
                            entropy_sum = 0;
                            if (c == 0) {
                                q = stream_q.read();
                                info_loss_sum = 0;
                                info_loss2_sum = 0;
                            }
                        }
                        ap_int<30> in_fix = in * 0x1fffffff; // exp=29
                        float in_fix_y_tmp;
                        if (c == 0) {
                            y_fix_ram[i] = in_fix;
                            in_fix_y_tmp = in_fix;
                        } else {
                            in_fix_y_tmp = y_fix_ram[i];
                        }
                        ap_int<30> in_fix_y = (c == 2) ? in_fix_y_tmp : 0;
                        ap_int<31> in_fix_m = in_fix - in_fix_y;

                        ap_uint<24> im_fix;
                        if (N == 1) {
                            im_fix = inv_matrix_8_fix[c][i]; // exp=10
                        }
                        if (N == 2) {
                            im_fix = inv_matrix_16_fix[c][i];
                        }
                        if (N == 4) {
                            im_fix = inv_matrix_32_fix[c][i];
                        }

                        ap_uint<15> rqf_fix = q * 32768;          // exp=15
                        ap_int<55> val_tmp0 = in_fix_m * im_fix;  // exp=29+10=39
                        ap_int<28> val_tmp1 = val_tmp0 >> 27;     // exp=39-27=12
                        ap_int<43> val_tmp2 = val_tmp1 * rqf_fix; // exp=12+15=27
                        ap_int<35> val_fix = val_tmp2 >> 11;      // exp=27-11=16

                        // actual value is not that large, so just reduce bitwidth
                        ap_int<11> val_shift0 = val_fix >> 15;
                        ap_int<10> val_shift1 = val_fix >> 16;
                        if (val_shift0.range(0, 0) == 1) {
                            val_shift1 += 1;
                        }
                        ap_int<10> rval_fix = val_shift1;                          // exp=0
                        ap_int<32> val_shift_back = val_shift1 * 65536;            // exp=16
                        ap_uint<16> diff_fix = hls::abs(val_shift_back - val_fix); // exp=-16 hls_abs?
                        ap_uint<32> diff_fix_square = diff_fix * diff_fix;         // exp=-32
                        ap_uint<10> q_fix = hls::abs(rval_fix);                    // hls_abs?
                        bool q_fix_is_zero = q_fix == 0;
                        float entropy_tmp = (q_fix > 1 ? cost2 : 0.0f) + sqrtf(q_fix) * cost_delta;
                        ap_uint<32> entropy_fix = (uint32_t)(entropy_tmp * 65536);

                        info_loss_sum += diff_fix;
                        info_loss2_sum += diff_fix_square;
                        nzeros_sum += q_fix_is_zero ? 0 : 1;
                        entropy_sum += entropy_fix;

                        if (i == block_n * 64 - 1) {
                            stream_entropy.write(entropy_sum);
                            stream_nzeros.write(nzeros_sum);
                        }
                        if (i == block_n * 64 - 1 && c == 2) {
                            stream_loss.write(info_loss_sum);
                            stream_loss2.write(info_loss2_sum);
                        }
#else
                        if (c == 0 && i == 0) {
                            q = stream_q.read();
                            count_array = 0;
                        }
                        cmap_factor = cmap_factors_init[c];
                        float in_y_tmp;
                        if (c == 0) {
                            y_ram[i] = in;
                            in_y_tmp = in;
                        } else {
                            in_y_tmp = y_ram[i];
                        }
                        float in_y = in_y_tmp * cmap_factor;
                        float im;
                        if (N == 1) {
                            im = inv_matrix_8[c][i];
                        }
                        if (N == 2) {
                            im = inv_matrix_16[c][i];
                        }
                        if (N == 4) {
                            im = inv_matrix_32[c][i];
                        }
                        const float val = (in - in_y) * im * q;
                        const int rval = roundf(val);
                        const float diff = fabs(val - rval);

                        info_loss_array[count_array] = diff;
                        info_loss2_array[count_array] = diff * diff;

                        const int q = abs(rval);
                        const bool q_is_zero = q == 0;
                        float tmp = (q >= 1.5f ? cost2 : 0.0f) + sqrtf(q) * cost_delta;
                        entropy_array[count_array] = tmp;
                        nzeros_array[count_array] = q_is_zero ? 0.0f : 1.0f;
                        count_array++;
                        if (count_array == 8) {
                            float sum0 = entropy_array[0] + entropy_array[1] + entropy_array[2] + entropy_array[3] +
                                         entropy_array[4] + entropy_array[5] + entropy_array[6] + entropy_array[7];
                            stream_entropy.write(sum0);
                            float sum1 = nzeros_array[0] + nzeros_array[1] + nzeros_array[2] + nzeros_array[3] +
                                         nzeros_array[4] + nzeros_array[5] + nzeros_array[6] + nzeros_array[7];
                            stream_nzeros.write(sum1);
                            float sum2 = info_loss_array[0] + info_loss_array[1] + info_loss_array[2] +
                                         info_loss_array[3] + info_loss_array[4] + info_loss_array[5] +
                                         info_loss_array[6] + info_loss_array[7];
                            stream_loss.write(sum2);
                            float sum3 = info_loss2_array[0] + info_loss2_array[1] + info_loss2_array[2] +
                                         info_loss2_array[3] + info_loss2_array[4] + info_loss2_array[5] +
                                         info_loss2_array[6] + info_loss2_array[7];
                            stream_loss2.write(sum3);
                            count_array = 0;
                        }
#endif
                    } // loop i
                }
            }
        }
    }
}

template <int N>
void ComputeEntropy2(uint16_t num_tile,
                     hls::stream<uint8_t>& stream_rectx,
                     hls::stream<uint8_t>& stream_recty,
                     hls::stream<uint8_t>& stream_rectx_out,
                     hls::stream<uint8_t>& stream_recty_out,
                     hls::stream<float>& stream_loss,
                     hls::stream<float>& stream_loss2,
                     hls::stream<float>& stream_entropy,
                     hls::stream<float>& stream_nzeros,
                     hls::stream<float>& stream_loss_sum,
                     hls::stream<float>& stream_loss2_sum,
                     hls::stream<float>& stream_entropy_sum,
                     hls::stream<float>& stream_nzeros_sum) {
    float entropy_v[3];
    float nzeros_v[3];
    float info_loss;
    float info_loss2;
LOOP_0:
    for (uint16_t tid = 0; tid < num_tile; tid++) {
#pragma HLS LOOP_TRIPCOUNT min = 64 max = 64
        uint8_t rect_ysize = stream_recty.read();
        uint8_t rect_xsize = stream_rectx.read();
        stream_recty_out.write(rect_ysize);
        stream_rectx_out.write(rect_xsize);
    LOOP_1:
        for (uint8_t iy = 0; iy + N - 1 < rect_ysize; iy += N) {
#pragma HLS LOOP_TRIPCOUNT min = 8 max = 8
        LOOP_2:
            for (uint8_t ix = 0; ix + N - 1 < rect_xsize; ix += N) {
#pragma HLS LOOP_TRIPCOUNT min = 8 max = 8
            LOOP_3:
                for (uint8_t c = 0; c < 3; c++) {
#pragma HLS LOOP_TRIPCOUNT min = 3 max = 3
                LOOP_4:
                    for (uint8_t i = 0; i < 64 * N * N / 8; i += 1) {
#pragma HLS LOOP_TRIPCOUNT min = 8 max = 8
#pragma HLS pipeline II = 8
                        if (c == 0 && i == 0) {
                            info_loss = 0.0;
                            info_loss2 = 0.0;
                        }
                        if (i == 0) {
                            entropy_v[c] = 0;
                            nzeros_v[c] = 0;
                        }
                        entropy_v[c] += stream_entropy.read();
                        nzeros_v[c] += stream_nzeros.read();
                        info_loss += stream_loss.read();
                        info_loss2 += stream_loss2.read();
                        if (i == 64 * N * N / 8 - 1) {
                            stream_entropy_sum.write(entropy_v[c]);
                            stream_nzeros_sum.write(nzeros_v[c]);
                        }
                        if (c == 2 && i == 64 * N * N / 8 - 1) {
                            stream_loss_sum.write(info_loss);
                            stream_loss2_sum.write(info_loss2);
                        }
                    }
                }
            }
        }
    }
}

template <int N>
void ComputeEntropy3(uint16_t num_tile,
                     float cost1,
                     float mul,
                     hls::stream<uint8_t>& stream_rectx,
                     hls::stream<uint8_t>& stream_recty,
#ifdef FIX
                     hls::stream<ap_int<28> >& stream_loss,
                     hls::stream<ap_int<44> >& stream_loss2,
                     hls::stream<ap_int<42> >& stream_entropy,
                     hls::stream<ap_int<11> >& stream_nzeros,
#else
                     hls::stream<float>& stream_loss_sum,
                     hls::stream<float>& stream_loss2_sum,
                     hls::stream<float>& stream_entropy_sum,
                     hls::stream<float>& stream_nzeros_sum,
#endif
                     hls::stream<float>& stream_mask,
                     hls::stream<float>& stream_entropy_final) {
LOOP_0:
    for (uint16_t tid = 0; tid < num_tile; tid++) {
#pragma HLS LOOP_TRIPCOUNT min = 64 max = 64
        uint8_t rect_ysize = stream_recty.read();
        uint8_t rect_xsize = stream_rectx.read();
    LOOP_1:
        for (uint8_t iy = 0; iy + N - 1 < rect_ysize; iy += N) {
#pragma HLS LOOP_TRIPCOUNT min = 8 max = 8
        LOOP_2:
            for (uint8_t ix = 0; ix + N - 1 < rect_xsize; ix += N) {
#pragma HLS LOOP_TRIPCOUNT min = 8 max = 8
#ifdef FIX
                float entropy = 0.0;
                float zeros_mul = 7.565053364251793f;
                float entropy_v[3];
                ap_int<11> nzeros_v[3];
                float entropy_bits[3] = {0.0, 0.0, 0.0};
                for (uint8_t c = 0; c < 3; c++) {
#pragma HLS LOOP_TRIPCOUNT min = 3 max = 3
#pragma HLS pipeline
                    ap_int<42> entropy_tmp = stream_entropy.read();
                    entropy_v[c] = entropy_tmp / 65536.0;
                    nzeros_v[c] = stream_nzeros.read();
                    entropy_v[c] += nzeros_v[c] * cost1;
                    uint8_t nbits = LUTCeilLog2Nonzero[(nzeros_v[c] + 1)] + 1;
                    entropy_bits[c] = zeros_mul * (LUTCeilLog2Nonzero[nbits + 17] + nbits);
                }
                entropy = entropy_v[0] + entropy_v[1] + entropy_v[2];
                entropy += entropy_bits[0] + entropy_bits[1] + entropy_bits[2];
                ap_int<28> tmp_loss = stream_loss.read();
                float loss_f = tmp_loss / 65536.0;
                ap_int<44> tmp_loss2 = stream_loss2.read();
                float loss2_f = tmp_loss2 / 65536.0 / 65536.0;
                float info_loss_multiplier = 138.0f;
                float info_loss_multiplier2 = 50.46839691767866;
                float loss = ((info_loss_multiplier * loss_f) + (info_loss_multiplier2 * N * sqrtf(loss2_f)));
                float loss_mask = stream_mask.read() * loss;
                float ret = entropy + loss_mask;
                if (N == 1) {
                    ret = 3.0f + 0.745f * ret;
                }
                ret = ret * mul;
                stream_entropy_final.write(ret);
#else
                float entropy = 0.0;
                float zeros_mul = 7.565053364251793f;
                float entropy_v[3] = {0.0, 0.0, 0.0};
                float nzeros_v[3] = {0.0, 0.0, 0.0};
                float entropy_bits[3] = {0.0, 0.0, 0.0};
                for (int c = 0; c < 3; c++) {
#pragma HLS LOOP_TRIPCOUNT min = 3 max = 3
#pragma HLS pipeline

                    entropy_v[c] = stream_entropy_sum.read();
                    nzeros_v[c] = stream_nzeros_sum.read();
                    entropy_v[c] += nzeros_v[c] * cost1;
                    // TODO: Integer to integer, can we use look up table to implement this?
                    // int nbits = CeilLog2NonzeroHLS(nzeros_v[c] + 1) + 1;
                    // entropy_bits[c] = zeros_mul * (CeilLog2NonzeroHLS(nbits + 17) + nbits);
                    int nbits = LUTCeilLog2Nonzero[(short)(nzeros_v[c] + 1)] + 1;
                    entropy_bits[c] = zeros_mul * (LUTCeilLog2Nonzero[nbits + 17] + nbits);
                }
                entropy = entropy_v[0] + entropy_v[1] + entropy_v[2];
                entropy += entropy_bits[0] + entropy_bits[1] + entropy_bits[2];
                float tmp_loss = stream_loss_sum.read();
                float tmp_loss2 = stream_loss2_sum.read();
                float info_loss_multiplier = 138.0f;
                float info_loss_multiplier2 = 50.46839691767866;
                float ret = entropy +
                            stream_mask.read() * ((info_loss_multiplier * tmp_loss) +
                                                  (info_loss_multiplier2 * sqrtf((float)(N * N * tmp_loss2))));
                if (N == 1) {
                    ret = 3.0f + 0.745f * ret;
                }
                stream_entropy_final.write(ret * mul);
#endif
            }
        }
    }
}

template <int N>
void BufferN(uint16_t num_tile,
             float* ping,
             float* pang,
             hls::stream<uint8_t>& stream_rectx,
             hls::stream<uint8_t>& stream_recty,
             hls::stream<float>& stream_dctin,
             hls::stream<bool>& stream_con,
             hls::stream<bool>& stream_ok) {
    uint8_t block = N;
    uint8_t block_n = N * N;
    bool flag = true;
    uint16_t size = 4096;
    uint8_t w = 64;
    uint16_t total_size = 4096 * 3;
LOOP_0:
    for (uint16_t tid = 0; tid < num_tile; tid++) {
#pragma HLS LOOP_TRIPCOUNT min = 64 max = 64
        uint8_t rect_ysize = stream_recty.read();
        uint8_t rect_xsize = stream_rectx.read();
        stream_con.write(1);
    LOOP_1:
        for (uint8_t jy = 0; jy < 8 / N; jy += 1) {
        LOOP_2:
            for (uint8_t jx = 0; jx < 8 / N; jx += 1) {
            LOOP_3:
                for (uint8_t c = 0; c < 3; c++) {
                LOOP_4:
                    for (uint8_t iy = 0; iy < 8 * N; iy += 1) {
                    LOOP_5:
                        for (uint8_t ix = 0; ix < 8 * N; ix += 1) {
                            uint8_t y = jy * 8 * N + iy;
                            uint8_t x = jx * 8 * N + ix;
                            bool read = false;
                            if (N == 1 && (jy < rect_ysize) && (jx < rect_xsize)) {
                                read = true;
                            }
                            if (N == 2 && (jy * 2 + 1) < rect_ysize && (jx * 2 + 1) < rect_xsize) {
                                read = true;
                            }
                            if (N == 4 && (jy * 4 + 3) < rect_ysize && (jx * 4 + 3) < rect_xsize) {
                                read = true;
                            }
                            if (read) {
                                float tmp = stream_dctin.read();
#ifdef __SYNTHESIS__
                                if (flag) {
                                    ping[c * size + y * w + x] = tmp;
                                } else {
                                    pang[c * size + y * w + x] = tmp;
                                }
#else
                                if (flag) {
                                    ping[total_size * tid + c * size + y * w + x] = tmp;
                                } else {
                                    pang[total_size * tid + c * size + y * w + x] = tmp;
                                }
#endif
                            }
                        }
                    }
                }
            }
        }
        flag = !flag;
        stream_ok.write(1);
    }
}

void EstimateEntropy8(uint16_t num_tile,
                      float cost1,
                      float mul8x8,
                      hls::stream<uint8_t>& stream_rectx,
                      hls::stream<uint8_t>& stream_recty,
                      hls::stream<float>& stream_q_org,
                      hls::stream<float>& stream_mask_org,
                      hls::stream<float>& stream_dctin,
                      hls::stream<float>& stream_entropy_8) {
#pragma HLS inline

    hls::stream<uint8_t> stream_rectx80("rectx80");
#pragma HLS stream variable = stream_rectx80 depth = 1024
#pragma HLS BIND_STORAGE variable = stream_rectx80 type = fifo
    hls::stream<uint8_t> stream_recty80("recty80");
#pragma HLS stream variable = stream_recty80 depth = 1024
#pragma HLS BIND_STORAGE variable = stream_recty80 type = fifo
    hls::stream<uint8_t> stream_rectx81("rectx81");
#pragma HLS stream variable = stream_rectx81 depth = 1024
#pragma HLS BIND_STORAGE variable = stream_rectx81 type = fifo
    hls::stream<uint8_t> stream_recty81("recty81");
#pragma HLS stream variable = stream_recty81 depth = 1024
#pragma HLS BIND_STORAGE variable = stream_recty81 type = fifo
    hls::stream<uint8_t> stream_rectx82("rectx82");
#pragma HLS stream variable = stream_rectx82 depth = 1024
#pragma HLS BIND_STORAGE variable = stream_rectx82 type = fifo
    hls::stream<uint8_t> stream_recty82("recty82");
#pragma HLS stream variable = stream_recty82 depth = 1024
#pragma HLS BIND_STORAGE variable = stream_recty82 type = fifo

#ifdef FIX
    hls::stream<ap_int<28> > stream_loss("loss_8");
#pragma HLS stream variable = stream_loss depth = 1024
#pragma HLS BIND_STORAGE variable = stream_loss type = fifo
    hls::stream<ap_int<44> > stream_loss2("loss2_8");
#pragma HLS stream variable = stream_loss2 depth = 1024
#pragma HLS BIND_STORAGE variable = stream_loss2 type = fifo
    hls::stream<ap_int<42> > stream_entropy("entropy_8");
#pragma HLS stream variable = stream_entropy depth = 1024
#pragma HLS BIND_STORAGE variable = stream_entropy type = fifo
    hls::stream<ap_int<11> > stream_nzeros("nzeros_8");
#pragma HLS stream variable = stream_nzeros depth = 1024
#pragma HLS BIND_STORAGE variable = stream_nzeros type = fifo
#else
    hls::stream<float> stream_loss("loss_8");
#pragma HLS stream variable = stream_loss depth = 1024
#pragma HLS BIND_STORAGE variable = stream_loss type = fifo
    hls::stream<float> stream_loss2("loss2_8");
#pragma HLS stream variable = stream_loss2 depth = 1024
#pragma HLS BIND_STORAGE variable = stream_loss2 type = fifo
    hls::stream<float> stream_entropy("entropy_8");
#pragma HLS stream variable = stream_entropy depth = 1024
#pragma HLS BIND_STORAGE variable = stream_entropy type = fifo
    hls::stream<float> stream_nzeros("nzeros_8");
#pragma HLS stream variable = stream_nzeros depth = 1024
#pragma HLS BIND_STORAGE variable = stream_nzeros type = fifo
#endif
    hls::stream<float> stream_loss_sum("loss_8_sum");
    ;
#pragma HLS stream variable = stream_loss_sum depth = 1024
#pragma HLS BIND_STORAGE variable = stream_loss_sum type = fifo
    hls::stream<float> stream_loss2_sum("loss2_8_sum");
#pragma HLS stream variable = stream_loss2_sum depth = 1024
#pragma HLS BIND_STORAGE variable = stream_loss2_sum type = fifo
    hls::stream<float> stream_entropy_sum("entropy_8_sum");
#pragma HLS stream variable = stream_entropy_sum depth = 1024
#pragma HLS BIND_STORAGE variable = stream_entropy_sum type = fifo
    hls::stream<float> stream_nzeros_sum("nzeros_8_sum");
#pragma HLS stream variable = stream_nzeros_sum depth = 1024
#pragma HLS BIND_STORAGE variable = stream_nzeros_sum type = fifo
    hls::stream<float> stream_q("q_8");
#pragma HLS stream variable = stream_q depth = 1024
#pragma HLS BIND_STORAGE variable = stream_q type = fifo
    hls::stream<float> stream_mask("mask_8");
#pragma HLS stream variable = stream_mask depth = 1024
#pragma HLS BIND_STORAGE variable = stream_mask type = fifo

    // #pragma HLS dataflow
    GetQAndMask_8(num_tile, stream_rectx, stream_recty, stream_rectx80, stream_recty80, stream_q_org, stream_mask_org,
                  stream_q, stream_mask);

#ifdef FIX
    ComputeEntropy1<1>(num_tile, stream_rectx80, stream_recty80, stream_rectx81, stream_recty81, stream_q, stream_dctin,
                       stream_loss, stream_loss2, stream_entropy, stream_nzeros);

    ComputeEntropy3<1>(num_tile, cost1, mul8x8, stream_rectx81, stream_recty81, stream_loss, stream_loss2,
                       stream_entropy, stream_nzeros, stream_mask, stream_entropy_8);

#else

    ComputeEntropy1<1>(num_tile, stream_rectx80, stream_recty80, stream_rectx81, stream_recty81, stream_q, stream_dctin,
                       stream_loss, stream_loss2, stream_entropy, stream_nzeros);

    ComputeEntropy2<1>(num_tile, stream_rectx81, stream_recty81, stream_rectx82, stream_recty82, stream_loss,
                       stream_loss2, stream_entropy, stream_nzeros, stream_loss_sum, stream_loss2_sum,
                       stream_entropy_sum, stream_nzeros_sum);

    ComputeEntropy3<1>(num_tile, cost1, mul8x8, stream_rectx82, stream_recty82, stream_loss_sum, stream_loss2_sum,
                       stream_entropy_sum, stream_nzeros_sum, stream_mask, stream_entropy_8);
#endif
}

void EstimateEntropy16(uint16_t num_tile,
                       float cost1,
                       float mul16x16,
                       hls::stream<uint8_t>& stream_rectx,
                       hls::stream<uint8_t>& stream_recty,
                       hls::stream<float>& stream_q_org,
                       hls::stream<float>& stream_mask_org,
                       hls::stream<float>& stream_dctin,
                       hls::stream<float>& stream_entropy_16) {
#pragma HLS inline

    hls::stream<uint8_t> stream_rectx160("rectx160");
#pragma HLS stream variable = stream_rectx160 depth = 1024
#pragma HLS BIND_STORAGE variable = stream_rectx160 type = fifo
    hls::stream<uint8_t> stream_recty160("recty160");
#pragma HLS stream variable = stream_recty160 depth = 1024
#pragma HLS BIND_STORAGE variable = stream_recty160 type = fifo
    hls::stream<uint8_t> stream_rectx161("rectx161");
#pragma HLS stream variable = stream_rectx161 depth = 1024
#pragma HLS BIND_STORAGE variable = stream_rectx161 type = fifo
    hls::stream<uint8_t> stream_recty161("recty161");
#pragma HLS stream variable = stream_recty161 depth = 1024
#pragma HLS BIND_STORAGE variable = stream_recty161 type = fifo
    hls::stream<uint8_t> stream_rectx162("rectx162");
#pragma HLS stream variable = stream_rectx162 depth = 1024
#pragma HLS BIND_STORAGE variable = stream_rectx162 type = fifo
    hls::stream<uint8_t> stream_recty162("recty162");
#pragma HLS stream variable = stream_recty162 depth = 1024
#pragma HLS BIND_STORAGE variable = stream_recty162 type = fifo

#ifdef FIX
    hls::stream<ap_int<28> > stream_loss("loss_16");
#pragma HLS stream variable = stream_loss depth = 1024
#pragma HLS BIND_STORAGE variable = stream_loss type = fifo
    hls::stream<ap_int<44> > stream_loss2("loss2_16");
#pragma HLS stream variable = stream_loss2 depth = 1024
#pragma HLS BIND_STORAGE variable = stream_loss2 type = fifo
    hls::stream<ap_int<42> > stream_entropy("entropy_16");
#pragma HLS stream variable = stream_entropy depth = 1024
#pragma HLS BIND_STORAGE variable = stream_entropy type = fifo
    hls::stream<ap_int<11> > stream_nzeros("nzeros_16");
#pragma HLS stream variable = stream_nzeros depth = 1024
#pragma HLS BIND_STORAGE variable = stream_nzeros type = fifo
#else
    hls::stream<float> stream_loss("loss_16");
#pragma HLS stream variable = stream_loss depth = 1024
#pragma HLS BIND_STORAGE variable = stream_loss type = fifo
    hls::stream<float> stream_loss2("loss2_16");
#pragma HLS stream variable = stream_loss2 depth = 1024
#pragma HLS BIND_STORAGE variable = stream_loss2 type = fifo
    hls::stream<float> stream_entropy("entropy_16");
#pragma HLS stream variable = stream_entropy depth = 1024
#pragma HLS BIND_STORAGE variable = stream_entropy type = fifo
    hls::stream<float> stream_nzeros("nzeros_16");
#pragma HLS stream variable = stream_nzeros depth = 1024
#pragma HLS BIND_STORAGE variable = stream_nzeros type = fifo
#endif
    hls::stream<float> stream_loss_sum("loss_16_sum");
    ;
#pragma HLS stream variable = stream_loss_sum depth = 1024
#pragma HLS BIND_STORAGE variable = stream_loss_sum type = fifo
    hls::stream<float> stream_loss2_sum("loss2_16_sum");
#pragma HLS stream variable = stream_loss2_sum depth = 1024
#pragma HLS BIND_STORAGE variable = stream_loss2_sum type = fifo
    hls::stream<float> stream_entropy_sum("entropy_16_sum");
#pragma HLS stream variable = stream_entropy_sum depth = 1024
#pragma HLS BIND_STORAGE variable = stream_entropy_sum type = fifo
    hls::stream<float> stream_nzeros_sum("nzeros_16_sum");
#pragma HLS stream variable = stream_nzeros_sum depth = 1024
#pragma HLS BIND_STORAGE variable = stream_nzeros_sum type = fifo
    hls::stream<float> stream_q("q_16");
#pragma HLS stream variable = stream_q depth = 1024
#pragma HLS BIND_STORAGE variable = stream_q type = fifo
    hls::stream<float> stream_mask("mask_16");
#pragma HLS stream variable = stream_mask depth = 1024
#pragma HLS BIND_STORAGE variable = stream_mask type = fifo

    // #pragma HLS dataflow
    GetQAndMask_16_32<2>(num_tile, stream_rectx, stream_recty, stream_rectx160, stream_recty160, stream_q_org,
                         stream_mask_org, stream_q, stream_mask);

#ifdef FIX

    ComputeEntropy1<2>(num_tile, stream_rectx160, stream_recty160, stream_rectx161, stream_recty161, stream_q,
                       stream_dctin, stream_loss, stream_loss2, stream_entropy, stream_nzeros);

    ComputeEntropy3<2>(num_tile, cost1, mul16x16, stream_rectx161, stream_recty161, stream_loss, stream_loss2,
                       stream_entropy, stream_nzeros, stream_mask, stream_entropy_16);

#else

    ComputeEntropy1<2>(num_tile, stream_rectx160, stream_recty160, stream_rectx161, stream_recty161, stream_q,
                       stream_dctin, stream_loss, stream_loss2, stream_entropy, stream_nzeros);

    ComputeEntropy2<2>(num_tile, stream_rectx161, stream_recty161, stream_rectx162, stream_recty162, stream_loss,
                       stream_loss2, stream_entropy, stream_nzeros, stream_loss_sum, stream_loss2_sum,
                       stream_entropy_sum, stream_nzeros_sum);

    ComputeEntropy3<2>(num_tile, cost1, mul16x16, stream_rectx162, stream_recty162, stream_loss_sum, stream_loss2_sum,
                       stream_entropy_sum, stream_nzeros_sum, stream_mask, stream_entropy_16);
#endif
}

void EstimateEntropy32(uint16_t num_tile,
                       float cost1,
                       float mul32x32,
                       hls::stream<uint8_t>& stream_rectx,
                       hls::stream<uint8_t>& stream_recty,
                       hls::stream<float>& stream_q_org,
                       hls::stream<float>& stream_mask_org,
                       hls::stream<float>& stream_dctin,
                       hls::stream<float>& stream_entropy_32) {
#pragma HLS inline

    hls::stream<uint8_t> stream_rectx320("rectx320");
#pragma HLS stream variable = stream_rectx320 depth = 1024
#pragma HLS BIND_STORAGE variable = stream_rectx320 type = fifo
    hls::stream<uint8_t> stream_recty320("recty320");
#pragma HLS stream variable = stream_recty320 depth = 1024
#pragma HLS BIND_STORAGE variable = stream_recty320 type = fifo
    hls::stream<uint8_t> stream_rectx321("rectx321");
#pragma HLS stream variable = stream_rectx321 depth = 1024
#pragma HLS BIND_STORAGE variable = stream_rectx321 type = fifo
    hls::stream<uint8_t> stream_recty321("recty321");
#pragma HLS stream variable = stream_recty321 depth = 1024
#pragma HLS BIND_STORAGE variable = stream_recty321 type = fifo
    hls::stream<uint8_t> stream_rectx322("rectx322");
#pragma HLS stream variable = stream_rectx322 depth = 1024
#pragma HLS BIND_STORAGE variable = stream_rectx322 type = fifo
    hls::stream<uint8_t> stream_recty322("recty322");
#pragma HLS stream variable = stream_recty322 depth = 1024
#pragma HLS BIND_STORAGE variable = stream_recty322 type = fifo

#ifdef FIX
    hls::stream<ap_int<28> > stream_loss("loss_32");
#pragma HLS stream variable = stream_loss depth = 1024
#pragma HLS BIND_STORAGE variable = stream_loss type = fifo
    hls::stream<ap_int<44> > stream_loss2("loss2_32");
#pragma HLS stream variable = stream_loss2 depth = 1024
#pragma HLS BIND_STORAGE variable = stream_loss2 type = fifo
    hls::stream<ap_int<42> > stream_entropy("entropy_32");
#pragma HLS stream variable = stream_entropy depth = 1024
#pragma HLS BIND_STORAGE variable = stream_entropy type = fifo
    hls::stream<ap_int<11> > stream_nzeros("nzeros_32");
#pragma HLS stream variable = stream_nzeros depth = 1024
#pragma HLS BIND_STORAGE variable = stream_nzeros type = fifo
#else
    hls::stream<float> stream_loss("loss_32");
#pragma HLS stream variable = stream_loss depth = 1024
#pragma HLS BIND_STORAGE variable = stream_loss type = fifo
    hls::stream<float> stream_loss2("loss2_32");
#pragma HLS stream variable = stream_loss2 depth = 1024
#pragma HLS BIND_STORAGE variable = stream_loss2 type = fifo
    hls::stream<float> stream_entropy("entropy_32");
#pragma HLS stream variable = stream_entropy depth = 1024
#pragma HLS BIND_STORAGE variable = stream_entropy type = fifo
    hls::stream<float> stream_nzeros("nzeros_32");
#pragma HLS stream variable = stream_nzeros depth = 1024
#pragma HLS BIND_STORAGE variable = stream_nzeros type = fifo
#endif
    hls::stream<float> stream_loss_sum("loss_32_sum");
    ;
#pragma HLS stream variable = stream_loss_sum depth = 1024
#pragma HLS BIND_STORAGE variable = stream_loss_sum type = fifo
    hls::stream<float> stream_loss2_sum("loss2_32_sum");
#pragma HLS stream variable = stream_loss2_sum depth = 1024
#pragma HLS BIND_STORAGE variable = stream_loss2_sum type = fifo
    hls::stream<float> stream_entropy_sum("entropy_32_sum");
#pragma HLS stream variable = stream_entropy_sum depth = 1024
#pragma HLS BIND_STORAGE variable = stream_entropy_sum type = fifo
    hls::stream<float> stream_nzeros_sum("nzeros_32_sum");
#pragma HLS stream variable = stream_nzeros_sum depth = 1024
#pragma HLS BIND_STORAGE variable = stream_nzeros_sum type = fifo
    hls::stream<float> stream_q("q_32");
#pragma HLS stream variable = stream_q depth = 1024
#pragma HLS BIND_STORAGE variable = stream_q type = fifo
    hls::stream<float> stream_mask("mask_32");
#pragma HLS stream variable = stream_mask depth = 1024
#pragma HLS BIND_STORAGE variable = stream_mask type = fifo

    // #pragma HLS dataflow
    GetQAndMask_16_32<4>(num_tile, stream_rectx, stream_recty, stream_rectx320, stream_recty320, stream_q_org,
                         stream_mask_org, stream_q, stream_mask);

#ifdef FIX
    ComputeEntropy1<4>(num_tile, stream_rectx320, stream_recty320, stream_rectx321, stream_recty321, stream_q,
                       stream_dctin, stream_loss, stream_loss2, stream_entropy, stream_nzeros);

    ComputeEntropy3<4>(num_tile, cost1, mul32x32, stream_rectx321, stream_recty321, stream_loss, stream_loss2,
                       stream_entropy, stream_nzeros, stream_mask, stream_entropy_32);

#else

    ComputeEntropy1<4>(num_tile, stream_rectx320, stream_recty320, stream_rectx321, stream_recty321, stream_q,
                       stream_dctin, stream_loss, stream_loss2, stream_entropy, stream_nzeros);

    ComputeEntropy2<4>(num_tile, stream_rectx321, stream_recty321, stream_rectx322, stream_recty322, stream_loss,
                       stream_loss2, stream_entropy, stream_nzeros, stream_loss_sum, stream_loss2_sum,
                       stream_entropy_sum, stream_nzeros_sum);

    ComputeEntropy3<4>(num_tile, cost1, mul32x32, stream_rectx322, stream_recty322, stream_loss_sum, stream_loss2_sum,
                       stream_entropy_sum, stream_nzeros_sum, stream_mask, stream_entropy_32);
#endif
}

void CompareEntropy(uint16_t num_tile,
                    hls::stream<uint8_t>& stream_rectx,
                    hls::stream<uint8_t>& stream_recty,
                    hls::stream<uint8_t>& stream_rectx_out,
                    hls::stream<uint8_t>& stream_recty_out,
                    hls::stream<float>& stream_entropy_8,
                    hls::stream<float>& stream_entropy_16,
                    hls::stream<float>& stream_entropy_32,
                    uint8_t* strategy_ping,
                    uint8_t* strategy_pang,
                    hls::stream<bool>& stream_con,
                    hls::stream<bool>& stream_ok) {
    bool flag = true;
LOOP_0:
    for (uint16_t tid = 0; tid < num_tile; tid++) {
#pragma HLS LOOP_TRIPCOUNT min = 64 max = 64
        uint8_t rect_ysize = stream_recty.read();
        uint8_t rect_xsize = stream_rectx.read();
        stream_recty_out.write(rect_ysize);
        stream_rectx_out.write(rect_xsize);
        float entropy_32;
        float entropy_16;
        float entropy_8;
        float entropy_sum[16] = {0};
        stream_con.write(1);
    LOOP_1:
        for (uint8_t iy = 0; iy < rect_ysize; iy++) {
#pragma HLS LOOP_TRIPCOUNT min = 8 max = 8
        LOOP_2:
            for (uint8_t ix = 0; ix < rect_xsize; ix++) {
#pragma HLS LOOP_TRIPCOUNT min = 8 max = 8
#pragma HLS pipeline
                uint8_t idx = iy * 8 + ix;
                uint8_t idx_8_sum = (iy / 2) * 4 + ix / 2;
                entropy_sum[idx_8_sum] += stream_entropy_8.read();
#ifdef __SYNTHESIS__
                if (flag) {
                    strategy_ping[idx] = 0;
                } else {
                    strategy_pang[idx] = 0;
                }
#else
                int idx1 = 64 * tid + idx;
                if (flag) {
                    strategy_ping[idx1] = 0;
                } else {
                    strategy_pang[idx1] = 0;
                }
#endif
                if (iy % 2 == 1 && ix % 2 == 1) {
                    entropy_16 = stream_entropy_16.read();
                    entropy_8 = entropy_sum[(iy / 2) * 4 + ix / 2];
                    if (entropy_16 < entropy_8) {
                    LOOP_3:
                        for (uint8_t y = iy - 1; y < iy + 1; y++) {
#pragma HLS LOOP_TRIPCOUNT min = 2 max = 2
#pragma HLS unroll
                        LOOP_4:
                            for (uint8_t x = ix - 1; x < ix + 1; x++) {
#pragma HLS LOOP_TRIPCOUNT min = 2 max = 2
#pragma HLS unroll
                                uint8_t idx = y * 8 + x;
#ifdef __SYNTHESIS__
                                if (flag) {
                                    strategy_ping[idx] = 4;
                                } else {
                                    strategy_pang[idx] = 4;
                                }
#else
                                int idx1 = 64 * tid + idx;
                                if (flag) {
                                    strategy_ping[idx1] = 4;
                                } else {
                                    strategy_pang[idx1] = 4;
                                }
#endif
                                entropy_sum[(y / 2) * 4 + x / 2] = entropy_16;
                            }
                        }
                    }
                    if (iy % 4 == 3 && ix % 4 == 3) {
                        entropy_32 = stream_entropy_32.read();
                        entropy_16 = 0;
                    LOOP_5:
                        for (uint8_t y = iy - 3; y < iy + 1; y += 2) {
#pragma HLS LOOP_TRIPCOUNT min = 2 max = 2
#pragma HLS unroll
                        LOOP_6:
                            for (uint8_t x = ix - 3; x < ix + 1; x += 2) {
#pragma HLS LOOP_TRIPCOUNT min = 2 max = 2
#pragma HLS unroll
                                uint8_t idx_16 = y * 8 + x;
                                entropy_16 += entropy_sum[(y / 2) * 4 + x / 2];
                            }
                        }
                        if (entropy_32 < entropy_16) {
                        LOOP_7:
                            for (uint8_t y = iy - 3; y < iy + 1; y++) {
#pragma HLS LOOP_TRIPCOUNT min = 4 max = 4
#pragma HLS unroll
                            LOOP_8:
                                for (uint8_t x = ix - 3; x < ix + 1; x++) {
#pragma HLS LOOP_TRIPCOUNT min = 4 max = 4
#pragma HLS unroll
                                    uint8_t idx = y * 8 + x;
#ifdef __SYNTHESIS__
                                    if (flag) {
                                        strategy_ping[idx] = 5;
                                    } else {
                                        strategy_pang[idx] = 5;
                                    }
#else
                                    int idx1 = 64 * tid + idx;
                                    if (flag) {
                                        strategy_ping[idx1] = 5;
                                    } else {
                                        strategy_pang[idx1] = 5;
                                    }
#endif
                                }
                            }
                        }
                    }
                }
            }
        }
        flag = !flag;
        stream_ok.write(1);
    }
}

void Reorder(uint16_t num_tile,
             float* ping8,
             float* pang8,
             float* ping16,
             float* pang16,
             float* ping32,
             float* pang32,
             uint8_t* strategy_ping,
             uint8_t* strategy_pang,
             hls::stream<uint8_t>& stream_rectx,
             hls::stream<uint8_t>& stream_recty,
             hls::stream<uint8_t>& stream_rectx_out,
             hls::stream<uint8_t>& stream_recty_out,
             hls::stream<bool>& stream_con,
             hls::stream<bool>& stream_ok,
             hls::stream<bool>& stream_con8,
             hls::stream<bool>& stream_ok8,
             hls::stream<bool>& stream_con16,
             hls::stream<bool>& stream_ok16,
             hls::stream<bool>& stream_con32,
             hls::stream<bool>& stream_ok32,
             hls::stream<uint8_t>& stream_strategy,
             hls::stream<uint8_t>& stream_strategy1,
             hls::stream<float>& stream_select) {
    bool flag = true;
    uint16_t size = 4096;
    uint8_t w = 64;
    uint16_t total_size = 4096 * 3;
    ap_uint<64> visited;
LOOP_0:
    for (uint16_t tid = 0; tid < num_tile; tid++) {
#pragma HLS LOOP_TRIPCOUNT min = 64 max = 64
        float entropy_32;
        float entropy_16;
        float entropy_8;
        float entropy_sum[16] = {0};
        uint8_t rect_ysize = stream_recty.read();
        uint8_t rect_xsize = stream_rectx.read();
        stream_recty_out.write(rect_ysize);
        stream_rectx_out.write(rect_xsize);
        stream_ok.read();
        stream_ok8.read();
        stream_ok16.read();
        stream_ok32.read();
        visited = 0;
    LOOP_1:
        for (uint8_t iy = 0; iy < rect_ysize; iy++) {
#pragma HLS LOOP_TRIPCOUNT min = 8 max = 8
        LOOP_2:
            for (uint8_t ix = 0; ix < rect_xsize; ix++) {
#pragma HLS LOOP_TRIPCOUNT min = 8 max = 8
                uint8_t strategy;
                uint8_t idx = iy * 8 + ix;
                if (visited.range(idx, idx) == 0) {
#ifdef __SYNTHESIS__
                    if (flag) {
                        strategy = strategy_ping[idx];
                    } else {
                        strategy = strategy_pang[idx];
                    }
#else
                    if (flag) {
                        strategy = strategy_ping[tid * 64 + idx];
                    } else {
                        strategy = strategy_pang[tid * 64 + idx];
                    }
#endif
                    stream_strategy.write(strategy);
                    stream_strategy1.write(strategy);
                    if (strategy == 4) {
                    LOOP_3:
                        for (uint8_t y = 0; y < 2; y++) {
#pragma HLS LOOP_TRIPCOUNT min = 2 max = 2
#pragma HLS unroll
                        LOOP_4:
                            for (uint8_t x = 0; x < 2; x++) {
#pragma HLS LOOP_TRIPCOUNT min = 2 max = 2
#pragma HLS unroll
                                uint8_t idx = (iy + y) * 8 + (ix + x);
                                visited.range(idx, idx) = 1;
                            }
                        }
                    LOOP_5:
                        for (uint8_t y = 0; y < 16; y++) {
                        LOOP_6:
                            for (uint8_t x = 0; x < 16; x++) {
                            LOOP_7:
                                for (uint8_t c = 0; c < 3; c++) {
#pragma HLS pipeline
                                    uint16_t sy = iy * 8 + y;
                                    uint16_t sx = ix * 8 + x;
#ifdef __SYNTHESIS__
                                    uint16_t idx = c * size + sy * w + sx;
                                    if (flag) {
                                        float tmp = ping16[idx];
                                        stream_select.write(tmp);
                                    } else {
                                        float tmp = pang16[idx];
                                        stream_select.write(tmp);
                                    }
#else
                                    int idx = total_size * tid + c * size + sy * w + sx;
                                    if (flag) {
                                        float tmp = ping16[idx];
                                        stream_select.write(tmp);
                                    } else {
                                        float tmp = pang16[idx];
                                        stream_select.write(tmp);
                                    }
#endif
                                }
                            }
                        }
                    } else if (strategy == 5) {
                    LOOP_8:
                        for (uint8_t y = 0; y < 4; y++) {
#pragma HLS LOOP_TRIPCOUNT min = 4 max = 4
#pragma HLS unroll
                        LOOP_9:
                            for (uint8_t x = 0; x < 4; x++) {
#pragma HLS LOOP_TRIPCOUNT min = 4 max = 4
#pragma HLS unroll
                                uint8_t idx = (iy + y) * 8 + (ix + x);
                                visited.range(idx, idx) = 1;
                            }
                        }
                    LOOP_10:
                        for (uint8_t y = 0; y < 32; y++) {
                        LOOP_11:
                            for (uint8_t x = 0; x < 32; x++) {
                            LOOP_12:
                                for (uint8_t c = 0; c < 3; c++) {
#pragma HLS pipeline
                                    uint16_t sy = iy * 8 + y;
                                    uint16_t sx = ix * 8 + x;
#ifdef __SYNTHESIS__
                                    uint16_t idx = c * size + sy * w + sx;
                                    if (flag) {
                                        float tmp = ping32[idx];
                                        stream_select.write(tmp);
                                    } else {
                                        float tmp = pang32[idx];
                                        stream_select.write(tmp);
                                    }
#else
                                    int idx = total_size * tid + c * size + sy * w + sx;
                                    if (flag) {
                                        float tmp = ping32[idx];
                                        stream_select.write(tmp);
                                    } else {
                                        float tmp = pang32[idx];
                                        stream_select.write(tmp);
                                    }
#endif
                                }
                            }
                        }
                    } else {
                        visited.range(idx, idx) = 1;
                    LOOP_13:
                        for (uint8_t y = 0; y < 8; y++) {
                        LOOP_14:
                            for (uint8_t x = 0; x < 8; x++) {
                            LOOP_15:
                                for (uint8_t c = 0; c < 3; c++) {
#pragma HLS pipeline
                                    uint16_t sy = iy * 8 + y;
                                    uint16_t sx = ix * 8 + x;
#ifdef __SYNTHESIS__
                                    uint16_t idx = c * size + sy * w + sx;
                                    if (flag) {
                                        float tmp = ping8[idx];
                                        stream_select.write(tmp);
                                    } else {
                                        float tmp = pang8[idx];
                                        stream_select.write(tmp);
                                    }
#else
                                    int idx = total_size * tid + c * size + sy * w + sx;
                                    float tmp;
                                    if (flag) {
                                        tmp = ping8[idx];
                                        stream_select.write(tmp);
                                    } else {
                                        tmp = pang8[idx];
                                        stream_select.write(tmp);
                                    }
#endif
                                }
                            }
                        }
                    }
                }
            }
        }
        flag = !flag;
        stream_con.read();
        stream_con8.read();
        stream_con16.read();
        stream_con32.read();
    }
}

void ConsumeStrategyDCT(int xsize,
                        int ysize,
                        hls::stream<char>& stream_strategy,
                        hls::stream<float>& stream_select,
                        float* dctx_8x8,
                        float* dcty_8x8,
                        float* dctb_8x8,
                        float* dctx_16x16,
                        float* dcty_16x16,
                        float* dctb_16x16,
                        float* dctx_32x32,
                        float* dcty_32x32,
                        float* dctb_32x32) {
    int xsize_blocks = xsize / 8;
    int ysize_blocks = ysize / 8;
    int n_enc_tiles = Div_Ceil(xsize_blocks, 8);
    int count = 0;
    int count_s = 0;
    ap_uint<64> visited;
LOOP_0:
    for (int tid = 0; tid < Div_Ceil(xsize_blocks, 8) * Div_Ceil(ysize_blocks, 8); tid++) {
#pragma HLS LOOP_TRIPCOUNT min = 64 max = 64
        int tx1 = tid % n_enc_tiles;
        int ty1 = tid / n_enc_tiles;
        int by = ty1 * 8;
        int by1 = fmin((int)((ty1 + 1) * 8), ysize_blocks);
        int bx = tx1 * 8;
        int bx1 = fmin((int)((tx1 + 1) * 8), xsize_blocks);
        int rect_ysize = by1 - by;
        int rect_xsize = bx1 - bx;
        int tile_xsize = (xsize + 63) / 64 * 64;
        int tile_ysize = (ysize + 63) / 64 * 64;
        visited = 0;
        for (int iy = 0; iy < rect_ysize; iy++) {
            for (int ix = 0; ix < rect_xsize; ix++) {
                char strategy;
                int idx = iy * 8 + ix;
                if (visited.range(idx, idx) == 0) {
                    strategy = stream_strategy.read();
                    if (strategy == 0) {
                        visited.range(idx, idx) = 1;
                        for (int y = 0; y < 8; y++) {
                            for (int x = 0; x < 8; x++) {
                                for (int c = 0; c < 3; c++) {
                                    float tmp = stream_select.read();
                                    int idx = ((ty1 * 64 + iy * 8 + y) * xsize) + (tx1 * 64 + ix * 8 + x);
                                    if (c == 0) {
                                        dcty_8x8[idx] = tmp;
                                    } else if (c == 1) {
                                        dctx_8x8[idx] = tmp;
                                    } else if (c == 2) {
                                        dctb_8x8[idx] = tmp;
                                    }
                                }
                            }
                        }
                    } else if (strategy == 4) {
                        for (int y = 0; y < 2; y++) {
                            for (int x = 0; x < 2; x++) {
                                int idx = (iy + y) * 8 + (ix + x);
                                visited.range(idx, idx) = 1;
                            }
                        }
                        for (int y = 0; y < 16; y++) {
                            for (int x = 0; x < 16; x++) {
                                for (int c = 0; c < 3; c++) {
                                    float tmp = stream_select.read();
                                    int idx = ((ty1 * 64 + iy * 8 + y) * xsize) + (tx1 * 64 + ix * 8 + x);
                                    if (c == 0) {
                                        dcty_16x16[idx] = tmp;
                                    } else if (c == 1) {
                                        dctx_16x16[idx] = tmp;
                                    } else if (c == 2) {
                                        dctb_16x16[idx] = tmp;
                                    }
                                }
                            }
                        }
                    } else if (strategy == 5) {
                        for (int y = 0; y < 4; y++) {
                            for (int x = 0; x < 4; x++) {
                                int idx = (iy + y) * 8 + (ix + x);
                                visited.range(idx, idx) = 1;
                            }
                        }
                        for (int y = 0; y < 32; y++) {
                            for (int x = 0; x < 32; x++) {
                                for (int c = 0; c < 3; c++) {
                                    float tmp = stream_select.read();
                                    int idx = ((ty1 * 64 + iy * 8 + y) * xsize) + (tx1 * 64 + ix * 8 + x);
                                    if (c == 0) {
                                        dcty_32x32[idx] = tmp;
                                    } else if (c == 1) {
                                        dctx_32x32[idx] = tmp;
                                    } else if (c == 2) {
                                        dctb_32x32[idx] = tmp;
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    // std::cout << "use count_s=" << count_s << ", count=" << count << std::endl;
}

void SetQuantField(uint16_t num_tile,
                   float inv_global_scale,
                   hls::stream<uint8_t>& stream_rectx,
                   hls::stream<uint8_t>& stream_recty,
                   hls::stream<float>& stream_rqf_org,
                   hls::stream<uint8_t>& stream_strategy1,
                   hls::stream<int>& stream_rqf) {
    ap_uint<64> visited;
LOOP_0:
    for (uint16_t tid = 0; tid < num_tile; tid++) {
#pragma HLS LOOP_TRIPCOUNT min = 64 max = 64
        uint8_t rect_ysize = stream_recty.read();
        uint8_t rect_xsize = stream_rectx.read();
        visited = 0;
        float rqf_array[64];
    LOOP_1:
        for (uint8_t iy = 0; iy < rect_ysize; iy++) {
#pragma HLS LOOP_TRIPCOUNT min = 8 max = 8
        LOOP_2:
            for (uint8_t ix = 0; ix < rect_xsize; ix++) {
#pragma HLS LOOP_TRIPCOUNT min = 8 max = 8
#pragma HLS pipeline
                uint16_t index = iy * 8 + ix;
                rqf_array[index] = stream_rqf_org.read();
            }
        }
    LOOP_3:
        for (uint8_t y = 0; y < rect_ysize; ++y) {
#pragma HLS LOOP_TRIPCOUNT min = 8 max = 8
        LOOP_4:
            for (uint8_t x = 0; x < rect_xsize; ++x) {
#pragma HLS LOOP_TRIPCOUNT min = 8 max = 8
#pragma HLS pipeline
                float max = -3.40282e+038;
                uint8_t idx = y * 8 + x;
                if (visited.range(idx, idx) == 0) {
                    uint8_t strategy = stream_strategy1.read();
                    uint8_t b = strategy_block[strategy];
                LOOP_5:
                    for (uint8_t iy = 0; iy < b; iy++) {
                    LOOP_6:
                        for (uint8_t ix = 0; ix < b; ix++) {
#pragma HLS pipeline
                            uint16_t idx = (iy + y) * 8 + (ix + x);
                            visited.range(idx, idx) = 1;
                            float tmp = rqf_array[idx];
                            max = fmax(tmp, max);
                        }
                    }
                    float tmp = max;
                    tmp = tmp * inv_global_scale + 0.5f;
                    int16_t tmp_i = (int16_t)tmp;
                    tmp_i = tmp_i > 256 ? 256 : tmp_i;
                    int16_t val = tmp_i > 1 ? tmp_i : 1;
                    stream_rqf.write(val);
                }
            }
        }
    }
}

template <int N>
void DupDCT(uint16_t num_tile,
            hls::stream<uint8_t>& stream_rectx,
            hls::stream<uint8_t>& stream_recty,
            hls::stream<uint8_t>& stream_rectx_out0,
            hls::stream<uint8_t>& stream_recty_out0,
            hls::stream<uint8_t>& stream_rectx_out1,
            hls::stream<uint8_t>& stream_recty_out1,
            hls::stream<float>& stream_dctin,
            hls::stream<float>& stream_dctout0,
            hls::stream<float>& stream_dctout1) {
    uint8_t block_n = N * N;
    const uint16_t size = 64 * block_n;
LOOP_0:
    for (uint16_t tid = 0; tid < num_tile; tid++) {
#pragma HLS LOOP_TRIPCOUNT min = 64 max = 64
        uint8_t rect_ysize = stream_recty.read();
        uint8_t rect_xsize = stream_rectx.read();
        stream_recty_out0.write(rect_ysize);
        stream_rectx_out0.write(rect_xsize);
        stream_recty_out1.write(rect_ysize);
        stream_rectx_out1.write(rect_xsize);
    LOOP_1:
        for (uint8_t iy = 0; iy + N - 1 < rect_ysize; iy += N) {
#pragma HLS LOOP_TRIPCOUNT min = 2 max = 2
        LOOP_2:
            for (uint8_t ix = 0; ix + N - 1 < rect_xsize; ix += N) {
#pragma HLS LOOP_TRIPCOUNT min = 2 max = 2
            LOOP_3:
                for (uint8_t c = 0; c < 3; c++) {
#pragma HLS LOOP_TRIPCOUNT min = 3 max = 3
                LOOP_4:
                    for (uint16_t i = 0; i < size; i += 1) {
#pragma HLS LOOP_TRIPCOUNT min = 1024 max = 1024
#pragma HLS pipeline II = 1
                        float tmp = stream_dctin.read();
                        stream_dctout0.write(tmp);
                        stream_dctout1.write(tmp);
                    }
                }
            }
        }
    }
}

void ComputeTileACSHLS(uint16_t num_tile,
                       short ysize,
                       short xsize,
                       float cost1,
                       float butteraugli_target,
                       float inv_global_scale,
                       float mul8x8,
                       float mul16x16,
                       float mul32x32,
                       hls::stream<uint8_t>& stream_rectx_acs,
                       hls::stream<uint8_t>& stream_recty_acs,
                       hls::stream<float>& stream_rqf_org,
                       hls::stream<float>& stream_q_org,
                       hls::stream<float>& stream_mask_org,
                       hls::stream<float>& stream_dctin8,
                       hls::stream<float>& stream_dctin16,
                       hls::stream<float>& stream_dctin32,
                       hls::stream<uint8_t>& stream_strategy,
                       hls::stream<float>& stream_select,
                       hls::stream<int>& stream_rqf) {
#pragma HLS INLINE
    hls::stream<uint8_t> stream_rectx0("rectx0");
#pragma HLS stream variable = stream_rectx0 depth = 1024
#pragma HLS BIND_STORAGE variable = stream_rectx0 type = fifo
    hls::stream<uint8_t> stream_recty0("recty0");
#pragma HLS stream variable = stream_recty0 depth = 1024
#pragma HLS BIND_STORAGE variable = stream_recty0 type = fifo

    hls::stream<uint8_t> stream_rectx1("rectx1");
#pragma HLS stream variable = stream_rectx1 depth = 1024
#pragma HLS BIND_STORAGE variable = stream_rectx1 type = fifo
    hls::stream<uint8_t> stream_recty1("recty1");
#pragma HLS stream variable = stream_recty1 depth = 1024
#pragma HLS BIND_STORAGE variable = stream_recty1 type = fifo

    hls::stream<uint8_t> stream_rectx2("rectx2");
#pragma HLS stream variable = stream_rectx2 depth = 1024
#pragma HLS BIND_STORAGE variable = stream_rectx2 type = fifo
    hls::stream<uint8_t> stream_recty2("recty2");
#pragma HLS stream variable = stream_recty2 depth = 1024
#pragma HLS BIND_STORAGE variable = stream_recty2 type = fifo

    hls::stream<uint8_t> stream_rectx3("rectx3");
#pragma HLS stream variable = stream_rectx3 depth = 1024
#pragma HLS BIND_STORAGE variable = stream_rectx3 type = fifo
    hls::stream<uint8_t> stream_recty3("recty3");
#pragma HLS stream variable = stream_recty3 depth = 1024
#pragma HLS BIND_STORAGE variable = stream_recty3 type = fifo

    hls::stream<uint8_t> stream_rectx4("rectx4");
#pragma HLS stream variable = stream_rectx4 depth = 1024
#pragma HLS BIND_STORAGE variable = stream_rectx4 type = fifo
    hls::stream<uint8_t> stream_recty4("recty4");
#pragma HLS stream variable = stream_recty4 depth = 1024
#pragma HLS BIND_STORAGE variable = stream_recty4 type = fifo

    hls::stream<uint8_t> stream_rectx5("rectx5");
#pragma HLS stream variable = stream_rectx5 depth = 1024
#pragma HLS BIND_STORAGE variable = stream_rectx5 type = fifo
    hls::stream<uint8_t> stream_recty5("recty5");
#pragma HLS stream variable = stream_recty5 depth = 1024
#pragma HLS BIND_STORAGE variable = stream_recty5 type = fifo

    hls::stream<uint8_t> stream_rectx6("rectx6");
#pragma HLS stream variable = stream_rectx6 depth = 1024
#pragma HLS BIND_STORAGE variable = stream_rectx6 type = fifo
    hls::stream<uint8_t> stream_recty6("recty6");
#pragma HLS stream variable = stream_recty6 depth = 1024
#pragma HLS BIND_STORAGE variable = stream_recty6 type = fifo

    hls::stream<uint8_t> stream_rectx7("rectx7");
#pragma HLS stream variable = stream_rectx7 depth = 1024
#pragma HLS BIND_STORAGE variable = stream_rectx7 type = fifo
    hls::stream<uint8_t> stream_recty7("recty7");
#pragma HLS stream variable = stream_recty7 depth = 1024
#pragma HLS BIND_STORAGE variable = stream_recty7 type = fifo

    hls::stream<uint8_t> stream_rectx8("rectx8");
#pragma HLS stream variable = stream_rectx8 depth = 1024
#pragma HLS BIND_STORAGE variable = stream_rectx8 type = fifo
    hls::stream<uint8_t> stream_recty8("recty8");
#pragma HLS stream variable = stream_recty8 depth = 1024
#pragma HLS BIND_STORAGE variable = stream_recty8 type = fifo

    hls::stream<uint8_t> stream_rectx9("rectx9");
#pragma HLS stream variable = stream_rectx9 depth = 1024
#pragma HLS BIND_STORAGE variable = stream_rectx9 type = fifo
    hls::stream<uint8_t> stream_recty9("recty9");
#pragma HLS stream variable = stream_recty9 depth = 1024
#pragma HLS BIND_STORAGE variable = stream_recty9 type = fifo

    hls::stream<uint8_t> stream_rectx10("rectx10");
#pragma HLS stream variable = stream_rectx10 depth = 1024
#pragma HLS BIND_STORAGE variable = stream_rectx10 type = fifo
    hls::stream<uint8_t> stream_recty10("recty10");
#pragma HLS stream variable = stream_recty10 depth = 1024
#pragma HLS BIND_STORAGE variable = stream_recty10 type = fifo

    hls::stream<uint8_t> stream_rectx11("rectx11");
#pragma HLS stream variable = stream_rectx11 depth = 1024
#pragma HLS BIND_STORAGE variable = stream_rectx11 type = fifo
    hls::stream<uint8_t> stream_recty11("recty11");
#pragma HLS stream variable = stream_recty11 depth = 1024
#pragma HLS BIND_STORAGE variable = stream_recty11 type = fifo

    hls::stream<uint8_t> stream_rectx12("rectx12");
#pragma HLS stream variable = stream_rectx12 depth = 1024
#pragma HLS BIND_STORAGE variable = stream_rectx12 type = fifo
    hls::stream<uint8_t> stream_recty12("recty12");
#pragma HLS stream variable = stream_recty12 depth = 1024
#pragma HLS BIND_STORAGE variable = stream_recty12 type = fifo

    hls::stream<float> stream_dctin8_0("dctin8_0");
#pragma HLS stream variable = stream_dctin8_0 depth = 1024
#pragma HLS BIND_STORAGE variable = stream_dctin8_0 type = fifo
    hls::stream<float> stream_dctin16_0("dctin16_0");
#pragma HLS stream variable = stream_dctin16_0 depth = 1024
#pragma HLS BIND_STORAGE variable = stream_dctin16_0 type = fifo
    hls::stream<float> stream_dctin32_0("dctin32_0");
#pragma HLS stream variable = stream_dctin32_0 depth = 1024
#pragma HLS BIND_STORAGE variable = stream_dctin32_0 type = fifo
    hls::stream<float> stream_dctin8_1("dctin8_1");
#pragma HLS stream variable = stream_dctin8_1 depth = 1024
#pragma HLS BIND_STORAGE variable = stream_dctin8_1 type = fifo
    hls::stream<float> stream_dctin16_1("dctin16_1");
#pragma HLS stream variable = stream_dctin16_1 depth = 1024
#pragma HLS BIND_STORAGE variable = stream_dctin16_1 type = fifo
    hls::stream<float> stream_dctin32_1("dctin32_1");
#pragma HLS stream variable = stream_dctin32_1 depth = 1024
#pragma HLS BIND_STORAGE variable = stream_dctin32_1 type = fifo

    hls::stream<float> stream_entropy_8("entropy_8");
#pragma HLS stream variable = stream_entropy_8 depth = 1024
#pragma HLS BIND_STORAGE variable = stream_entropy_8 type = fifo
    hls::stream<float> stream_entropy_16("entropy_16");
#pragma HLS stream variable = stream_entropy_16 depth = 1024
#pragma HLS BIND_STORAGE variable = stream_entropy_16 type = fifo
    hls::stream<float> stream_entropy_32("entropy_32");
#pragma HLS stream variable = stream_entropy_32 depth = 1024
#pragma HLS BIND_STORAGE variable = stream_entropy_32 type = fifo

    hls::stream<bool> stream_con("con");
#pragma HLS stream variable = stream_con depth = 2
#pragma HLS BIND_STORAGE variable = stream_con type = fifo
    hls::stream<bool> stream_ok("ok");
#pragma HLS stream variable = stream_ok depth = 2
#pragma HLS BIND_STORAGE variable = stream_ok type = fifo
    hls::stream<bool> stream_con8("con8");
#pragma HLS stream variable = stream_con8 depth = 2
#pragma HLS BIND_STORAGE variable = stream_con8 type = fifo
    hls::stream<bool> stream_ok8("ok");
#pragma HLS stream variable = stream_ok8 depth = 2
#pragma HLS BIND_STORAGE variable = stream_ok8 type = fifo
    hls::stream<bool> stream_con16("con16");
#pragma HLS stream variable = stream_con16 depth = 2
#pragma HLS BIND_STORAGE variable = stream_con16 type = fifo
    hls::stream<bool> stream_ok16("ok16");
#pragma HLS stream variable = stream_ok16 depth = 2
#pragma HLS BIND_STORAGE variable = stream_ok16 type = fifo
    hls::stream<bool> stream_con32("con32");
#pragma HLS stream variable = stream_con32 depth = 2
#pragma HLS BIND_STORAGE variable = stream_con32 type = fifo
    hls::stream<bool> stream_ok32("ok32");
#pragma HLS stream variable = stream_ok32 depth = 2
#pragma HLS BIND_STORAGE variable = stream_ok32 type = fifo

    hls::stream<uint8_t> stream_strategy1("strategy1");
#pragma HLS stream variable = stream_strategy1 depth = 1024
#pragma HLS BIND_STORAGE variable = stream_strategy1 type = fifo

    hls::stream<float> stream_q_org_8("q_org_8");
#pragma HLS stream variable = stream_q_org_8 depth = 1024
#pragma HLS BIND_STORAGE variable = stream_q_org_8 type = fifo
    hls::stream<float> stream_mask_org_8("mask_org_8");
#pragma HLS stream variable = stream_mask_org_8 depth = 1024
#pragma HLS BIND_STORAGE variable = stream_mask_org_8 type = fifo
    hls::stream<float> stream_q_org_16("q_org_8");
#pragma HLS stream variable = stream_q_org_16 depth = 1024
#pragma HLS BIND_STORAGE variable = stream_q_org_16 type = fifo
    hls::stream<float> stream_mask_org_16("mask_org_8");
#pragma HLS stream variable = stream_mask_org_16 depth = 1024
#pragma HLS BIND_STORAGE variable = stream_mask_org_16 type = fifo
    hls::stream<float> stream_q_org_32("q_org_8");
#pragma HLS stream variable = stream_q_org_32 depth = 1024
#pragma HLS BIND_STORAGE variable = stream_q_org_32 type = fifo
    hls::stream<float> stream_mask_org_32("mask_org_8");
#pragma HLS stream variable = stream_mask_org_32 depth = 1024
#pragma HLS BIND_STORAGE variable = stream_mask_org_32 type = fifo

// #pragma HLS dataflow

#ifdef __SYNTHESIS__
    uint8_t strategy_ping[64];
    uint8_t strategy_pang[64];
#pragma HLS bind_storage variable = strategy_ping type = RAM_T2P impl = bram
#pragma HLS shared variable = strategy_ping
#pragma HLS stable variable = strategy_ping
#pragma HLS bind_storage variable = strategy_pang type = RAM_T2P impl = bram
#pragma HLS shared variable = strategy_pang
#pragma HLS stable variable = strategy_pang
#else
    uint8_t* strategy_ping = (uint8_t*)malloc(sizeof(uint8_t) * 64 * 32 * 32);
    uint8_t* strategy_pang = (uint8_t*)malloc(sizeof(uint8_t) * 64 * 32 * 32);
#endif

#ifdef __SYNTHESIS__
    float ping8[3 * 64 * 64];
    float pang8[3 * 64 * 64];
    float ping16[3 * 64 * 64];
    float pang16[3 * 64 * 64];
    float ping32[3 * 64 * 64];
    float pang32[3 * 64 * 64];
#pragma HLS bind_storage variable = ping8 type = RAM_T2P impl = uram
#pragma HLS shared variable = ping8
#pragma HLS stable variable = ping8
#pragma HLS bind_storage variable = pang8 type = RAM_T2P impl = uram
#pragma HLS shared variable = pang8
#pragma HLS stable variable = pang8
#pragma HLS bind_storage variable = ping16 type = RAM_T2P impl = uram
#pragma HLS shared variable = ping16
#pragma HLS stable variable = ping16
#pragma HLS bind_storage variable = pang16 type = RAM_T2P impl = uram
#pragma HLS shared variable = pang16
#pragma HLS stable variable = pang16
#pragma HLS bind_storage variable = ping32 type = RAM_T2P impl = uram
#pragma HLS shared variable = ping32
#pragma HLS stable variable = ping32
#pragma HLS bind_storage variable = pang32 type = RAM_T2P impl = uram
#pragma HLS shared variable = pang32
#pragma HLS stable variable = pang32
#else
    float* ping8 = (float*)malloc(sizeof(float) * 2048 * 2048 * 3);
    float* pang8 = (float*)malloc(sizeof(float) * 2048 * 2048 * 3);
    float* ping16 = (float*)malloc(sizeof(float) * 2048 * 2048 * 3);
    float* pang16 = (float*)malloc(sizeof(float) * 2048 * 2048 * 3);
    float* ping32 = (float*)malloc(sizeof(float) * 2048 * 2048 * 3);
    float* pang32 = (float*)malloc(sizeof(float) * 2048 * 2048 * 3);
#endif

    // #pragma HLS dataflow
    GetACSSize(xsize, ysize, stream_rectx_acs, stream_recty_acs, stream_rectx0, stream_recty0, stream_rectx1,
               stream_recty1, stream_rectx2, stream_recty2, stream_rectx3, stream_recty3, stream_rectx10,
               stream_recty10);

    DupQuantAndMask(num_tile, stream_rectx0, stream_recty0, stream_q_org, stream_mask_org, stream_q_org_8,
                    stream_mask_org_8, stream_q_org_16, stream_mask_org_16, stream_q_org_32, stream_mask_org_32);

    DupDCT<1>(num_tile, stream_rectx1, stream_recty1, stream_rectx4, stream_recty4, stream_rectx7, stream_recty7,
              stream_dctin8, stream_dctin8_0, stream_dctin8_1);

    DupDCT<2>(num_tile, stream_rectx2, stream_recty2, stream_rectx5, stream_recty5, stream_rectx8, stream_recty8,
              stream_dctin16, stream_dctin16_0, stream_dctin16_1);

    DupDCT<4>(num_tile, stream_rectx3, stream_recty3, stream_rectx6, stream_recty6, stream_rectx9, stream_recty9,
              stream_dctin32, stream_dctin32_0, stream_dctin32_1);

    EstimateEntropy8(num_tile, cost1, mul8x8, stream_rectx4, stream_recty4, stream_q_org_8, stream_mask_org_8,
                     stream_dctin8_0, stream_entropy_8);

    EstimateEntropy16(num_tile, cost1, mul16x16, stream_rectx5, stream_recty5, stream_q_org_16, stream_mask_org_16,
                      stream_dctin16_0, stream_entropy_16);

    EstimateEntropy32(num_tile, cost1, mul32x32, stream_rectx6, stream_recty6, stream_q_org_32, stream_mask_org_32,
                      stream_dctin32_0, stream_entropy_32);

    CompareEntropy(num_tile, stream_rectx10, stream_recty10, stream_rectx11, stream_recty11, stream_entropy_8,
                   stream_entropy_16, stream_entropy_32, strategy_ping, strategy_pang, stream_con, stream_ok);

    BufferN<1>(num_tile, ping8, pang8, stream_rectx7, stream_recty7, stream_dctin8_1, stream_con8, stream_ok8);

    BufferN<2>(num_tile, ping16, pang16, stream_rectx8, stream_recty8, stream_dctin16_1, stream_con16, stream_ok16);

    BufferN<4>(num_tile, ping32, pang32, stream_rectx9, stream_recty9, stream_dctin32_1, stream_con32, stream_ok32);

    Reorder(num_tile, ping8, pang8, ping16, pang16, ping32, pang32, strategy_ping, strategy_pang, stream_rectx11,
            stream_recty11, stream_rectx12, stream_recty12, stream_con, stream_ok, stream_con8, stream_ok8,
            stream_con16, stream_ok16, stream_con32, stream_ok32, stream_strategy, stream_strategy1, stream_select);

    SetQuantField(num_tile, inv_global_scale, stream_rectx12, stream_recty12, stream_rqf_org, stream_strategy1,
                  stream_rqf);
}

void GetSourceSize(short xsize,
                   short ysize,
                   hls::stream<uint8_t>& stream_rectx_dct,
                   hls::stream<uint8_t>& stream_recty_dct,
                   hls::stream<uint8_t>& stream_rectx_acs,
                   hls::stream<uint8_t>& stream_recty_acs,
                   hls::stream<uint8_t>& stream_rectx_dc,
                   hls::stream<uint8_t>& stream_recty_dc) {
    uint16_t xsize_blocks = xsize / 8;
    uint16_t ysize_blocks = ysize / 8;
LOOP_0:
    for (uint16_t y = 0; y < Div_Ceil(ysize_blocks, 8); y++) {
    LOOP_1:
        for (uint16_t x = 0; x < Div_Ceil(xsize_blocks, 8); x++) {
#pragma HLS LOOP_TRIPCOUNT min = 64 max = 64
            uint16_t by = y * 8;
            uint16_t by1 = ((y + 1) * 8) < ysize_blocks ? ((y + 1) * 8) : ysize_blocks;
            uint16_t bx = x * 8;
            uint16_t bx1 = ((x + 1) * 8) < xsize_blocks ? ((x + 1) * 8) : xsize_blocks;
            uint8_t rect_ysize = by1 - by;
            uint8_t rect_xsize = bx1 - bx;
            stream_rectx_dct.write(rect_xsize);
            stream_recty_dct.write(rect_ysize);
            stream_rectx_acs.write(rect_xsize);
            stream_recty_acs.write(rect_ysize);
            stream_rectx_dc.write(rect_xsize);
            stream_recty_dc.write(rect_ysize);
        }
    }
}

//=========================================================//
// data flow region
//=========================================================//
void hls_lossy_enc_compute_dataflow(
    // config
    uint32_t ysize,
    uint32_t xsize,
    int masking_field_stride,
    int quant_field_stride,
    float butteraugli_target,
    float cost1,
    float inv_global_scale,
    float* hls_opsin_1,       // mm1, input
    float* hls_opsin_2,       // mm2, input
    float* hls_opsin_3,       // mm3, input
    float* quant_field_row,   // mm4, input
    float* masking_field_row, // mm5, input
    float* aq_map_f,          // mm6, input
    int8_t* cmap_axi,         // mm7, output
    int* ac_coef_axiout,      // mm8, output
    // unsigned char* strategy_all, // mm9, output
    uint8_t* strategy_all,  // mm9, output
    int* raw_quant_field_i, // mm10, output
    float* hls_dc8x8,       // mm11, output
    float* hls_dc16x16,     // mm12, output
    float* hls_dc32x32,     // mm13, output
    int32_t num_zeros[3][320],
    hls::stream<ap_uint<3>, 2>& used_orders_strm) {
#pragma HLS INTERFACE mode = m_axi bundle = mm1 latency = 32 offset = slave num_write_outstanding =             \
    1 num_read_outstanding = 64 max_write_burst_length = 64 max_read_burst_length = 64 depth = ALL_PIXEL port = \
        hls_opsin_1
#pragma HLS INTERFACE mode = m_axi bundle = mm2 latency = 32 offset = slave num_write_outstanding =             \
    1 num_read_outstanding = 64 max_write_burst_length = 64 max_read_burst_length = 64 depth = ALL_PIXEL port = \
        hls_opsin_2
#pragma HLS INTERFACE mode = m_axi bundle = mm3 latency = 32 offset = slave num_write_outstanding =             \
    1 num_read_outstanding = 64 max_write_burst_length = 64 max_read_burst_length = 64 depth = ALL_PIXEL port = \
        hls_opsin_3
#pragma HLS INTERFACE mode = m_axi bundle = mm4 latency = 32 offset = slave num_write_outstanding = \
    1 num_read_outstanding = 64 max_write_burst_length = 64 max_read_burst_length = 64 depth =      \
        BLOCK8_H* BLOCK8_W port = quant_field_row
#pragma HLS INTERFACE mode = m_axi bundle = mm5 latency = 32 offset = slave num_write_outstanding = \
    1 num_read_outstanding = 64 max_write_burst_length = 64 max_read_burst_length = 64 depth =      \
        BLOCK8_H* BLOCK8_W port = masking_field_row
#pragma HLS INTERFACE mode = m_axi bundle = mm6 latency = 32 offset = slave num_write_outstanding = \
    1 num_read_outstanding = 64 max_write_burst_length = 64 max_read_burst_length = 64 depth =      \
        BLOCK8_H* BLOCK8_W port = aq_map_f
#pragma HLS INTERFACE mode = m_axi bundle = mm7 latency = 32 offset = slave num_write_outstanding = \
    1 num_read_outstanding = 64 max_write_burst_length = 64 max_read_burst_length = 64 depth =      \
        TILE_W* TILE_H* 2 port = cmap_axi
#pragma HLS INTERFACE mode = m_axi bundle = mm8 latency = 32 offset = slave num_write_outstanding =             \
    1 num_read_outstanding = 64 max_write_burst_length = 64 max_read_burst_length = 64 depth = ALL_PIXEL port = \
        ac_coef_axiout
#pragma HLS INTERFACE mode = m_axi bundle = mm9 latency = 32 offset = slave num_write_outstanding = \
    1 num_read_outstanding = 64 max_write_burst_length = 64 max_read_burst_length = 64 depth =      \
        BLOCK8_W* BLOCK8_H port = strategy_all
#pragma HLS INTERFACE mode = m_axi bundle = mm10 latency = 32 offset = slave num_write_outstanding = \
    1 num_read_outstanding = 64 max_write_burst_length = 64 max_read_burst_length = 64 depth =       \
        BLOCK8_H* BLOCK8_W port = raw_quant_field_i
// #pragma HLS INTERFACE mode = m_axi bundle = mm11 latency = 32 offset = slave num_write_outstanding =            \
//     1 num_read_outstanding = 64 max_write_burst_length = 64 max_read_burst_length = 64 depth = MAX_ORDER port = \
//         hls_order
#pragma HLS INTERFACE mode = m_axi bundle = mm12 latency = 32 offset = slave num_write_outstanding =            \
    1 num_read_outstanding = 64 max_write_burst_length = 64 max_read_burst_length = 64 depth = ALL_PIXEL port = \
        hls_dc8x8
#pragma HLS INTERFACE mode = m_axi bundle = mm13 latency = 32 offset = slave num_write_outstanding =            \
    1 num_read_outstanding = 64 max_write_burst_length = 64 max_read_burst_length = 64 depth = ALL_PIXEL port = \
        hls_dc16x16
#pragma HLS INTERFACE mode = m_axi bundle = mm14 latency = 32 offset = slave num_write_outstanding =            \
    1 num_read_outstanding = 64 max_write_burst_length = 64 max_read_burst_length = 64 depth = ALL_PIXEL port = \
        hls_dc32x32
// #pragma HLS INTERFACE mode = m_axi bundle = mm15 latency = 32 offset = slave num_write_outstanding =                 \
//     1 num_read_outstanding = 64 max_write_burst_length = 64 max_read_burst_length = 64 depth = MAX_NUM_CONFIG port = \
//         config
// #pragma HLS INTERFACE mode = m_axi bundle = mm16 latency = 32 offset = slave num_write_outstanding =                 \
//     1 num_read_outstanding = 64 max_write_burst_length = 64 max_read_burst_length = 64 depth = MAX_NUM_CONFIG port = \
//         config_fl
#pragma HLS DATAFLOW

    int tile_xsize = (xsize + 63) / 64 * 64;
    int tile_ysize = (ysize + 63) / 64 * 64;
    int xnum_tile = (xsize + 63) / 64;
    int ynum_tile = (ysize + 63) / 64;
    int num_tile = xnum_tile * ynum_tile;
    hls::stream<uint8_t, 1024> stream_rectx_dct;
    hls::stream<uint8_t, 1024> stream_recty_dct;
    hls::stream<uint8_t, 1024> stream_rectx_acs;
    hls::stream<uint8_t, 1024> stream_recty_acs;
    hls::stream<uint8_t, 1024> stream_rectx_dc;
    hls::stream<uint8_t, 1024> stream_recty_dc;
    GetSourceSize(xsize, ysize, stream_rectx_dct, stream_recty_dct, stream_rectx_acs, stream_recty_acs, stream_rectx_dc,
                  stream_recty_dc);

    // load data
    hls::stream<float, 4096> stream_q_org("q_org");
    hls::stream<float, 4096> stream_mask_org("mask_org");
    hls::stream<float, 4096> stream_rqf_org("rqf_org");
    load_rqf_mask(xsize, ysize, aq_map_f, masking_field_row, quant_field_row, quant_field_stride, stream_q_org,
                  stream_mask_org, stream_rqf_org);

    // load pixel
    hls::stream<float, 4096> opsin8x8_stream;
    hls::stream<float, 4096> opsin16x16_stream;
    hls::stream<float, 4096> opsin32x32_stream;
    loadPixel(ysize, xsize, hls_opsin_1, hls_opsin_2, hls_opsin_3, opsin8x8_stream, opsin16x16_stream,
              opsin32x32_stream);

    // 1. dct8x8, dct16x16, dct32x32
    hls::stream<float, 4096> ac_coef8x8_stream("ac_coef8");
    hls::stream<float, 4096> ac_coef16x16_stream("ac_coef16");
    hls::stream<float, 4096> ac_coef32x32_stream("ac_coef32");

    hls::stream<float, 4096> dc_coef8x8_stream("dc_coef8");
    hls::stream<float, 4096> dc_coef16x16_stream("dc_coef16");
    hls::stream<float, 4096> dc_coef32x32_stream("dc_coef32");
    hls_dct_top(ysize, xsize, stream_rectx_dct, stream_recty_dct, opsin8x8_stream, opsin16x16_stream, opsin32x32_stream,
                ac_coef8x8_stream, ac_coef16x16_stream, ac_coef32x32_stream, dc_coef8x8_stream, dc_coef16x16_stream,
                dc_coef32x32_stream);

    // 2. ac strategy
    float k8x8mul1 = -0.55;
    float k8x8mul2 = 1.0735757687292623f;
    float k8x8base = 1.4;
    float mul8x8 = k8x8mul2 + k8x8mul1 / (butteraugli_target + k8x8base);
    float k16X16mul1 = -0.35;
    float k16X16mul2 = 0.82098067020252011;
    float k16X16base = 2.0;
    float entropy_mul16X16 = k16X16mul2 + k16X16mul1 / (butteraugli_target + k16X16base);
    float entropy_mul32X32 = 0.9188333021616017f;
    hls::stream<uint8_t, 4096> acs_stream;
    hls::stream<float, 4096> dct_select_stream;
    hls::stream<uint8_t, 4096> acs_out_stream("acs_out_stream");
    hls::stream<int, 4096> rqf_out_stream("rqf_out_stream");
    hls::stream<int, 4096> rqf_out_stream2("rqf_out_stream2");
    ComputeTileACSHLS((uint16_t)num_tile, (short)ysize, (short)xsize, cost1, butteraugli_target, inv_global_scale,
                      mul8x8, entropy_mul16X16, entropy_mul32X32, stream_rectx_acs, stream_recty_acs, stream_rqf_org,
                      stream_q_org, stream_mask_org, ac_coef8x8_stream, ac_coef16x16_stream, ac_coef32x32_stream,
                      acs_stream, dct_select_stream, rqf_out_stream);

    // 3. cfl heuristic
    hls::stream<int8_t, 4096> cmapx_stream("cmapx_stream");
    hls::stream<int8_t, 4096> cmapb_stream("cmapb_stream");
    hls::stream<int8_t, 4096> cmapx_axi_stream("cmpax_axi_stream");
    hls::stream<int8_t, 4096> cmapb_axi_stream("cmapb_axi_stream");

    hls::stream<int> rqf_cfl_stream("rqf_cfl_stream");
#pragma HLS stream variable = rqf_cfl_stream depth = 4096 * 6
#pragma HLS BIND_STORAGE variable = rqf_cfl_stream type = fifo impl = uram
    hls::stream<uint8_t> acs_cfl_stream("acs_cfl_stream");
#pragma HLS stream variable = acs_cfl_stream depth = 4096 * 6
#pragma HLS BIND_STORAGE variable = acs_cfl_stream type = fifo impl = uram
    hls::stream<float> ac_coef_cfl_stream("ac_coef_cfl_stream");
#pragma HLS stream variable = ac_coef_cfl_stream depth = 4096 * 6
#pragma HLS BIND_STORAGE variable = ac_coef_cfl_stream type = fifo impl = uram

    hls_CFLComputeTile(xsize, ysize, dct_select_stream, rqf_out_stream, acs_stream, cmapx_stream, cmapb_stream,
                       cmapx_axi_stream, cmapb_axi_stream, ac_coef_cfl_stream, rqf_cfl_stream, acs_cfl_stream);

    // 4. ComputeCoefficients
    hls::stream<uint8_t, 4096> acs_coeff_stream1("acs_coeff_stream1");
    hls::stream<int, 4096> ac_quant_coeff_stream("ac_quant_coeff_stream");
    hls::stream<int, 4096> coeff_axi_stream("coeff_axi_stream");
    hls::stream<uint8_t, 4096> acs_axi_stream("acs_axi_stream");
    hls::stream<int, 4096> qf_axi_stream("qf_axi_stream");
    hls_ComputeCoefficients(xsize, ysize, acs_cfl_stream, ac_coef_cfl_stream, rqf_cfl_stream, cmapx_stream,
                            cmapb_stream, acs_coeff_stream1, ac_quant_coeff_stream, coeff_axi_stream, acs_axi_stream,
                            qf_axi_stream);

    // 5. ComputeAllCoeffOrders
    count_numzeros(xsize, ysize, acs_coeff_stream1, ac_quant_coeff_stream, used_orders_strm, num_zeros);

    // 6. axi writeout
    dc_writeout(ysize, xsize, hls_dc8x8, hls_dc16x16, hls_dc32x32, stream_rectx_dc, stream_recty_dc, dc_coef8x8_stream,
                dc_coef16x16_stream, dc_coef32x32_stream);
    cfl_writeout(xsize, ysize, cmapx_axi_stream, cmapb_axi_stream, cmap_axi);
    ac_coeff_writeout(xsize, ysize, coeff_axi_stream, ac_coef_axiout);
    acs_rqf_writeout(xsize, ysize, strategy_all, raw_quant_field_i, acs_axi_stream, qf_axi_stream);
}

namespace xf {
namespace codec {

// ------------------------------------------------------------
/**
 * @brief Level 2 : kernel implement for JXL lossy frame encode computing
 *
 * @param config the int config signal, such as image size, field stride and etc.
 * @param config_fl the floating config signal, such as cost, inv_global_scale and etc.
 * @param hls_opsin_1 the input RGB image data for channnel-1.
 * @param hls_opsin_2 the input RGB image data for channnel-2.
 * @param hls_opsin_3 the input RGB image data for channnel-3.
 * @param quant_field_row the initial quant_filed data.
 * @param masking_filed_row the initial masking_filed data.
 * @param aq_map_f the initial adjust quant map data.
 * @param cmap_axi the output of color correlation map.
 * @param ac_coef_axiout the output of quanted AC coefficients.
 * @param strategy_all the output of strategy for each block in image
 * @param raw_quant_field_i the output of computed raw_quant_field
 * @param hls_order the output of orders for each block in image
 * @param hls_dc8x8 the DC coefficients output for 8x8 blocks
 * @param hls_dc16x16 the DC coefficients output for 16x16 blocks
 * @param hls_dc32x32 the DC coefficients output for 32x32 blocks
 */
// ------------------------------------------------------------

extern "C" void JxlEnc_lossy_enc_compute(int config[MAX_NUM_CONFIG],      // mm15, input
                                         float config_fl[MAX_NUM_CONFIG], // mm16, input
                                         float* hls_opsin_1,              // mm1, input
                                         float* hls_opsin_2,              // mm2, input
                                         float* hls_opsin_3,              // mm3, input
                                         float* quant_field_row,          // mm4, input
                                         float* masking_field_row,        // mm5, input
                                         float* aq_map_f,                 // mm6, input
                                         int8_t* cmap_axi,                // mm7, output
                                         int* ac_coef_axiout,             // mm8, output
                                         //    unsigned char* strategy_all,     // mm9, output
                                         uint8_t* strategy_all,  // mm9, output
                                         int* raw_quant_field_i, // mm10, output
                                         uint32_t* hls_order,    // mm11, output
                                         float* hls_dc8x8,       // mm12, output
                                         float* hls_dc16x16,     // mm13, output
                                         float* hls_dc32x32      // mm14, output
                                         ) {
#pragma HLS INTERFACE mode = m_axi bundle = mm1 latency = 32 offset = slave num_write_outstanding =             \
    1 num_read_outstanding = 64 max_write_burst_length = 64 max_read_burst_length = 64 depth = ALL_PIXEL port = \
        hls_opsin_1
#pragma HLS INTERFACE mode = m_axi bundle = mm2 latency = 32 offset = slave num_write_outstanding =             \
    1 num_read_outstanding = 64 max_write_burst_length = 64 max_read_burst_length = 64 depth = ALL_PIXEL port = \
        hls_opsin_2
#pragma HLS INTERFACE mode = m_axi bundle = mm3 latency = 32 offset = slave num_write_outstanding =             \
    1 num_read_outstanding = 64 max_write_burst_length = 64 max_read_burst_length = 64 depth = ALL_PIXEL port = \
        hls_opsin_3
#pragma HLS INTERFACE mode = m_axi bundle = mm4 latency = 32 offset = slave num_write_outstanding = \
    1 num_read_outstanding = 64 max_write_burst_length = 64 max_read_burst_length = 64 depth =      \
        BLOCK8_H* BLOCK8_W port = quant_field_row
#pragma HLS INTERFACE mode = m_axi bundle = mm5 latency = 32 offset = slave num_write_outstanding = \
    1 num_read_outstanding = 64 max_write_burst_length = 64 max_read_burst_length = 64 depth =      \
        BLOCK8_H* BLOCK8_W port = masking_field_row
#pragma HLS INTERFACE mode = m_axi bundle = mm6 latency = 32 offset = slave num_write_outstanding = \
    1 num_read_outstanding = 64 max_write_burst_length = 64 max_read_burst_length = 64 depth =      \
        BLOCK8_H* BLOCK8_W port = aq_map_f
#pragma HLS INTERFACE mode = m_axi bundle = mm7 latency = 32 offset = slave num_write_outstanding = \
    1 num_read_outstanding = 64 max_write_burst_length = 64 max_read_burst_length = 64 depth =      \
        TILE_W* TILE_H* 2 port = cmap_axi
#pragma HLS INTERFACE mode = m_axi bundle = mm8 latency = 32 offset = slave num_write_outstanding =             \
    1 num_read_outstanding = 64 max_write_burst_length = 64 max_read_burst_length = 64 depth = ALL_PIXEL port = \
        ac_coef_axiout
#pragma HLS INTERFACE mode = m_axi bundle = mm9 latency = 32 offset = slave num_write_outstanding = \
    1 num_read_outstanding = 64 max_write_burst_length = 64 max_read_burst_length = 64 depth =      \
        BLOCK8_W* BLOCK8_H port = strategy_all
#pragma HLS INTERFACE mode = m_axi bundle = mm10 latency = 32 offset = slave num_write_outstanding = \
    1 num_read_outstanding = 64 max_write_burst_length = 64 max_read_burst_length = 64 depth =       \
        BLOCK8_H* BLOCK8_W port = raw_quant_field_i
#pragma HLS INTERFACE mode = m_axi bundle = mm11 latency = 32 offset = slave num_write_outstanding =            \
    1 num_read_outstanding = 64 max_write_burst_length = 64 max_read_burst_length = 64 depth = MAX_ORDER port = \
        hls_order
#pragma HLS INTERFACE mode = m_axi bundle = mm12 latency = 32 offset = slave num_write_outstanding =            \
    1 num_read_outstanding = 64 max_write_burst_length = 64 max_read_burst_length = 64 depth = ALL_PIXEL port = \
        hls_dc8x8
#pragma HLS INTERFACE mode = m_axi bundle = mm13 latency = 32 offset = slave num_write_outstanding =            \
    1 num_read_outstanding = 64 max_write_burst_length = 64 max_read_burst_length = 64 depth = ALL_PIXEL port = \
        hls_dc16x16
#pragma HLS INTERFACE mode = m_axi bundle = mm14 latency = 32 offset = slave num_write_outstanding =            \
    1 num_read_outstanding = 64 max_write_burst_length = 64 max_read_burst_length = 64 depth = ALL_PIXEL port = \
        hls_dc32x32
#pragma HLS INTERFACE mode = m_axi bundle = mm15 latency = 32 offset = slave num_write_outstanding =                 \
    1 num_read_outstanding = 64 max_write_burst_length = 64 max_read_burst_length = 64 depth = MAX_NUM_CONFIG port = \
        config
#pragma HLS INTERFACE mode = m_axi bundle = mm16 latency = 32 offset = slave num_write_outstanding =                 \
    1 num_read_outstanding = 64 max_write_burst_length = 64 max_read_burst_length = 64 depth = MAX_NUM_CONFIG port = \
        config_fl

    // global config
    uint32_t ysize = config[0];
    uint32_t xsize = config[1];
    int masking_field_stride = config[2];
    int quant_field_stride = config[3];
    float butteraugli_target = config_fl[0];
    float cost1 = config_fl[1];
    float inv_global_scale = config_fl[2];
    int32_t num_zeros[3][320];
#pragma HLS BIND_STORAGE type = ram_2p variable = num_zeros impl = BRAM

    // Non-Dataflow region: initialization zeros
    init_numzeros(num_zeros);

    // Dataflow region: enc_compute
    hls::stream<ap_uint<3>, 2> used_orders_strm;
    hls_lossy_enc_compute_dataflow(ysize, xsize, masking_field_stride, quant_field_stride, butteraugli_target, cost1,
                                   inv_global_scale, hls_opsin_1, hls_opsin_2, hls_opsin_3, quant_field_row,
                                   masking_field_row, aq_map_f, cmap_axi, ac_coef_axiout, strategy_all,
                                   raw_quant_field_i, hls_dc8x8, hls_dc16x16, hls_dc32x32, num_zeros, used_orders_strm);

    // Non-Dataflow region: compute orders
    order_finalize_dataflow(used_orders_strm, num_zeros, hls_order); // 8us
}

} // namespace codec
} // namespace xf
#endif
