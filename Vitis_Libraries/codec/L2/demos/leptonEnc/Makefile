# Copyright 2019-2022 Xilinx, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# vitis makefile-generator v2.0.6

############################## Help Section ##############################
.PHONY: help

help::
	$(ECHO) "Makefile Usage:"
	$(ECHO) "  make all TARGET=<hw/hw_emu/sw_emu/> PLATFORM=<FPGA platform> HOST_ARCH=<x86>"
	$(ECHO) "      Command to generate the design for specified Target and Shell."
	$(ECHO) "      By default, HOST_ARCH=x86. HOST_ARCH is required for SoC shells"
	$(ECHO) ""
	$(ECHO) "  make run TARGET=<hw/hw_emu/sw_emu/> PLATFORM=<FPGA platform> HOST_ARCH=<x86>"
	$(ECHO) "      Command to run application in emulation."
	$(ECHO) "      By default, HOST_ARCH=x86. HOST_ARCH required for SoC shells"
	$(ECHO) ""
	$(ECHO) "  make xclbin TARGET=<hw/hw_emu/sw_emu/> PLATFORM=<FPGA platform> HOST_ARCH=<x86>"
	$(ECHO) "      Command to build xclbin application."
	$(ECHO) "      By default, HOST_ARCH=x86. HOST_ARCH is required for SoC shells"
	$(ECHO) ""
	$(ECHO) "  make host TARGET=<hw/hw_emu/sw_emu/>"
	$(ECHO) "      Command to build host application."
	$(ECHO) "      By default, HOST_ARCH=x86. HOST_ARCH is required for SoC shells"
	$(ECHO) ""
	$(ECHO) "  NOTE: For embedded devices, e.g. zcu102/zcu104/vck190, env variable SYSROOT and EDGE_COMMON_SW need to be set first, and HOST_ARCH is either aarch32 or aarch64. For example,"
	$(ECHO) "       export SYSROOT=< path-to-platform-sysroot >"
	$(ECHO) "       export EDGE_COMMON_SW=< path-to-rootfs-and-Image-files >"
	$(ECHO) ""
	$(ECHO) "  make clean "
	$(ECHO) "      Command to remove the generated non-hardware files."
	$(ECHO) ""
	$(ECHO) "  make cleanall"
	$(ECHO) "      Command to remove all the generated files."
	$(ECHO) ""

############################## Setting up Project Variables ##############################

MK_PATH := $(abspath $(lastword $(MAKEFILE_LIST)))
XF_PROJ_ROOT ?= $(shell bash -c 'export MK_PATH=$(MK_PATH); echo $${MK_PATH%/L2/*}')
CUR_DIR := $(patsubst %/,%,$(dir $(MK_PATH)))
XFLIB_DIR = $(XF_PROJ_ROOT)

# setting devault value
TARGET ?= sw_emu
HOST_ARCH ?= x86

#setting PLATFORM
ifeq ($(PLATFORM),)
PLATFORM := $(DEVICE)
endif
ifeq ($(PLATFORM),)
PLATFORM := xilinx_u200_gen3x16_xdma_2_202110_1
endif

# #################### Checking if PLATFORM in whitelist ############################
PLATFORM_ALLOWLIST +=  u200
PLATFORM_BLOCKLIST +=  zc

include ./utils.mk
TEMP_DIR := _x_temp.$(TARGET).$(PLATFORM_NAME)
TEMP_REPORT_DIR := $(CUR_DIR)/reports/_x.$(TARGET).$(PLATFORM_NAME)
BUILD_DIR := build_dir.$(TARGET).$(PLATFORM_NAME)
ifneq ($(RESULT_DIR),)
BUILD_DIR = $(RESULT_DIR)
endif
BUILD_REPORT_DIR := $(CUR_DIR)/reports/_build.$(TARGET).$(PLATFORM_NAME)
EMCONFIG := $(BUILD_DIR)/emconfig.json
XCLBIN_DIR := $(CUR_DIR)/$(BUILD_DIR)
export XCL_BINDIR = $(XCLBIN_DIR)

EXE_FILE_DEPS :=
BINARY_CONTAINERS_DEPS :=
RUN_DEPS :=

# get global setting
ifeq ($(HOST_ARCH), x86)
CXXFLAGS += -fmessage-length=0 -I$(CUR_DIR)/src/ -I$(XILINX_XRT)/include -I$(XILINX_HLS)/include -std=c++14 -O3 -Wall -Wno-unknown-pragmas -Wno-unused-label 
LDFLAGS += -pthread -L$(XILINX_XRT)/lib -L$(XILINX_HLS)/lnx64/tools/fpo_v7_0  -Wl,--as-needed -lOpenCL -lxrt_coreutil -lgmp -lmpfr -lIp_floating_point_v7_0_bitacc_cmodel 
VPP_FLAGS += -t $(TARGET) --platform $(XPLATFORM) --save-temps 
VPP_LDFLAGS += --optimize 2 -R 2 
else ifeq ($(HOST_ARCH), aarch64)
CXXFLAGS += -I$(CUR_DIR)/src/ -fmessage-length=0 --sysroot=$(SYSROOT)  -I$(SYSROOT)/usr/include/xrt -I$(XILINX_HLS)/include -std=c++14 -O3 -Wall -Wno-unknown-pragmas -Wno-unused-label 
LDFLAGS += -pthread -L$(SYSROOT)/usr/lib -L$(XILINX_VITIS_AIETOOLS)/lib/aarch64.o -Wl,--as-needed -lxilinxopencl -lxrt_coreutil 
VPP_FLAGS += -t $(TARGET) --platform $(XPLATFORM) --save-temps 
VPP_LDFLAGS += --optimize 2 -R 2 
endif
CXXFLAGS += $(EXTRA_CXXFLAGS)
VPP_FLAGS += $(EXTRA_VPP_FLAGS)

########################## Setting up Host Variables ##########################
ifeq ($(TARGET),sw_emu)
CXXFLAGS += -D SW_EMU_TEST
endif
ifeq ($(TARGET),hw_emu)
CXXFLAGS += -D HW_EMU_TEST
endif

ifeq (,$(findstring opencv,$(CXXFLAGS)))
CXXFLAGS += $(XRT_CXXFLAGS)
endif

#Inclue Required Host Source Files
HOST_SRCS += $(XFLIB_DIR)/L2/demos/leptonEnc/host/lepton/simple_encoder.cc $(XFLIB_DIR)/L2/demos/leptonEnc/host/lepton/bitops.cc $(XFLIB_DIR)/L2/demos/leptonEnc/host/lepton/fork_serve.cc $(XFLIB_DIR)/L2/demos/leptonEnc/host/lepton/thread_handoff.cc $(XFLIB_DIR)/L2/demos/leptonEnc/host/lepton/socket_serve.cc $(XFLIB_DIR)/L2/demos/leptonEnc/host/lepton/validation.cc $(XFLIB_DIR)/L2/demos/leptonEnc/host/lepton/recoder.cc $(XFLIB_DIR)/L2/demos/leptonEnc/host/lepton/idct.cc $(XFLIB_DIR)/L2/demos/leptonEnc/host/lepton/jpgcoder.cc $(XFLIB_DIR)/L2/demos/leptonEnc/host/lepton/jpgcoder_hls.cc $(XFLIB_DIR)/L2/demos/leptonEnc/host/lepton/uncompressed_components.cc $(XFLIB_DIR)/L2/demos/leptonEnc/host/lepton/lepton_codec.cc $(XFLIB_DIR)/L2/demos/leptonEnc/host/lepton/vp8_decoder.cc $(XFLIB_DIR)/L2/demos/leptonEnc/host/lepton/simple_decoder.cc $(XFLIB_DIR)/L2/demos/leptonEnc/host/lepton/vp8_encoder.cc $(XFLIB_DIR)/L2/demos/leptonEnc/host/io/ZlibCompression.cc $(XFLIB_DIR)/L2/demos/leptonEnc/host/io/Seccomp.cc $(XFLIB_DIR)/L2/demos/leptonEnc/host/io/MemReadWriter.cc $(XFLIB_DIR)/L2/demos/leptonEnc/host/io/ioutil.cc $(XFLIB_DIR)/L2/demos/leptonEnc/host/io/Zlib0.cc $(XFLIB_DIR)/L2/demos/leptonEnc/host/vp8/util/generic_worker.cc $(XFLIB_DIR)/L2/demos/leptonEnc/host/vp8/util/memory.cc $(XFLIB_DIR)/L2/demos/leptonEnc/host/vp8/util/billing.cc $(XFLIB_DIR)/L2/demos/leptonEnc/host/vp8/util/debug.cc $(XFLIB_DIR)/L2/demos/leptonEnc/host/vp8/model/JpegArithmeticCoder.cc $(XFLIB_DIR)/L2/demos/leptonEnc/host/vp8/model/model.cc $(XFLIB_DIR)/L2/demos/leptonEnc/host/vp8/model/numeric.cc $(XFLIB_DIR)/L2/demos/leptonEnc/host/vp8/encoder/encoder.cc $(XFLIB_DIR)/L2/demos/leptonEnc/host/vp8/decoder/decoder.cc $(XFLIB_DIR)/L2/demos/leptonEnc/host/vp8/encoder/boolwriter.cc $(XFLIB_DIR)/L2/demos/leptonEnc/host/vp8/decoder/boolreader.cc $(XFLIB_DIR)/L2/demos/leptonEnc/host/io/MemMgrAllocator.cc $(XFLIB_DIR)/L2/demos/leptonEnc/host/other/loop_stt.cc $(XFLIB_DIR)/ext/xcl2/xcl2.cpp 
CXXFLAGS +=  -I $(XFLIB_DIR)/L2/include/hw/jpegDec -I $(XFLIB_DIR)/L2/include/hw/leptonEnc/jpegDec -I $(XFLIB_DIR)/L2/include/hw/leptonEnc/lepton -I $(XFLIB_DIR)/L2/demos/leptonEnc/kernel -I $(XFLIB_DIR)/L2/demos/leptonEnc/host/lepton -I $(XFLIB_DIR)/L2/demos/leptonEnc/host/other -I $(XFLIB_DIR)/L2/demos/leptonEnc/host/vp8/util -I $(XFLIB_DIR)/L2/demos/leptonEnc/host/vp8/model -I $(XFLIB_DIR)/L2/demos/leptonEnc/host/vp8/encoder -I $(XFLIB_DIR)/L2/demos/leptonEnc/host/vp8/decoder -I $(XFLIB_DIR)/../utils/L1/include/xf_utils_hw -I $(XFLIB_DIR)/../utils/L1/include -I $(XFLIB_DIR)/ext/xcl2
CXXFLAGS += -std=c++14 -fPIC -O3 -Wall -Wno-unknown-pragmas -Wno-unused-label -pthread -L/usr/lib64/ -lcrypto -lz -msse4.2 -DUSE_STANDARD_MEMORY_ALLOCATORS -DUSE_SYSTEM_DEPENDENCIES -DUSE_SYSTEM_LIBRARIES -DHIGH_MEMORY

EXE_NAME := host.exe
EXE_FILE := $(BUILD_DIR)/$(EXE_NAME)
EXE_FILE_DEPS := $(HOST_SRCS) $(EXE_FILE_DEPS)

HOST_ARGS :=  -xclbin $(BUILD_DIR)/lepEnc.xclbin images/
ifneq ($(HOST_ARCH), x86)
PKG_HOST_ARGS = $(foreach args,$(HOST_ARGS),$(subst $(dir $(patsubst %/,%,$(args))),,$(args)))
endif

########################## Kernel compiler global settings ##########################
ifneq (,$(shell echo $(XPLATFORM) | awk '/u200/'))
VPP_FLAGS +=   --config $(CUR_DIR)/conn_u200.cfg
VPP_FLAGS +=  -I $(XFLIB_DIR)/L2/demos/leptonEnc/kernel -I $(XFLIB_DIR)/L2/include/hw/leptonEnc/jpegDec -I $(XFLIB_DIR)/L2/include/hw/leptonEnc/lepton -I $(XFLIB_DIR)/../utils/L1/include/xf_utils_hw -I $(XFLIB_DIR)/../utils/L1/include

else 
VPP_FLAGS +=  -I $(XFLIB_DIR)/L2/demos/leptonEnc/kernel -I $(XFLIB_DIR)/L2/include/hw/leptonEnc/jpegDec -I $(XFLIB_DIR)/L2/include/hw/leptonEnc/lepton -I $(XFLIB_DIR)/../utils/L1/include/xf_utils_hw -I $(XFLIB_DIR)/../utils/L1/include

endif

######################### binary container global settings ##########################
VPP_FLAGS_lepEnc +=  -D KERNEL_NAME=lepEnc
VPP_FLAGS_lepEnc += --hls.clock 300000000:lepEnc
ifneq ($(HOST_ARCH), x86)
VPP_LDFLAGS_lepEnc += --clock.defaultFreqHz 300000000
else
VPP_LDFLAGS_lepEnc += --kernel_frequency 300
endif

ifeq ($(HOST_ARCH), x86)
BINARY_CONTAINERS += $(BUILD_DIR)/lepEnc.xclbin
else
BINARY_CONTAINERS += $(BUILD_DIR)/lepEnc_pkg.$(LINK_TARGET_FMT)
BINARY_CONTAINERS_PKG += $(BUILD_DIR)/lepEnc.xclbin
endif

# ################ Setting Rules for Binary Containers (Building Kernels) ################
$(TEMP_DIR)/lepEnc.xo: $(XFLIB_DIR)/L2/demos/leptonEnc/kernel/multi_cu.cpp $(XFLIB_DIR)/L2/demos/leptonEnc/kernel/XModified.cpp $(XFLIB_DIR)/L2/demos/leptonEnc/kernel/XAcc_model.cpp $(XFLIB_DIR)/L2/demos/leptonEnc/kernel/XAcc_jpegdecoder.cpp $(XFLIB_DIR)/L2/demos/leptonEnc/kernel/XAcc_jfifparser.cpp $(XFLIB_DIR)/L2/demos/leptonEnc/kernel/XAcc_edges.cpp $(XFLIB_DIR)/L2/demos/leptonEnc/kernel/XAcc_dc.cpp $(XFLIB_DIR)/L2/demos/leptonEnc/kernel/XAcc_common.cpp $(XFLIB_DIR)/L2/demos/leptonEnc/kernel/XAcc_arith.cpp $(XFLIB_DIR)/L2/demos/leptonEnc/kernel/XAcc_77.cpp $(XFLIB_DIR)/L2/demos/leptonEnc/kernel/multi_cu.cpp $(XFLIB_DIR)/L2/demos/leptonEnc/kernel/jpeg_dec_lepton_enc.cpp 
	$(ECHO) "Compiling Kernel: lepEnc"
	mkdir -p $(TEMP_DIR)
	$(VPP) -c $(VPP_FLAGS_lepEnc) $(VPP_FLAGS) -k lepEnc -I'$(<D)' --temp_dir $(TEMP_DIR) --report_dir $(TEMP_REPORT_DIR) -o $@ $^
BINARY_CONTAINER_lepEnc_OBJS += $(TEMP_DIR)/lepEnc.xo
BINARY_CONTAINERS_DEPS += $(BINARY_CONTAINER_lepEnc_OBJS)
$(BINARY_CONTAINERS): $(BINARY_CONTAINERS_DEPS)
	mkdir -p $(BUILD_DIR)
	$(VPP) -l $(VPP_FLAGS) --temp_dir $(TEMP_DIR) --report_dir $(BUILD_REPORT_DIR)/lepEnc $(VPP_LDFLAGS)  $(VPP_LDFLAGS_lepEnc) $(AIE_LDFLAGS)   -o $@ $^

############################## Setting Rules for Host (Building Host Executable) ##############################
ifeq ($(HOST_ARCH), x86)
$(EXE_FILE): $(EXE_FILE_DEPS) |  check_xrt
	mkdir -p $(BUILD_DIR)
	$(CXX) -o $@ $^ $(CXXFLAGS) $(LDFLAGS)

else
$(EXE_FILE): $(EXE_FILE_DEPS) |  check_sysroot
	mkdir -p $(BUILD_DIR)
	$(CXX) -o $@ $^ $(CXXFLAGS) $(LDFLAGS)

endif

$(EMCONFIG):
	emconfigutil --platform $(XPLATFORM) --od $(BUILD_DIR)
############################## Preparing sdcard folder ##############################
ifneq ($(HOST_ARCH), x86)
ifneq (,$(findstring zc706, $(PLATFORM_NAME)))
K_IMAGE := $(SYSROOT)/../../uImage
else
K_IMAGE := $(SYSROOT)/../../Image
endif
RUN_SCRIPT := $(BUILD_DIR)/run_script.sh
$(RUN_SCRIPT):
	rm -rf $(RUN_SCRIPT)
	@echo 'export LD_LIBRARY_PATH=/mnt:/tmp:$(LIBRARY_PATH)' >> $(RUN_SCRIPT)
ifneq ($(filter sw_emu hw_emu, $(TARGET)),)
	@echo 'export XCL_EMULATION_MODE=$(TARGET)' >> $(RUN_SCRIPT)
endif
	@echo 'export XILINX_VITIS=/mnt' >> $(RUN_SCRIPT)
	@echo 'export XILINX_XRT=/usr' >> $(RUN_SCRIPT)
	@echo 'if [ -f platform_desc.txt  ]; then' >> $(RUN_SCRIPT)
	@echo '        cp platform_desc.txt /etc/xocl.txt' >> $(RUN_SCRIPT)
	@echo 'fi' >> $(RUN_SCRIPT)
	@echo './$(EXE_NAME) $(PKG_HOST_ARGS)' >> $(RUN_SCRIPT)
	@echo 'return_code=$$?' >> $(RUN_SCRIPT)
	@echo 'if [ $$return_code -ne 0 ]; then' >> $(RUN_SCRIPT)
	@echo '        echo "ERROR: Embedded host run failed, RC=$$return_code"' >> $(RUN_SCRIPT)
	@echo 'else' >> $(RUN_SCRIPT)
	@echo '        echo "INFO: TEST PASSED, RC=0"' >> $(RUN_SCRIPT)
	@echo 'fi' >> $(RUN_SCRIPT)
	@echo 'echo "INFO: Embedded host run completed."' >> $(RUN_SCRIPT)
	@echo 'exit $$return_code' >> $(RUN_SCRIPT)
DATA_FILE := 
DATA_DIR := $(CUR_DIR)/images 
SD_FILES += $(RUN_SCRIPT)
SD_FILES += $(EXE_FILE)
SD_FILES += $(EMCONFIG)
SD_FILES += xrt.ini
SD_FILES += $(DATA_FILE)# where define DATAFILE in json
SD_FILES_WITH_PREFIX = $(foreach sd_file,$(SD_FILES), $(if $(filter $(sd_file),$(wildcard $(sd_file))), --package.sd_file $(sd_file)))
SD_DIRS_WITH_PREFIX = $(foreach sd_dir,$(DATA_DIR),--package.sd_dir $(sd_dir))
PACKAGE_FILES := $(BINARY_CONTAINERS)
PACKAGE_FILES += $(AIE_CONTAINER)
SD_CARD := $(CUR_DIR)/package_$(TARGET)
vck190_dfx_hw := off
$(SD_CARD): $(EXE_FILE) $(BINARY_CONTAINERS) $(RUN_SCRIPT) $(EMCONFIG)
	@echo "Generating sd_card folder...."
	mkdir -p $(SD_CARD)
	chmod a+rx $(BUILD_DIR)/run_script.sh
ifeq ($(findstring vck190_base_dfx, $(PLATFORM_NAME)),vck190_base_dfx)
ifeq ($(TARGET),hw)
	$(VPP) -t $(TARGET) --platform $(XPLATFORM) -p $(PACKAGE_FILES) $(VPP_PACKAGE) -o $(BINARY_CONTAINERS_PKG)
	$(VPP) -t $(TARGET) --platform $(XPLATFORM) -p --package.out_dir  $(SD_CARD) --package.rootfs $(SYSROOT)/../../rootfs.ext4 --package.kernel_image $(K_IMAGE)  $(SD_FILES_WITH_PREFIX) $(SD_DIRS_WITH_PREFIX) --package.sd_file $(BINARY_CONTAINERS_PKG)
	@echo "### ***** sd_card generation done! ***** ###"
vck190_dfx_hw := on
endif
endif
ifeq ($(vck190_dfx_hw), off)
	$(VPP) -t $(TARGET) --platform $(XPLATFORM) -o $(BINARY_CONTAINERS_PKG) -p $(PACKAGE_FILES) $(VPP_PACKAGE) --package.out_dir  $(SD_CARD) --package.rootfs $(SYSROOT)/../../rootfs.ext4 --package.kernel_image $(K_IMAGE)  $(SD_FILES_WITH_PREFIX) $(SD_DIRS_WITH_PREFIX)
	@echo "### ***** sd_card generation done! ***** ###"
endif

.PHONY: sd_card
sd_card: $(SD_CARD)
endif
############################## Setting Essential Checks and Building Rules ##############################
RUN_DEPS += $(EXE_FILE) $(BINARY_CONTAINERS) $(EMCONFIG)
RUN_DEPS += $(SD_CARD)

.PHONY: mkflag all run
mkflag:
	mkdir -p $(BUILD_DIR)
	rm -rf $(BUILD_DIR)/makefile_args.txt
	@for var in $(MAKEFLAGS); do echo $$var >> $(BUILD_DIR)/makefile_args.txt; done
all: check_device  check_vpp check_platform mkflag $(RUN_DEPS)
run: all
#hw_emu
ifneq (,$(filter hw_emu, $(TARGET)))
ifeq ($(HOST_ARCH), x86)
	LD_LIBRARY_PATH=$(LIBRARY_PATH):$$LD_LIBRARY_PATH \
	XCL_EMULATION_MODE=$(TARGET) $(EXE_FILE) $(HOST_ARGS)
	
else
	@echo $(RUN_DEPS)
	$(SD_CARD)/launch_$(TARGET).sh -no-reboot -run-app $(notdir $(RUN_SCRIPT)) 
	grep "TEST PASSED, RC=0" $(SD_CARD)/qemu_output.log || exit 1
	
endif
endif
#sw_emu
ifneq (,$(filter sw_emu, $(TARGET)))
ifeq ($(HOST_ARCH), x86)
	LD_LIBRARY_PATH=$(LIBRARY_PATH):$$LD_LIBRARY_PATH \
	XCL_EMULATION_MODE=$(TARGET) $(EXE_FILE) $(HOST_ARGS) 
	
else
	@echo $(RUN_DEPS)
	$(SD_CARD)/launch_$(TARGET).sh -no-reboot -run-app $(notdir $(RUN_SCRIPT)) 
	grep "TEST PASSED, RC=0" $(SD_CARD)/qemu_output.log || exit 1
	
endif
endif
#hw
ifeq ($(TARGET), hw)
ifneq (,$(findstring aws-vu9p-f1, $(PLATFORM_NAME)))
ifneq ($(JENKINS_INTERNAL_BUILD), 1)
	$(ECHO) "This makefile does not directly support converting .xclbin to .awsxclbin, please refer https://github.com/aws/aws-fpga/blob/master/Vitis/README.md for next operations"
else
	$(ECHO) "Running inside Xilinx regression without converting to .awsxclbin"
	LD_LIBRARY_PATH=$(LIBRARY_PATH):$$LD_LIBRARY_PATH \
	$(EXE_FILE) $(HOST_ARGS)
	
endif
else ifeq ($(HOST_ARCH), x86)
	LD_LIBRARY_PATH=$(LIBRARY_PATH):$$LD_LIBRARY_PATH \
	$(EXE_FILE) $(HOST_ARGS)
	
else
	$(ECHO) "Please copy the content of sd_card folder and data to an SD Card and run on the board"
endif
endif

############################## Setting Targets ##############################

.PHONY: clean cleanall emconfig
emconfig: $(EMCONFIG)

.PHONY: host
ifeq ($(HOST_ARCH), x86)
host:  check_xrt $(EXE_FILE)
else
host:  check_sysroot $(EXE_FILE)
endif

.PHONY: xclbin
ifeq ($(HOST_ARCH), x86)
xclbin:  check_vpp check_xrt $(BINARY_CONTAINERS) 
else
xclbin:  check_vpp check_sysroot $(BINARY_CONTAINERS) 
endif

############################## Cleaning Rules ##############################
cleanh:
	-$(RMDIR) $(EXE_FILE) vitis_* TempConfig system_estimate.xtxt *.rpt .run/
	-$(RMDIR) src/*.ll _xocc_* .Xil dltmp* xmltmp* *.log *.jou *.wcfg *.wdb sample_link.ini sample_compile.ini obj*  bin* *.csv *.jpg *.jpeg *.png

cleank:
	-$(RMDIR) $(BUILD_DIR)/*.xclbin _vimage *xclbin.run_summary qemu-memory-_* emulation/ _vimage/ pl*start_simulation. sh *.xclbin
	-$(RMDIR) _x_temp.*

cleanall: cleanh cleank
	-$(RMDIR) $(BUILD_DIR)  emconfig.json *.html $(TEMP_DIR) $(CUR_DIR)/reports *.csv *.run_summary  $(CUR_DIR)/*.raw package_*   $(BUILD_DIR)/run_script.sh .ipcache *.str
	-$(RMDIR)  $(CUR_DIR)/Work $(CUR_DIR)/*.xpe $(CUR_DIR)/hw.o $(CUR_DIR)/*.xsa $(CUR_DIR)/xnwOut
	-$(RMDIR) 

clean: cleanh