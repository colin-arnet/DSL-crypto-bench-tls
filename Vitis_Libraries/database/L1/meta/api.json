{
    "schema": "vitis_libraries_api_list_schema-1.0",
    "api_list": [
        {
            "api_name": "xf::database::aggregate",
            "spec": {
                "schema": "vitis_libraries_api_list_schema-1.0",
                "api_name": "xf::database::aggregate",
                "display_name": "aggregate",
                "brief": "Overload for most common aggregations.",
                "target_domain": "",
                "header_file_name": [
                    "aggregate.hpp"
                ],
                "search_paths": [
                    "L1/include/hw/xf_database"
                ],
                "instance": "function",
                "parameters": [
                    {
                        "name": "op",
                        "type": "AggregateOp",
                        "description": "the aggregate operator: AOP_SUM, AOP_MAX, AOP_MIN, AOP_MEAN, AOP_VARIANCE, AOP_NORML1 or AOP_NORML2"
                    },
                    {
                        "name": "T",
                        "type": "typename",
                        "description": "the data type of input and output streams"
                    }
                ],
                "ports": [
                    {
                        "name": "in_strm",
                        "direction": "",
                        "type": "hls::stream< T > &"
                    },
                    {
                        "name": "in_e_strm",
                        "direction": "",
                        "type": "hls::stream< bool > &"
                    },
                    {
                        "name": "out_strm",
                        "direction": "",
                        "type": "hls::stream< T > &"
                    },
                    {
                        "name": "out_e_strm",
                        "direction": "",
                        "type": "hls::stream< bool > &"
                    }
                ]
            }
        },
        {
            "api_name": "xf::database::bitonicSort",
            "spec": {
                "schema": "vitis_libraries_api_list_schema-1.0",
                "api_name": "xf::database::bitonicSort",
                "display_name": "bitonicSort",
                "brief": "Bitonic sort is parallel algorithm for sorting.",
                "target_domain": "",
                "header_file_name": [
                    "bitonic_sort.hpp"
                ],
                "search_paths": [
                    "L1/include/hw/xf_database"
                ],
                "instance": "function",
                "parameters": [
                    {
                        "name": "Key_Type",
                        "type": "typename",
                        "description": "the input and output key type"
                    },
                    {
                        "name": "BitonicSortNumber",
                        "type": "int",
                        "description": "the parallel number"
                    }
                ],
                "ports": [
                    {
                        "name": "kin_strm",
                        "direction": "",
                        "type": "hls::stream< Key_Type > &_end,"
                    },
                    {
                        "name": "kin_strm_end",
                        "direction": "",
                        "type": "hls::stream< Key_Type > &kout_strm, hls::stream< bool > &kout_strm_end, bool orde"
                    },
                    {
                        "name": "kout_strm",
                        "direction": "",
                        "type": "hls::stream< Key_Type > &_end,"
                    },
                    {
                        "name": "kout_strm_end",
                        "direction": "",
                        "type": "bool ord"
                    },
                    {
                        "name": "order",
                        "direction": "",
                        "type": "bool ord"
                    }
                ]
            }
        },
        {
            "api_name": "xf::database::bfGen",
            "spec": {
                "schema": "vitis_libraries_api_list_schema-1.0",
                "api_name": "xf::database::bfGen",
                "display_name": "bfGen",
                "brief": "Generate the bloomfilter in on-chip RAM blocks.",
                "target_domain": "",
                "header_file_name": [
                    "bloom_filter.hpp"
                ],
                "search_paths": [
                    "L1/include/hw/xf_database"
                ],
                "instance": "function",
                "parameters": [
                    {
                        "name": "IS_BRAM",
                        "type": "bool"
                    },
                    {
                        "name": "STR_IN_W",
                        "type": "int",
                        "description": "W width of the streamed input message, e.g., W=512."
                    },
                    {
                        "name": "BV_W",
                        "type": "int",
                        "description": "width of the hash value. ptr0, ptr1 and ptr2 should point at MEM_SPACE=2^BV_W (bit)."
                    }
                ],
                "ports": [
                    {
                        "name": "msg_strm",
                        "direction": "",
                        "type": "hls::stream< ap_uint< STR_IN_W > > &"
                    },
                    {
                        "name": "in_e_strm",
                        "direction": "",
                        "type": "hls::stream< bool > &"
                    },
                    {
                        "name": "bit_vector_ptr0",
                        "direction": "",
                        "type": "ap_uint< IS_BRAM?16:72 > *"
                    },
                    {
                        "name": "bit_vector_ptr1",
                        "direction": "",
                        "type": "ap_uint< IS_BRAM?16:72 > *"
                    },
                    {
                        "name": "bit_vector_ptr2",
                        "direction": "",
                        "type": "ap_uint< IS_BRAM?16:72 > *"
                    }
                ]
            }
        },
        {
            "api_name": "xf::database::bfGenStream",
            "spec": {
                "schema": "vitis_libraries_api_list_schema-1.0",
                "api_name": "xf::database::bfGenStream",
                "display_name": "bfGenStream",
                "brief": "Generate the bloomfilter in on-chip RAM blocks, and emit the vectors upon finish.",
                "target_domain": "",
                "header_file_name": [
                    "bloom_filter.hpp"
                ],
                "search_paths": [
                    "L1/include/hw/xf_database"
                ],
                "instance": "function",
                "parameters": [
                    {
                        "name": "IS_BRAM",
                        "type": "bool"
                    },
                    {
                        "name": "STR_IN_W",
                        "type": "int",
                        "description": "W width of the streamed input message, e.g., W=512."
                    },
                    {
                        "name": "BV_W",
                        "type": "int",
                        "description": "width of the hash value. bit_vet_strm should send out MEM_SPACE=2^BV_W (bit) data in total."
                    }
                ],
                "ports": [
                    {
                        "name": "msg_strm",
                        "direction": "",
                        "type": "hls::stream< ap_uint< STR_IN_W > > &"
                    },
                    {
                        "name": "in_e_strm",
                        "direction": "",
                        "type": "hls::stream< bool > &"
                    },
                    {
                        "name": "bit_vet_strm",
                        "direction": "",
                        "type": "hls::stream< ap_uint< IS_BRAM?16:64 > > &"
                    },
                    {
                        "name": "out_e_strm",
                        "direction": "",
                        "type": "hls::stream< bool > &"
                    }
                ]
            }
        },
        {
            "api_name": "xf::database::bfCheck",
            "spec": {
                "schema": "vitis_libraries_api_list_schema-1.0",
                "api_name": "xf::database::bfCheck",
                "display_name": "bfCheck",
                "brief": "Check existance of value using bloom-filter vectors.",
                "target_domain": "",
                "header_file_name": [
                    "bloom_filter.hpp"
                ],
                "search_paths": [
                    "L1/include/hw/xf_database"
                ],
                "instance": "function",
                "parameters": [
                    {
                        "name": "IS_BRAM",
                        "type": "bool",
                        "description": "choose which types of memory to use. True for BRAM. False for URAM"
                    },
                    {
                        "name": "STR_IN_W",
                        "type": "int",
                        "description": "W width of the streamed input message, e.g., W=512."
                    },
                    {
                        "name": "BV_W",
                        "type": "int",
                        "description": "width of the hash value. ptr0, ptr1 and ptr2 should point at MEM_SPACE=2^BV_W (bit)."
                    }
                ],
                "ports": [
                    {
                        "name": "msg_strm",
                        "direction": "",
                        "type": "hls::stream< ap_uint< STR_IN_W > > &"
                    },
                    {
                        "name": "in_e_strm",
                        "direction": "",
                        "type": "hls::stream< bool > &"
                    },
                    {
                        "name": "bit_vector_ptr0",
                        "direction": "",
                        "type": "ap_uint< IS_BRAM?16:72 > *"
                    },
                    {
                        "name": "bit_vector_ptr1",
                        "direction": "",
                        "type": "ap_uint< IS_BRAM?16:72 > *"
                    },
                    {
                        "name": "bit_vector_ptr2",
                        "direction": "",
                        "type": "ap_uint< IS_BRAM?16:72 > *"
                    },
                    {
                        "name": "out_v_strm",
                        "direction": "",
                        "type": "hls::stream< bool > &"
                    },
                    {
                        "name": "out_e_strm",
                        "direction": "",
                        "type": "hls::stream< bool > &"
                    }
                ]
            }
        },
        {
            "api_name": "xf::database::combineCol",
            "spec": {
                "schema": "vitis_libraries_api_list_schema-1.0",
                "api_name": "xf::database::combineCol",
                "display_name": "combineCol",
                "brief": "Combines two columns into one.",
                "target_domain": "",
                "header_file_name": [
                    "combine_split_col.hpp"
                ],
                "search_paths": [
                    "L1/include/hw/xf_database"
                ],
                "instance": "function",
                "parameters": [
                    {
                        "name": "_WCol1",
                        "type": "int",
                        "description": "the width of 1st input stream."
                    },
                    {
                        "name": "_WCol2",
                        "type": "int",
                        "description": "the width of 2nd input stream."
                    },
                    {
                        "name": "_WColOut",
                        "type": "int",
                        "description": "the width of output stream."
                    }
                ],
                "ports": [
                    {
                        "name": "din1_strm",
                        "direction": "",
                        "type": "hls::stream< ap_uint< _WCol1 > > &"
                    },
                    {
                        "name": "din2_strm",
                        "direction": "",
                        "type": "hls::stream< ap_uint< _WCol2 > > &"
                    },
                    {
                        "name": "in_e_strm",
                        "direction": "",
                        "type": "hls::stream< bool > &"
                    },
                    {
                        "name": "dout_strm",
                        "direction": "",
                        "type": "hls::stream< ap_uint< _WColOut > > &"
                    },
                    {
                        "name": "out_e_strm",
                        "direction": "",
                        "type": "hls::stream< bool > &"
                    }
                ]
            }
        },
        {
            "api_name": "xf::database::splitCol",
            "spec": {
                "schema": "vitis_libraries_api_list_schema-1.0",
                "api_name": "xf::database::splitCol",
                "display_name": "splitCol",
                "brief": "Split previously combined columns into two.",
                "target_domain": "",
                "header_file_name": [
                    "combine_split_col.hpp"
                ],
                "search_paths": [
                    "L1/include/hw/xf_database"
                ],
                "instance": "function",
                "parameters": [
                    {
                        "name": "_WColIn",
                        "type": "int",
                        "description": "the width of input stream."
                    },
                    {
                        "name": "_WCol1",
                        "type": "int",
                        "description": "the width of 1st output stream."
                    },
                    {
                        "name": "_WCol2",
                        "type": "int",
                        "description": "the width of 2nd output stream."
                    }
                ],
                "ports": [
                    {
                        "name": "din_strm",
                        "direction": "",
                        "type": "hls::stream< ap_uint< _WColIn > > &"
                    },
                    {
                        "name": "in_e_strm",
                        "direction": "",
                        "type": "hls::stream< bool > &"
                    },
                    {
                        "name": "dout1_strm",
                        "direction": "",
                        "type": "hls::stream< ap_uint< _WCol1 > > &"
                    },
                    {
                        "name": "dout2_strm",
                        "direction": "",
                        "type": "hls::stream< ap_uint< _WCol2 > > &"
                    },
                    {
                        "name": "out_e_strm",
                        "direction": "",
                        "type": "hls::stream< bool > &"
                    }
                ]
            }
        },
        {
            "api_name": "xf::database::compoundSort",
            "spec": {
                "schema": "vitis_libraries_api_list_schema-1.0",
                "api_name": "xf::database::compoundSort",
                "display_name": "compoundSort",
                "brief": "compoundSort sort the key based on insert sort and merge sort.",
                "target_domain": "",
                "header_file_name": [
                    "compound_sort.hpp"
                ],
                "search_paths": [
                    "L1/include/hw/xf_database"
                ],
                "instance": "function",
                "parameters": [
                    {
                        "name": "KEY_TYPE",
                        "type": "typename",
                        "description": "key type"
                    },
                    {
                        "name": "SORT_LEN",
                        "type": "int",
                        "description": "Maximum support sort length, between 16K to 2M, but it must be an integer power of 2."
                    },
                    {
                        "name": "INSERT_LEN",
                        "type": "int",
                        "description": "insert sort length, maximum length 1024 (recommend)"
                    }
                ],
                "ports": [
                    {
                        "name": "order",
                        "direction": "",
                        "type": "bool"
                    },
                    {
                        "name": "inKeyStrm",
                        "direction": "",
                        "type": "hls::stream< KEY_TYPE > &"
                    },
                    {
                        "name": "inEndStrm",
                        "direction": "",
                        "type": "hls::stream< bool > &"
                    },
                    {
                        "name": "outKeyStrm",
                        "direction": "",
                        "type": "hls::stream< KEY_TYPE > &"
                    },
                    {
                        "name": "outEndStrm",
                        "direction": "",
                        "type": "hls::stream< bool > &"
                    }
                ]
            }
        },
        {
            "api_name": "xf::database::directGroupAggregate",
            "spec": {
                "schema": "vitis_libraries_api_list_schema-1.0",
                "api_name": "xf::database::directGroupAggregate",
                "display_name": "directGroupAggregate",
                "brief": "Group-by aggregation with limited key width.",
                "target_domain": "",
                "header_file_name": [
                    "direct_group_aggregate.hpp"
                ],
                "search_paths": [
                    "L1/include/hw/xf_database"
                ],
                "instance": "function",
                "parameters": [
                    {
                        "name": "op",
                        "type": "int",
                        "description": "the aggregate operator, as defined in AggregateOp enum."
                    },
                    {
                        "name": "DATINW",
                        "type": "int",
                        "description": "the width of input payload"
                    },
                    {
                        "name": "DATOUTW",
                        "type": "int",
                        "description": "the width of output aggr-payload"
                    },
                    {
                        "name": "DIRECTW",
                        "type": "int",
                        "description": "the width of input and output key"
                    }
                ],
                "ports": [
                    {
                        "name": "vin_strm",
                        "direction": "",
                        "type": "hls::stream< ap_uint< DATINW > > &"
                    },
                    {
                        "name": "in_e_strm",
                        "direction": "",
                        "type": "hls::stream< bool > &"
                    },
                    {
                        "name": "vout_strm",
                        "direction": "",
                        "type": "hls::stream< ap_uint< DATOUTW > > &"
                    },
                    {
                        "name": "out_e_strm",
                        "direction": "",
                        "type": "hls::stream< bool > &"
                    },
                    {
                        "name": "kin_strm",
                        "direction": "",
                        "type": "hls::stream< ap_uint< DIRECTW > > &"
                    },
                    {
                        "name": "kout_strm",
                        "direction": "",
                        "type": "hls::stream< ap_uint< DIRECTW > > &"
                    }
                ]
            }
        },
        {
            "api_name": "xf::database::duplicateCol",
            "spec": {
                "schema": "vitis_libraries_api_list_schema-1.0",
                "api_name": "xf::database::duplicateCol",
                "display_name": "duplicateCol",
                "brief": "Duplicate one column into two columns.",
                "target_domain": "",
                "header_file_name": [
                    "duplicate_col.hpp"
                ],
                "search_paths": [
                    "L1/include/hw/xf_database"
                ],
                "instance": "function",
                "parameters": [
                    {
                        "name": "W",
                        "type": "int",
                        "description": "column data width in bits."
                    }
                ],
                "ports": [
                    {
                        "name": "d_in_strm",
                        "direction": "",
                        "type": "hls::stream< ap_uint< W > > &"
                    },
                    {
                        "name": "e_in_strm",
                        "direction": "",
                        "type": "hls::stream< bool > &"
                    },
                    {
                        "name": "d0_out_strm",
                        "direction": "",
                        "type": "hls::stream< ap_uint< W > > &"
                    },
                    {
                        "name": "d1_out_strm",
                        "direction": "",
                        "type": "hls::stream< ap_uint< W > > &"
                    },
                    {
                        "name": "e_out_strm",
                        "direction": "",
                        "type": "hls::stream< bool > &"
                    }
                ]
            }
        },
        {
            "api_name": "xf::database::dynamicEval",
            "spec": {
                "schema": "vitis_libraries_api_list_schema-1.0",
                "api_name": "xf::database::dynamicEval",
                "display_name": "dynamicEval",
                "brief": "Dynamic expression evaluation.",
                "target_domain": "",
                "header_file_name": [
                    "dynamic_eval.hpp"
                ],
                "search_paths": [
                    "L1/include/hw/xf_database"
                ],
                "instance": "function",
                "parameters": [
                    {
                        "name": "TStrm1",
                        "type": "typename",
                        "description": "Type of input Stream1"
                    },
                    {
                        "name": "TStrm2",
                        "type": "typename",
                        "description": "Type of input Stream2"
                    },
                    {
                        "name": "TStrm3",
                        "type": "typename",
                        "description": "Type of input Stream3"
                    },
                    {
                        "name": "TStrm4",
                        "type": "typename",
                        "description": "Type of input Stream4"
                    },
                    {
                        "name": "TConst1",
                        "type": "typename",
                        "description": "Type of input Constant1"
                    },
                    {
                        "name": "TConst2",
                        "type": "typename",
                        "description": "Type of input Constant2"
                    },
                    {
                        "name": "TConst3",
                        "type": "typename",
                        "description": "Type of input Constant3"
                    },
                    {
                        "name": "TConst4",
                        "type": "typename",
                        "description": "Type of input Constant4"
                    },
                    {
                        "name": "TOut",
                        "type": "typename",
                        "description": "Type of Compute Result"
                    }
                ],
                "ports": [
                    {
                        "name": "config",
                        "direction": "",
                        "type": "ap_uint< 289 >"
                    },
                    {
                        "name": "strm_in1",
                        "direction": "",
                        "type": "hls::stream< TStrm1 > &"
                    },
                    {
                        "name": "strm_in2",
                        "direction": "",
                        "type": "hls::stream< TStrm2 > &"
                    },
                    {
                        "name": "strm_in3",
                        "direction": "",
                        "type": "hls::stream< TStrm3 > &"
                    },
                    {
                        "name": "strm_in4",
                        "direction": "",
                        "type": "hls::stream< TStrm4 > &"
                    },
                    {
                        "name": "strm_in_end",
                        "direction": "",
                        "type": "hls::stream< bool > &"
                    },
                    {
                        "name": "strm_out",
                        "direction": "",
                        "type": "hls::stream< TOut > &"
                    },
                    {
                        "name": "strm_out_end",
                        "direction": "",
                        "type": "_end"
                    }
                ]
            }
        },
        {
            "api_name": "xf::database::dynamicEvalV2",
            "spec": {
                "schema": "vitis_libraries_api_list_schema-1.0",
                "api_name": "xf::database::dynamicEvalV2",
                "display_name": "dynamicEvalV2",
                "brief": "Dynamic expression evaluation version 2.",
                "target_domain": "",
                "header_file_name": [
                    "dynamic_eval_v2.hpp"
                ],
                "search_paths": [
                    "L1/include/hw/xf_database"
                ],
                "instance": "function",
                "parameters": [
                    {
                        "name": "T",
                        "type": "typename",
                        "description": "Type of input streams"
                    }
                ],
                "ports": [
                    {
                        "name": "cfgs",
                        "direction": "",
                        "type": "hls::stream< ap_uint< 32 > > &"
                    },
                    {
                        "name": "col0_istrm",
                        "direction": "",
                        "type": "hls::stream< T > &"
                    },
                    {
                        "name": "col1_istrm",
                        "direction": "",
                        "type": "hls::stream< T > &"
                    },
                    {
                        "name": "col2_istrm",
                        "direction": "",
                        "type": "hls::stream< T > &"
                    },
                    {
                        "name": "col3_istrm",
                        "direction": "",
                        "type": "hls::stream< T > &"
                    },
                    {
                        "name": "e_istrm",
                        "direction": "",
                        "type": "hls::stream< bool > &"
                    },
                    {
                        "name": "ret_ostrm",
                        "direction": "",
                        "type": "hls::stream< T > &"
                    },
                    {
                        "name": "e_ostrm",
                        "direction": "",
                        "type": "hls::stream< bool > &"
                    }
                ]
            }
        },
        {
            "api_name": "xf::database::dynamicFilter",
            "spec": {
                "schema": "vitis_libraries_api_list_schema-1.0",
                "api_name": "xf::database::dynamicFilter",
                "display_name": "dynamicFilter",
                "brief": "Filter payloads according to conditions set during run-time.",
                "target_domain": "",
                "header_file_name": [
                    "dynamic_filter.hpp"
                ],
                "search_paths": [
                    "L1/include/hw/xf_database"
                ],
                "instance": "function",
                "parameters": [
                    {
                        "name": "W",
                        "type": "int",
                        "description": "width of all condition column streams, in bits."
                    },
                    {
                        "name": "WP",
                        "type": "int",
                        "description": "width of payload column, in bits."
                    }
                ],
                "ports": [
                    {
                        "name": "filter_cfg_strm",
                        "direction": "",
                        "type": "hls::stream< ap_uint< 32 > > &"
                    },
                    {
                        "name": "v0_strm",
                        "direction": "",
                        "type": "hls::stream< ap_uint< W > > &"
                    },
                    {
                        "name": "v1_strm",
                        "direction": "",
                        "type": "hls::stream< ap_uint< W > > &"
                    },
                    {
                        "name": "v2_strm",
                        "direction": "",
                        "type": "hls::stream< ap_uint< W > > &"
                    },
                    {
                        "name": "v3_strm",
                        "direction": "",
                        "type": "hls::stream< ap_uint< W > > &"
                    },
                    {
                        "name": "pay_in_strm",
                        "direction": "",
                        "type": "hls::stream< ap_uint< WP > > &"
                    },
                    {
                        "name": "e_in_strm",
                        "direction": "",
                        "type": "hls::stream< bool > &"
                    },
                    {
                        "name": "pay_out_strm",
                        "direction": "",
                        "type": "hls::stream< ap_uint< WP > > &"
                    },
                    {
                        "name": "e_pay_out_strm",
                        "direction": "",
                        "type": ""
                    }
                ]
            }
        },
        {
            "api_name": "xf::database::groupAggregate",
            "spec": {
                "schema": "vitis_libraries_api_list_schema-1.0",
                "api_name": "xf::database::groupAggregate",
                "display_name": "groupAggregate",
                "brief": "group aggregate function that returns same type as input",
                "target_domain": "",
                "header_file_name": [
                    "group_aggregate.hpp"
                ],
                "search_paths": [
                    "L1/include/hw/xf_database"
                ],
                "instance": "function",
                "parameters": [
                    {
                        "name": "op",
                        "type": "AggregateOp",
                        "description": "the aggregate operator: AOP_MAX, AOP_MIN, AOP_MEAN, AOP_VARIANCE, AOP_NORML1 or AOP_NORML2"
                    },
                    {
                        "name": "T",
                        "type": "typename",
                        "description": "the data type of input and output streams"
                    },
                    {
                        "name": "KEY_T",
                        "type": "typename",
                        "description": "the input and output indexing key type"
                    }
                ],
                "ports": [
                    {
                        "name": "din_strm",
                        "direction": "",
                        "type": "hls::stream< T > &"
                    },
                    {
                        "name": "in_e_strm",
                        "direction": "",
                        "type": "hls::stream< bool > &"
                    },
                    {
                        "name": "dout_strm",
                        "direction": "",
                        "type": "hls::stream< T > &"
                    },
                    {
                        "name": "out_e_strm",
                        "direction": "",
                        "type": "hls::stream< bool > &"
                    },
                    {
                        "name": "kin_strm",
                        "direction": "",
                        "type": "hls::stream< KEY_T > &"
                    },
                    {
                        "name": "kout_strm",
                        "direction": "",
                        "type": "hls::stream< KEY_T > &"
                    }
                ]
            }
        },
        {
            "api_name": "xf::database::hashAntiJoin",
            "spec": {
                "schema": "vitis_libraries_api_list_schema-1.0",
                "api_name": "xf::database::hashAntiJoin",
                "display_name": "hashAntiJoin",
                "brief": "Multi-PU Hash-Anti-Join primitive, using multiple DDR/HBM buffers.",
                "target_domain": "",
                "header_file_name": [
                    "hash_anti_join.hpp"
                ],
                "search_paths": [
                    "L1/include/hw/xf_database"
                ],
                "instance": "function",
                "parameters": [
                    {
                        "name": "HASH_MODE",
                        "type": "int",
                        "description": "0 for radix and 1 for Jenkin's Lookup3 hash."
                    },
                    {
                        "name": "KEYW",
                        "type": "int",
                        "description": "width of key, in bit."
                    },
                    {
                        "name": "PW",
                        "type": "int",
                        "description": "width of max payload, in bit."
                    },
                    {
                        "name": "S_PW",
                        "type": "int",
                        "description": "width of payload of small table."
                    },
                    {
                        "name": "B_PW",
                        "type": "int",
                        "description": "width of payload of big table."
                    },
                    {
                        "name": "HASHWH",
                        "type": "int",
                        "description": "number of hash bits used for PU/buffer selection, 1~3."
                    },
                    {
                        "name": "HASHWL",
                        "type": "int",
                        "description": "number of hash bits used for hash-table in PU."
                    },
                    {
                        "name": "ARW",
                        "type": "int",
                        "description": "width of address, larger than 24 is suggested."
                    },
                    {
                        "name": "CH_NM",
                        "type": "int",
                        "description": "number of input channels, 1,2,4."
                    }
                ],
                "ports": [
                    {
                        "name": "k0_strm_arry",
                        "direction": "",
                        "type": "hls::stream< ap_uint< KEYW > >[CH_NM],"
                    },
                    {
                        "name": "p0_strm_arry",
                        "direction": "",
                        "type": "hls::stream< ap_uint< PW > >[CH_NM],"
                    },
                    {
                        "name": "e0_strm_arry",
                        "direction": "",
                        "type": "hls::stream< bool >[CH_NM],"
                    },
                    {
                        "name": "htb0_buf",
                        "direction": "",
                        "type": "ap_uint< 256 > *"
                    },
                    {
                        "name": "htb1_buf",
                        "direction": "",
                        "type": "ap_uint< 256 > *"
                    },
                    {
                        "name": "htb2_buf",
                        "direction": "",
                        "type": "ap_uint< 256 > *"
                    },
                    {
                        "name": "htb3_buf",
                        "direction": "",
                        "type": "ap_uint< 256 > *"
                    },
                    {
                        "name": "htb4_buf",
                        "direction": "",
                        "type": "ap_uint< 256 > *"
                    },
                    {
                        "name": "htb5_buf",
                        "direction": "",
                        "type": "ap_uint< 256 > *"
                    },
                    {
                        "name": "htb6_buf",
                        "direction": "",
                        "type": "ap_uint< 256 > *"
                    },
                    {
                        "name": "htb7_buf",
                        "direction": "",
                        "type": "ap_uint< 256 > *"
                    },
                    {
                        "name": "stb0_buf",
                        "direction": "",
                        "type": "ap_uint< 256 > *"
                    },
                    {
                        "name": "stb1_buf",
                        "direction": "",
                        "type": "ap_uint< 256 > *"
                    },
                    {
                        "name": "stb2_buf",
                        "direction": "",
                        "type": "ap_uint< 256 > *"
                    },
                    {
                        "name": "stb3_buf",
                        "direction": "",
                        "type": "ap_uint< 256 > *"
                    },
                    {
                        "name": "stb4_buf",
                        "direction": "",
                        "type": "ap_uint< 256 > *"
                    },
                    {
                        "name": "stb5_buf",
                        "direction": "",
                        "type": "ap_uint< 256 > *"
                    },
                    {
                        "name": "stb6_buf",
                        "direction": "",
                        "type": "ap_uint< 256 > *"
                    },
                    {
                        "name": "stb7_buf",
                        "direction": "",
                        "type": "ap_uint< 256 > *"
                    },
                    {
                        "name": "pu_begin_status_strms",
                        "direction": "",
                        "type": "hls::stream< ap_uint< 32 > > &"
                    },
                    {
                        "name": "pu_end_status_strms",
                        "direction": "",
                        "type": "hls::stream< ap_uint< 32 > > &"
                    },
                    {
                        "name": "j_strm",
                        "direction": "",
                        "type": "hls::stream< ap_uint< KEYW+S_PW+B_PW > > &"
                    },
                    {
                        "name": "j_e_strm",
                        "direction": "",
                        "type": "hls::stream< bool > &j_e_s"
                    }
                ]
            }
        },
        {
            "api_name": "xf::database::hashGroupAggregate",
            "spec": {
                "schema": "vitis_libraries_api_list_schema-1.0",
                "api_name": "xf::database::hashGroupAggregate",
                "display_name": "hashGroupAggregate",
                "brief": "Generic hash group aggregate primitive.",
                "target_domain": "",
                "header_file_name": [
                    "hash_group_aggregate.hpp"
                ],
                "search_paths": [
                    "L1/include/hw/xf_database"
                ],
                "instance": "function",
                "parameters": [
                    {
                        "name": "_WKey",
                        "type": "int",
                        "description": "width of key, in bit."
                    },
                    {
                        "name": "_KeyNM",
                        "type": "int",
                        "description": "maximum number of key column, maximum is 8."
                    },
                    {
                        "name": "_WPay",
                        "type": "int",
                        "description": "width of max payload, in bit."
                    },
                    {
                        "name": "_PayNM",
                        "type": "int",
                        "description": "maximum number of payload column, maximum is 8."
                    },
                    {
                        "name": "_HashMode",
                        "type": "int",
                        "description": "control hash algotithm, 0: radix 1: lookup3."
                    },
                    {
                        "name": "_WHashHigh",
                        "type": "int",
                        "description": "number of hash bits used for dispatch pu."
                    },
                    {
                        "name": "_WHashLow",
                        "type": "int",
                        "description": "number of hash bits used for hash-table."
                    },
                    {
                        "name": "_CHNM",
                        "type": "int",
                        "description": "number of input channels."
                    },
                    {
                        "name": "_Wcnt",
                        "type": "int"
                    },
                    {
                        "name": "_WBuffer",
                        "type": "int",
                        "description": "width of HBM/DDR buffer(ping_buf and pong_buf)."
                    },
                    {
                        "name": "_BurstLenW",
                        "type": "int",
                        "description": "burst len of writting unhandled data."
                    },
                    {
                        "name": "_BurstLenR",
                        "type": "int",
                        "description": "burst len of reloading unhandled data."
                    }
                ],
                "ports": [
                    {
                        "name": "strm_key_in",
                        "direction": "",
                        "type": "hls::stream< ap_uint< _WKey > >[_CHNM][_KeyNM],"
                    },
                    {
                        "name": "strm_pld_in",
                        "direction": "",
                        "type": "hls::stream< ap_uint< _WPay > >[_CHNM][_PayNM],"
                    },
                    {
                        "name": "strm_e_in",
                        "direction": "",
                        "type": "hls::stream< bool >[_CHNM],"
                    },
                    {
                        "name": "config",
                        "direction": "",
                        "type": "hls::stream< ap_uint< 32 > > &"
                    },
                    {
                        "name": "result_info",
                        "direction": "",
                        "type": "hls::stream< ap_uint< 32 > > &"
                    },
                    {
                        "name": "ping_buf0",
                        "direction": "",
                        "type": "ap_uint< _WBuffer > *"
                    },
                    {
                        "name": "ping_buf1",
                        "direction": "",
                        "type": "ap_uint< _WBuffer > *"
                    },
                    {
                        "name": "ping_buf2",
                        "direction": "",
                        "type": "ap_uint< _WBuffer > *"
                    },
                    {
                        "name": "ping_buf3",
                        "direction": "",
                        "type": "ap_uint< _WBuffer > *"
                    },
                    {
                        "name": "pong_buf0",
                        "direction": "",
                        "type": "ap_uint< _WBuffer > *"
                    },
                    {
                        "name": "pong_buf1",
                        "direction": "",
                        "type": "ap_uint< _WBuffer > *"
                    },
                    {
                        "name": "pong_buf2",
                        "direction": "",
                        "type": "ap_uint< _WBuffer > *"
                    },
                    {
                        "name": "pong_buf3",
                        "direction": "",
                        "type": "ap_uint< _WBuffer > *"
                    },
                    {
                        "name": "aggr_key_out",
                        "direction": "",
                        "type": "hls::stream< ap_uint< _WKey > >[_KeyNM],"
                    },
                    {
                        "name": "aggr_pld_out",
                        "direction": "",
                        "type": "hls::stream< ap_uint< _WPay > >[3][_PayNM],"
                    },
                    {
                        "name": "strm_e_out",
                        "direction": "",
                        "type": "hls::stream< bool > &strm_"
                    }
                ]
            }
        },
        {
            "api_name": "xf::database::hashJoinMPU",
            "spec": {
                "schema": "vitis_libraries_api_list_schema-1.0",
                "api_name": "xf::database::hashJoinMPU",
                "display_name": "hashJoinMPU",
                "brief": "Multi-PU Hash-Join primitive, using multiple DDR/HBM buffers.",
                "target_domain": "",
                "header_file_name": [
                    "hash_join_v2.hpp"
                ],
                "search_paths": [
                    "L1/include/hw/xf_database"
                ],
                "instance": "function",
                "parameters": [
                    {
                        "name": "HASH_MODE",
                        "type": "int",
                        "description": "0 for radix and 1 for Jenkin's Lookup3 hash."
                    },
                    {
                        "name": "KEYW",
                        "type": "int",
                        "description": "width of key, in bit."
                    },
                    {
                        "name": "PW",
                        "type": "int",
                        "description": "width of max payload, in bit."
                    },
                    {
                        "name": "S_PW",
                        "type": "int",
                        "description": "width of payload of small table."
                    },
                    {
                        "name": "B_PW",
                        "type": "int",
                        "description": "width of payload of big table."
                    },
                    {
                        "name": "HASHWH",
                        "type": "int",
                        "description": "number of hash bits used for PU/buffer selection, 1~3."
                    },
                    {
                        "name": "HASHWL",
                        "type": "int",
                        "description": "number of hash bits used for hash-table in PU."
                    },
                    {
                        "name": "ARW",
                        "type": "int",
                        "description": "width of address, log2(small table max num of rows)."
                    },
                    {
                        "name": "BFW",
                        "type": "int",
                        "description": "width of buffer."
                    },
                    {
                        "name": "CH_NM",
                        "type": "int",
                        "description": "number of input channels, 1,2,4."
                    },
                    {
                        "name": "BF_W",
                        "type": "int",
                        "description": "bloom-filter hash width."
                    },
                    {
                        "name": "EN_BF",
                        "type": "int",
                        "description": "bloom-filter switch, 0 for off, 1 for on."
                    }
                ],
                "ports": [
                    {
                        "name": "k0_strm_arry",
                        "direction": "",
                        "type": "hls::stream< ap_uint< KEYW > >[CH_NM],"
                    },
                    {
                        "name": "p0_strm_arry",
                        "direction": "",
                        "type": "hls::stream< ap_uint< PW > >[CH_NM],"
                    },
                    {
                        "name": "e0_strm_arry",
                        "direction": "",
                        "type": "hls::stream< bool >[CH_NM],"
                    },
                    {
                        "name": "stb0_buf",
                        "direction": "",
                        "type": "ap_uint< BFW > *"
                    },
                    {
                        "name": "stb1_buf",
                        "direction": "",
                        "type": "ap_uint< BFW > *"
                    },
                    {
                        "name": "stb2_buf",
                        "direction": "",
                        "type": "ap_uint< BFW > *"
                    },
                    {
                        "name": "stb3_buf",
                        "direction": "",
                        "type": "ap_uint< BFW > *"
                    },
                    {
                        "name": "stb4_buf",
                        "direction": "",
                        "type": "ap_uint< BFW > *"
                    },
                    {
                        "name": "stb5_buf",
                        "direction": "",
                        "type": "ap_uint< BFW > *"
                    },
                    {
                        "name": "stb6_buf",
                        "direction": "",
                        "type": "ap_uint< BFW > *"
                    },
                    {
                        "name": "stb7_buf",
                        "direction": "",
                        "type": "ap_uint< BFW > *"
                    },
                    {
                        "name": "j1_strm",
                        "direction": "",
                        "type": "hls::stream< ap_uint< S_PW+B_PW > > &"
                    },
                    {
                        "name": "e5_strm",
                        "direction": "",
                        "type": "hls::stream< bool > &e5_s"
                    }
                ]
            }
        },
        {
            "api_name": "xf::database::hashJoinV3",
            "spec": {
                "schema": "vitis_libraries_api_list_schema-1.0",
                "api_name": "xf::database::hashJoinV3",
                "display_name": "hashJoinV3",
                "brief": "Hash-Join v3 primitive, it takes more resourse than",
                "target_domain": "",
                "header_file_name": [
                    "hash_join_v3.hpp"
                ],
                "search_paths": [
                    "L1/include/hw/xf_database"
                ],
                "instance": "function",
                "parameters": [
                    {
                        "name": "HASH_MODE",
                        "type": "int",
                        "description": "0 for radix and 1 for Jenkin's Lookup3 hash."
                    },
                    {
                        "name": "KEYW",
                        "type": "int",
                        "description": "width of key, in bit."
                    },
                    {
                        "name": "PW",
                        "type": "int",
                        "description": "width of max payload, in bit."
                    },
                    {
                        "name": "S_PW",
                        "type": "int",
                        "description": "width of payload of small table."
                    },
                    {
                        "name": "B_PW",
                        "type": "int",
                        "description": "width of payload of big table."
                    },
                    {
                        "name": "HASHWH",
                        "type": "int",
                        "description": "number of hash bits used for PU/buffer selection, 1~3."
                    },
                    {
                        "name": "HASHWL",
                        "type": "int",
                        "description": "number of hash bits used for hash-table in PU."
                    },
                    {
                        "name": "ARW",
                        "type": "int",
                        "description": "width of address, larger than 24 is suggested."
                    },
                    {
                        "name": "CH_NM",
                        "type": "int",
                        "description": "number of input channels, 1,2,4."
                    }
                ],
                "ports": [
                    {
                        "name": "k0_strm_arry",
                        "direction": "",
                        "type": "hls::stream< ap_uint< KEYW > >[CH_NM],"
                    },
                    {
                        "name": "p0_strm_arry",
                        "direction": "",
                        "type": "hls::stream< ap_uint< PW > >[CH_NM],"
                    },
                    {
                        "name": "e0_strm_arry",
                        "direction": "",
                        "type": "hls::stream< bool >[CH_NM],"
                    },
                    {
                        "name": "htb0_buf",
                        "direction": "",
                        "type": "ap_uint< 256 > *"
                    },
                    {
                        "name": "htb1_buf",
                        "direction": "",
                        "type": "ap_uint< 256 > *"
                    },
                    {
                        "name": "htb2_buf",
                        "direction": "",
                        "type": "ap_uint< 256 > *"
                    },
                    {
                        "name": "htb3_buf",
                        "direction": "",
                        "type": "ap_uint< 256 > *"
                    },
                    {
                        "name": "htb4_buf",
                        "direction": "",
                        "type": "ap_uint< 256 > *"
                    },
                    {
                        "name": "htb5_buf",
                        "direction": "",
                        "type": "ap_uint< 256 > *"
                    },
                    {
                        "name": "htb6_buf",
                        "direction": "",
                        "type": "ap_uint< 256 > *"
                    },
                    {
                        "name": "htb7_buf",
                        "direction": "",
                        "type": "ap_uint< 256 > *"
                    },
                    {
                        "name": "stb0_buf",
                        "direction": "",
                        "type": "ap_uint< 256 > *"
                    },
                    {
                        "name": "stb1_buf",
                        "direction": "",
                        "type": "ap_uint< 256 > *"
                    },
                    {
                        "name": "stb2_buf",
                        "direction": "",
                        "type": "ap_uint< 256 > *"
                    },
                    {
                        "name": "stb3_buf",
                        "direction": "",
                        "type": "ap_uint< 256 > *"
                    },
                    {
                        "name": "stb4_buf",
                        "direction": "",
                        "type": "ap_uint< 256 > *"
                    },
                    {
                        "name": "stb5_buf",
                        "direction": "",
                        "type": "ap_uint< 256 > *"
                    },
                    {
                        "name": "stb6_buf",
                        "direction": "",
                        "type": "ap_uint< 256 > *"
                    },
                    {
                        "name": "stb7_buf",
                        "direction": "",
                        "type": "ap_uint< 256 > *"
                    },
                    {
                        "name": "pu_begin_status_strms",
                        "direction": "",
                        "type": "hls::stream< ap_uint< 32 > > &"
                    },
                    {
                        "name": "pu_end_status_strms",
                        "direction": "",
                        "type": "hls::stream< ap_uint< 32 > > &"
                    },
                    {
                        "name": "j_strm",
                        "direction": "",
                        "type": "hls::stream< ap_uint< KEYW+S_PW+B_PW > > &"
                    },
                    {
                        "name": "j_e_strm",
                        "direction": "",
                        "type": "hls::stream< bool > &j_e_s"
                    }
                ]
            }
        },
        {
            "api_name": "xf::database::hashBuildProbeV3",
            "spec": {
                "schema": "vitis_libraries_api_list_schema-1.0",
                "api_name": "xf::database::hashBuildProbeV3",
                "display_name": "hashBuildProbeV3",
                "brief": "Hash-Build-Probe v3 primitive, it can perform hash build and hash probe separately. It needs two call of kernel to perform build and probe seperately. There is a control flag to decide buld or probe. This primitive supports multiple build and mutiple probe, for example, you can scadule a workflow as: build0->build1->probe0->probe1->build2->build3->probe3...",
                "target_domain": "",
                "header_file_name": [
                    "hash_join_v3.hpp"
                ],
                "search_paths": [
                    "L1/include/hw/xf_database"
                ],
                "instance": "function",
                "parameters": [
                    {
                        "name": "HASH_MODE",
                        "type": "int",
                        "description": "0 for radix and 1 for Jenkin's Lookup3 hash."
                    },
                    {
                        "name": "KEYW",
                        "type": "int",
                        "description": "width of key, in bit."
                    },
                    {
                        "name": "PW",
                        "type": "int",
                        "description": "width of max payload, in bit."
                    },
                    {
                        "name": "S_PW",
                        "type": "int",
                        "description": "width of payload of small table."
                    },
                    {
                        "name": "B_PW",
                        "type": "int",
                        "description": "width of payload of big table."
                    },
                    {
                        "name": "HASHWH",
                        "type": "int",
                        "description": "number of hash bits used for PU/buffer selection, 1~3."
                    },
                    {
                        "name": "HASHWL",
                        "type": "int",
                        "description": "number of hash bits used for hash-table in PU."
                    },
                    {
                        "name": "ARW",
                        "type": "int",
                        "description": "width of address, log2(small table max num of rows)."
                    },
                    {
                        "name": "CH_NM",
                        "type": "int",
                        "description": "number of input channels, 1,2,4."
                    },
                    {
                        "name": "BF_W",
                        "type": "int",
                        "description": "bloom-filter hash width."
                    },
                    {
                        "name": "EN_BF",
                        "type": "int",
                        "description": "bloom-filter switch, 0 for off, 1 for on."
                    }
                ],
                "ports": [
                    {
                        "name": "build_probe_flag",
                        "direction": "",
                        "type": "bool &"
                    },
                    {
                        "name": "k0_strm_arry",
                        "direction": "",
                        "type": "hls::stream< ap_uint< KEYW > >[CH_NM],"
                    },
                    {
                        "name": "p0_strm_arry",
                        "direction": "",
                        "type": "hls::stream< ap_uint< PW > >[CH_NM],"
                    },
                    {
                        "name": "e0_strm_arry",
                        "direction": "",
                        "type": "hls::stream< bool >[CH_NM],"
                    },
                    {
                        "name": "htb0_buf",
                        "direction": "",
                        "type": "ap_uint< 256 > *"
                    },
                    {
                        "name": "htb1_buf",
                        "direction": "",
                        "type": "ap_uint< 256 > *"
                    },
                    {
                        "name": "htb2_buf",
                        "direction": "",
                        "type": "ap_uint< 256 > *"
                    },
                    {
                        "name": "htb3_buf",
                        "direction": "",
                        "type": "ap_uint< 256 > *"
                    },
                    {
                        "name": "htb4_buf",
                        "direction": "",
                        "type": "ap_uint< 256 > *"
                    },
                    {
                        "name": "htb5_buf",
                        "direction": "",
                        "type": "ap_uint< 256 > *"
                    },
                    {
                        "name": "htb6_buf",
                        "direction": "",
                        "type": "ap_uint< 256 > *"
                    },
                    {
                        "name": "htb7_buf",
                        "direction": "",
                        "type": "ap_uint< 256 > *"
                    },
                    {
                        "name": "stb0_buf",
                        "direction": "",
                        "type": "ap_uint< 256 > *"
                    },
                    {
                        "name": "stb1_buf",
                        "direction": "",
                        "type": "ap_uint< 256 > *"
                    },
                    {
                        "name": "stb2_buf",
                        "direction": "",
                        "type": "ap_uint< 256 > *"
                    },
                    {
                        "name": "stb3_buf",
                        "direction": "",
                        "type": "ap_uint< 256 > *"
                    },
                    {
                        "name": "stb4_buf",
                        "direction": "",
                        "type": "ap_uint< 256 > *"
                    },
                    {
                        "name": "stb5_buf",
                        "direction": "",
                        "type": "ap_uint< 256 > *"
                    },
                    {
                        "name": "stb6_buf",
                        "direction": "",
                        "type": "ap_uint< 256 > *"
                    },
                    {
                        "name": "stb7_buf",
                        "direction": "",
                        "type": "ap_uint< 256 > *"
                    },
                    {
                        "name": "pu_begin_status_strms",
                        "direction": "",
                        "type": "hls::stream< ap_uint< 32 > > &"
                    },
                    {
                        "name": "pu_end_status_strms",
                        "direction": "",
                        "type": "hls::stream< ap_uint< 32 > > &"
                    },
                    {
                        "name": "j_strm",
                        "direction": "",
                        "type": "hls::stream< ap_uint< KEYW+S_PW+B_PW > > &"
                    },
                    {
                        "name": "j_e_strm",
                        "direction": "",
                        "type": "hls::stream< bool > &j_e_s"
                    }
                ]
            }
        },
        {
            "api_name": "xf::database::hashJoinV4",
            "spec": {
                "schema": "vitis_libraries_api_list_schema-1.0",
                "api_name": "xf::database::hashJoinV4",
                "display_name": "hashJoinV4",
                "brief": "Hash-Join v4 primitive, using bloom filter to enhance performance of hash join.",
                "target_domain": "",
                "header_file_name": [
                    "hash_join_v4.hpp"
                ],
                "search_paths": [
                    "L1/include/hw/xf_database"
                ],
                "instance": "function",
                "parameters": [
                    {
                        "name": "HASH_MODE",
                        "type": "int",
                        "description": "0 for radix and 1 for Jenkin's Lookup3 hash."
                    },
                    {
                        "name": "KEYW",
                        "type": "int",
                        "description": "width of key, in bit."
                    },
                    {
                        "name": "PW",
                        "type": "int",
                        "description": "width of max payload, in bit."
                    },
                    {
                        "name": "S_PW",
                        "type": "int",
                        "description": "width of payload of small table."
                    },
                    {
                        "name": "B_PW",
                        "type": "int",
                        "description": "width of payload of big table."
                    },
                    {
                        "name": "HASHWH",
                        "type": "int",
                        "description": "number of hash bits used for PU/buffer selection, 1~3."
                    },
                    {
                        "name": "HASHWL",
                        "type": "int",
                        "description": "number of hash bits used for hash-table in PU."
                    },
                    {
                        "name": "ARW",
                        "type": "int",
                        "description": "width of address, log2(small table max num of rows)."
                    },
                    {
                        "name": "CH_NM",
                        "type": "int",
                        "description": "number of input channels, 1,2,4."
                    },
                    {
                        "name": "BF_HASH_NM",
                        "type": "int",
                        "description": "number of bloom filter, 1,2,3."
                    },
                    {
                        "name": "BFW",
                        "type": "int"
                    },
                    {
                        "name": "EN_BF",
                        "type": "bool",
                        "description": "bloom-filter switch, 0 for off, 1 for on."
                    }
                ],
                "ports": [
                    {
                        "name": "k0_strm_arry",
                        "direction": "",
                        "type": "hls::stream< ap_uint< KEYW > >[CH_NM],"
                    },
                    {
                        "name": "p0_strm_arry",
                        "direction": "",
                        "type": "hls::stream< ap_uint< PW > >[CH_NM],"
                    },
                    {
                        "name": "e0_strm_arry",
                        "direction": "",
                        "type": "hls::stream< bool >[CH_NM],"
                    },
                    {
                        "name": "htb0_buf",
                        "direction": "",
                        "type": "ap_uint< 64 > *"
                    },
                    {
                        "name": "htb1_buf",
                        "direction": "",
                        "type": "ap_uint< 64 > *"
                    },
                    {
                        "name": "htb2_buf",
                        "direction": "",
                        "type": "ap_uint< 64 > *"
                    },
                    {
                        "name": "htb3_buf",
                        "direction": "",
                        "type": "ap_uint< 64 > *"
                    },
                    {
                        "name": "htb4_buf",
                        "direction": "",
                        "type": "ap_uint< 64 > *"
                    },
                    {
                        "name": "htb5_buf",
                        "direction": "",
                        "type": "ap_uint< 64 > *"
                    },
                    {
                        "name": "htb6_buf",
                        "direction": "",
                        "type": "ap_uint< 64 > *"
                    },
                    {
                        "name": "htb7_buf",
                        "direction": "",
                        "type": "ap_uint< 64 > *"
                    },
                    {
                        "name": "stb0_buf",
                        "direction": "",
                        "type": "ap_uint< 64 > *"
                    },
                    {
                        "name": "stb1_buf",
                        "direction": "",
                        "type": "ap_uint< 64 > *"
                    },
                    {
                        "name": "stb2_buf",
                        "direction": "",
                        "type": "ap_uint< 64 > *"
                    },
                    {
                        "name": "stb3_buf",
                        "direction": "",
                        "type": "ap_uint< 64 > *"
                    },
                    {
                        "name": "stb4_buf",
                        "direction": "",
                        "type": "ap_uint< 64 > *"
                    },
                    {
                        "name": "stb5_buf",
                        "direction": "",
                        "type": "ap_uint< 64 > *"
                    },
                    {
                        "name": "stb6_buf",
                        "direction": "",
                        "type": "ap_uint< 64 > *"
                    },
                    {
                        "name": "stb7_buf",
                        "direction": "",
                        "type": "ap_uint< 64 > *"
                    },
                    {
                        "name": "pu_begin_status_strms",
                        "direction": "",
                        "type": "hls::stream< ap_uint< 32 > > &"
                    },
                    {
                        "name": "pu_end_status_strms",
                        "direction": "",
                        "type": "hls::stream< ap_uint< 32 > > &"
                    },
                    {
                        "name": "j_strm",
                        "direction": "",
                        "type": "hls::stream< ap_uint< KEYW+S_PW+B_PW > > &"
                    },
                    {
                        "name": "j_e_strm",
                        "direction": "",
                        "type": "hls::stream< bool > &j_e_s"
                    }
                ]
            }
        },
        {
            "api_name": "xf::database::hashBuildProbeV4",
            "spec": {
                "schema": "vitis_libraries_api_list_schema-1.0",
                "api_name": "xf::database::hashBuildProbeV4",
                "display_name": "hashBuildProbeV4",
                "brief": "Hash-Build-Probe v4 primitive. Compared with",
                "target_domain": "",
                "header_file_name": [
                    "hash_join_v4.hpp"
                ],
                "search_paths": [
                    "L1/include/hw/xf_database"
                ],
                "instance": "function",
                "parameters": [
                    {
                        "name": "KEYW",
                        "type": "int",
                        "description": "width of key, in bit."
                    },
                    {
                        "name": "PW",
                        "type": "int",
                        "description": "width of max payload, in bit."
                    },
                    {
                        "name": "S_PW",
                        "type": "int",
                        "description": "width of payload of small table."
                    },
                    {
                        "name": "B_PW",
                        "type": "int",
                        "description": "width of payload of big table."
                    },
                    {
                        "name": "HASHWH",
                        "type": "int",
                        "description": "number of hash bits used for PU/buffer selection, 1~3."
                    },
                    {
                        "name": "HASHWL",
                        "type": "int",
                        "description": "number of hash bits used for hash-table in PU."
                    },
                    {
                        "name": "HASHO",
                        "type": "int",
                        "description": "number of hash bits used for overflow hash counter, 8-12."
                    },
                    {
                        "name": "ARW",
                        "type": "int",
                        "description": "width of address, log2(small table max num of rows)."
                    },
                    {
                        "name": "CH_NM",
                        "type": "int",
                        "description": "number of input channels, 1,2,4."
                    },
                    {
                        "name": "BF_HASH_NM",
                        "type": "int",
                        "description": "number of hash functions in bloom filter, 1,2,3."
                    },
                    {
                        "name": "BFW",
                        "type": "int",
                        "description": "bloom-filter hash width."
                    },
                    {
                        "name": "EN_BF",
                        "type": "int",
                        "description": "bloom-filter switch, 0 for off, 1 for on."
                    }
                ],
                "ports": [
                    {
                        "name": "build_probe_flag",
                        "direction": "",
                        "type": "bool &"
                    },
                    {
                        "name": "k0_strm_arry",
                        "direction": "",
                        "type": "hls::stream< ap_uint< KEYW > >[CH_NM],"
                    },
                    {
                        "name": "p0_strm_arry",
                        "direction": "",
                        "type": "hls::stream< ap_uint< PW > >[CH_NM],"
                    },
                    {
                        "name": "e0_strm_arry",
                        "direction": "",
                        "type": "hls::stream< bool >[CH_NM],"
                    },
                    {
                        "name": "htb0_buf",
                        "direction": "",
                        "type": "ap_uint< 64 > *"
                    },
                    {
                        "name": "htb1_buf",
                        "direction": "",
                        "type": "ap_uint< 64 > *"
                    },
                    {
                        "name": "htb2_buf",
                        "direction": "",
                        "type": "ap_uint< 64 > *"
                    },
                    {
                        "name": "htb3_buf",
                        "direction": "",
                        "type": "ap_uint< 64 > *"
                    },
                    {
                        "name": "htb4_buf",
                        "direction": "",
                        "type": "ap_uint< 64 > *"
                    },
                    {
                        "name": "htb5_buf",
                        "direction": "",
                        "type": "ap_uint< 64 > *"
                    },
                    {
                        "name": "htb6_buf",
                        "direction": "",
                        "type": "ap_uint< 64 > *"
                    },
                    {
                        "name": "htb7_buf",
                        "direction": "",
                        "type": "ap_uint< 64 > *"
                    },
                    {
                        "name": "stb0_buf",
                        "direction": "",
                        "type": "ap_uint< 64 > *"
                    },
                    {
                        "name": "stb1_buf",
                        "direction": "",
                        "type": "ap_uint< 64 > *"
                    },
                    {
                        "name": "stb2_buf",
                        "direction": "",
                        "type": "ap_uint< 64 > *"
                    },
                    {
                        "name": "stb3_buf",
                        "direction": "",
                        "type": "ap_uint< 64 > *"
                    },
                    {
                        "name": "stb4_buf",
                        "direction": "",
                        "type": "ap_uint< 64 > *"
                    },
                    {
                        "name": "stb5_buf",
                        "direction": "",
                        "type": "ap_uint< 64 > *"
                    },
                    {
                        "name": "stb6_buf",
                        "direction": "",
                        "type": "ap_uint< 64 > *"
                    },
                    {
                        "name": "stb7_buf",
                        "direction": "",
                        "type": "ap_uint< 64 > *"
                    },
                    {
                        "name": "pu_begin_status_strms",
                        "direction": "",
                        "type": "hls::stream< ap_uint< 32 > > &"
                    },
                    {
                        "name": "pu_end_status_strms",
                        "direction": "",
                        "type": "hls::stream< ap_uint< 32 > > &"
                    },
                    {
                        "name": "j_strm",
                        "direction": "",
                        "type": "hls::stream< ap_uint< KEYW+S_PW+B_PW > > &"
                    },
                    {
                        "name": "j_e_strm",
                        "direction": "",
                        "type": "hls::stream< bool > &j_e_s"
                    }
                ]
            }
        },
        {
            "api_name": "xf::database::hashLookup3",
            "spec": {
                "schema": "vitis_libraries_api_list_schema-1.0",
                "api_name": "xf::database::hashLookup3",
                "display_name": "hashLookup3",
                "brief": "lookup3 algorithm, 64-bit hash. II=1 when W<=96, otherwise II=(W/96).",
                "target_domain": "",
                "header_file_name": [
                    "hash_lookup3.hpp"
                ],
                "search_paths": [
                    "L1/include/hw/xf_database"
                ],
                "instance": "function",
                "parameters": [
                    {
                        "name": "W",
                        "type": "int",
                        "description": "the bit width of ap_uint type for input message stream."
                    }
                ],
                "ports": [
                    {
                        "name": "key_strm",
                        "direction": "",
                        "type": "hls::stream< ap_uint< W > > &"
                    },
                    {
                        "name": "hash_strm",
                        "direction": "",
                        "type": "hls::stream< ap_uint< 64 > > &"
                    }
                ]
            }
        },
        {
            "api_name": "xf::database::hashMultiJoin",
            "spec": {
                "schema": "vitis_libraries_api_list_schema-1.0",
                "api_name": "xf::database::hashMultiJoin",
                "display_name": "hashMultiJoin",
                "brief": "Multi-PU Hash-Multi-Join primitive, using multiple DDR/HBM buffers.",
                "target_domain": "",
                "header_file_name": [
                    "hash_multi_join.hpp"
                ],
                "search_paths": [
                    "L1/include/hw/xf_database"
                ],
                "instance": "function",
                "parameters": [
                    {
                        "name": "HASH_MODE",
                        "type": "int",
                        "description": "0 for radix and 1 for Jenkin's Lookup3 hash."
                    },
                    {
                        "name": "KEYW",
                        "type": "int",
                        "description": "width of key, in bit."
                    },
                    {
                        "name": "PW",
                        "type": "int",
                        "description": "width of max payload, in bit."
                    },
                    {
                        "name": "S_PW",
                        "type": "int",
                        "description": "width of payload of small table."
                    },
                    {
                        "name": "B_PW",
                        "type": "int",
                        "description": "width of payload of big table."
                    },
                    {
                        "name": "HASHWH",
                        "type": "int",
                        "description": "number of hash bits used for PU/buffer selection, 1~3."
                    },
                    {
                        "name": "HASHWL",
                        "type": "int",
                        "description": "number of hash bits used for hash-table in PU."
                    },
                    {
                        "name": "ARW",
                        "type": "int",
                        "description": "width of address, larger than 24 is suggested."
                    },
                    {
                        "name": "CH_NM",
                        "type": "int",
                        "description": "number of input channels, 1,2,4."
                    }
                ],
                "ports": [
                    {
                        "name": "join_flag_strm",
                        "direction": "",
                        "type": "hls::stream< ap_uint< 3 > > &"
                    },
                    {
                        "name": "k0_strm_arry",
                        "direction": "",
                        "type": "hls::stream< ap_uint< KEYW > >[CH_NM],"
                    },
                    {
                        "name": "p0_strm_arry",
                        "direction": "",
                        "type": "hls::stream< ap_uint< PW > >[CH_NM],"
                    },
                    {
                        "name": "e0_strm_arry",
                        "direction": "",
                        "type": "hls::stream< bool >[CH_NM],"
                    },
                    {
                        "name": "htb0_buf",
                        "direction": "",
                        "type": "ap_uint< 256 > *"
                    },
                    {
                        "name": "htb1_buf",
                        "direction": "",
                        "type": "ap_uint< 256 > *"
                    },
                    {
                        "name": "htb2_buf",
                        "direction": "",
                        "type": "ap_uint< 256 > *"
                    },
                    {
                        "name": "htb3_buf",
                        "direction": "",
                        "type": "ap_uint< 256 > *"
                    },
                    {
                        "name": "htb4_buf",
                        "direction": "",
                        "type": "ap_uint< 256 > *"
                    },
                    {
                        "name": "htb5_buf",
                        "direction": "",
                        "type": "ap_uint< 256 > *"
                    },
                    {
                        "name": "htb6_buf",
                        "direction": "",
                        "type": "ap_uint< 256 > *"
                    },
                    {
                        "name": "htb7_buf",
                        "direction": "",
                        "type": "ap_uint< 256 > *"
                    },
                    {
                        "name": "stb0_buf",
                        "direction": "",
                        "type": "ap_uint< 256 > *"
                    },
                    {
                        "name": "stb1_buf",
                        "direction": "",
                        "type": "ap_uint< 256 > *"
                    },
                    {
                        "name": "stb2_buf",
                        "direction": "",
                        "type": "ap_uint< 256 > *"
                    },
                    {
                        "name": "stb3_buf",
                        "direction": "",
                        "type": "ap_uint< 256 > *"
                    },
                    {
                        "name": "stb4_buf",
                        "direction": "",
                        "type": "ap_uint< 256 > *"
                    },
                    {
                        "name": "stb5_buf",
                        "direction": "",
                        "type": "ap_uint< 256 > *"
                    },
                    {
                        "name": "stb6_buf",
                        "direction": "",
                        "type": "ap_uint< 256 > *"
                    },
                    {
                        "name": "stb7_buf",
                        "direction": "",
                        "type": "ap_uint< 256 > *"
                    },
                    {
                        "name": "pu_begin_status_strms",
                        "direction": "",
                        "type": "hls::stream< ap_uint< 32 > > &"
                    },
                    {
                        "name": "pu_end_status_strms",
                        "direction": "",
                        "type": "hls::stream< ap_uint< 32 > > &"
                    },
                    {
                        "name": "j_strm",
                        "direction": "",
                        "type": "hls::stream< ap_uint< KEYW+S_PW+B_PW > > &"
                    },
                    {
                        "name": "j_e_strm",
                        "direction": "",
                        "type": "hls::stream< bool > &j_e_s"
                    }
                ]
            }
        },
        {
            "api_name": "xf::database::hashMultiJoinBuildProbe",
            "spec": {
                "schema": "vitis_libraries_api_list_schema-1.0",
                "api_name": "xf::database::hashMultiJoinBuildProbe",
                "display_name": "hashMultiJoinBuildProbe",
                "brief": "Multi-PU Hash-Multi-Join primitive, using multiple DDR/HBM buffers.",
                "target_domain": "",
                "header_file_name": [
                    "hash_multi_join_build_probe.hpp"
                ],
                "search_paths": [
                    "L1/include/hw/xf_database"
                ],
                "instance": "function",
                "parameters": [
                    {
                        "name": "HASH_MODE",
                        "type": "int",
                        "description": "0 for radix and 1 for Jenkin's Lookup3 hash."
                    },
                    {
                        "name": "KEYW",
                        "type": "int",
                        "description": "width of key, in bit."
                    },
                    {
                        "name": "PW",
                        "type": "int",
                        "description": "width of max payload, in bit."
                    },
                    {
                        "name": "S_PW",
                        "type": "int",
                        "description": "width of payload of small table."
                    },
                    {
                        "name": "B_PW",
                        "type": "int",
                        "description": "width of payload of big table."
                    },
                    {
                        "name": "HASHWH",
                        "type": "int",
                        "description": "number of hash bits used for PU/buffer selection, 1~3."
                    },
                    {
                        "name": "HASHWL",
                        "type": "int",
                        "description": "number of hash bits used for hash-table in PU."
                    },
                    {
                        "name": "ARW",
                        "type": "int",
                        "description": "width of address, larger than 24 is suggested."
                    },
                    {
                        "name": "CH_NM",
                        "type": "int",
                        "description": "number of input channels, 1,2,4."
                    }
                ],
                "ports": [
                    {
                        "name": "join_flag_strm",
                        "direction": "",
                        "type": "bool build_probe_flag, hls::stream< ap_uint< 3 > > &"
                    },
                    {
                        "name": "k0_strm_arry",
                        "direction": "",
                        "type": "hls::stream< ap_uint< KEYW > >[CH_NM],"
                    },
                    {
                        "name": "p0_strm_arry",
                        "direction": "",
                        "type": "hls::stream< ap_uint< PW > >[CH_NM],"
                    },
                    {
                        "name": "e0_strm_arry",
                        "direction": "",
                        "type": "hls::stream< bool >[CH_NM],"
                    },
                    {
                        "name": "htb0_buf",
                        "direction": "",
                        "type": "ap_uint< 256 > *"
                    },
                    {
                        "name": "htb1_buf",
                        "direction": "",
                        "type": "ap_uint< 256 > *"
                    },
                    {
                        "name": "htb2_buf",
                        "direction": "",
                        "type": "ap_uint< 256 > *"
                    },
                    {
                        "name": "htb3_buf",
                        "direction": "",
                        "type": "ap_uint< 256 > *"
                    },
                    {
                        "name": "htb4_buf",
                        "direction": "",
                        "type": "ap_uint< 256 > *"
                    },
                    {
                        "name": "htb5_buf",
                        "direction": "",
                        "type": "ap_uint< 256 > *"
                    },
                    {
                        "name": "htb6_buf",
                        "direction": "",
                        "type": "ap_uint< 256 > *"
                    },
                    {
                        "name": "htb7_buf",
                        "direction": "",
                        "type": "ap_uint< 256 > *"
                    },
                    {
                        "name": "stb0_buf",
                        "direction": "",
                        "type": "ap_uint< 256 > *"
                    },
                    {
                        "name": "stb1_buf",
                        "direction": "",
                        "type": "ap_uint< 256 > *"
                    },
                    {
                        "name": "stb2_buf",
                        "direction": "",
                        "type": "ap_uint< 256 > *"
                    },
                    {
                        "name": "stb3_buf",
                        "direction": "",
                        "type": "ap_uint< 256 > *"
                    },
                    {
                        "name": "stb4_buf",
                        "direction": "",
                        "type": "ap_uint< 256 > *"
                    },
                    {
                        "name": "stb5_buf",
                        "direction": "",
                        "type": "ap_uint< 256 > *"
                    },
                    {
                        "name": "stb6_buf",
                        "direction": "",
                        "type": "ap_uint< 256 > *"
                    },
                    {
                        "name": "stb7_buf",
                        "direction": "",
                        "type": "ap_uint< 256 > *"
                    },
                    {
                        "name": "pu_begin_status_strms",
                        "direction": "",
                        "type": "hls::stream< ap_uint< 32 > > &"
                    },
                    {
                        "name": "pu_end_status_strms",
                        "direction": "",
                        "type": "hls::stream< ap_uint< 32 > > &"
                    },
                    {
                        "name": "j_strm",
                        "direction": "",
                        "type": "hls::stream< ap_uint< KEYW+S_PW+B_PW > > &"
                    },
                    {
                        "name": "j_e_strm",
                        "direction": "",
                        "type": "hls::stream< bool > &j_e_s"
                    }
                ]
            }
        },
        {
            "api_name": "xf::database::hashMurmur3",
            "spec": {
                "schema": "vitis_libraries_api_list_schema-1.0",
                "api_name": "xf::database::hashMurmur3",
                "display_name": "hashMurmur3",
                "brief": "murmur3 algorithm.",
                "target_domain": "",
                "header_file_name": [
                    "hash_murmur3.hpp"
                ],
                "search_paths": [
                    "L1/include/hw/xf_database"
                ],
                "instance": "function",
                "parameters": [
                    {
                        "name": "W",
                        "type": "int",
                        "description": "the bit width of ap_uint type for input message stream."
                    },
                    {
                        "name": "H",
                        "type": "int"
                    }
                ],
                "ports": [
                    {
                        "name": "key_strm",
                        "direction": "",
                        "type": "hls::stream< ap_uint< W > > &"
                    },
                    {
                        "name": "hash_strm",
                        "direction": "",
                        "type": "hls::stream< ap_uint< H > > &"
                    }
                ]
            }
        },
        {
            "api_name": "xf::database::hashMurmur3Hive",
            "spec": {
                "schema": "vitis_libraries_api_list_schema-1.0",
                "api_name": "xf::database::hashMurmur3Hive",
                "display_name": "hashMurmur3Hive",
                "brief": "Murmur3 algorithm in 64-bit version.",
                "target_domain": "",
                "header_file_name": [
                    "hash_murmur3_hive.hpp"
                ],
                "search_paths": [
                    "L1/include/hw/xf_database"
                ],
                "instance": "function",
                "parameters": [],
                "ports": [
                    {
                        "name": "keyStrm",
                        "direction": "",
                        "type": "hls::stream< ap_int< 64 > > &"
                    },
                    {
                        "name": "hashStrm",
                        "direction": "",
                        "type": "hls::stream< ap_int< 64 > > &"
                    }
                ]
            }
        },
        {
            "api_name": "xf::database::hashPartition",
            "spec": {
                "schema": "vitis_libraries_api_list_schema-1.0",
                "api_name": "xf::database::hashPartition",
                "display_name": "hashPartition",
                "brief": "Hash-Partition primitive.",
                "target_domain": "",
                "header_file_name": [
                    "hash_partition.hpp"
                ],
                "search_paths": [
                    "L1/include/hw/xf_database"
                ],
                "instance": "function",
                "parameters": [
                    {
                        "name": "HASH_MODE",
                        "type": "int",
                        "description": "0 for radix and 1 for Jenkin's Lookup3 hash."
                    },
                    {
                        "name": "KEYW",
                        "type": "int",
                        "description": "width of key, in bit."
                    },
                    {
                        "name": "PW",
                        "type": "int",
                        "description": "width of max payload, in bit."
                    },
                    {
                        "name": "EW",
                        "type": "int",
                        "description": "element data width of input table, in bit."
                    },
                    {
                        "name": "HASHWH",
                        "type": "int",
                        "description": "number of hash bits used for PU selection."
                    },
                    {
                        "name": "HASHWL",
                        "type": "int",
                        "description": "number of hash bits used for partition selection."
                    },
                    {
                        "name": "ARW",
                        "type": "int",
                        "description": "width of address for URAM"
                    },
                    {
                        "name": "CH_NM",
                        "type": "int",
                        "description": "number of input channels, 1,2,4."
                    },
                    {
                        "name": "COL_NM",
                        "type": "int",
                        "description": "number of input columns, 1~8."
                    }
                ],
                "ports": [
                    {
                        "name": "mk_on",
                        "direction": "",
                        "type": "bool"
                    },
                    {
                        "name": "depth",
                        "direction": "",
                        "type": "int"
                    },
                    {
                        "name": "bit_num_strm",
                        "direction": "",
                        "type": "hls::stream< int > &"
                    },
                    {
                        "name": "k0_strm_arry",
                        "direction": "",
                        "type": "hls::stream< ap_uint< KEYW > >[CH_NM],"
                    },
                    {
                        "name": "p0_strm_arry",
                        "direction": "",
                        "type": "hls::stream< ap_uint< PW > >[CH_NM],"
                    },
                    {
                        "name": "e0_strm_arry",
                        "direction": "",
                        "type": "hls::stream< bool >[CH_NM],"
                    },
                    {
                        "name": "o_bkpu_num_strm",
                        "direction": "",
                        "type": "hls::stream< ap_uint< 16 > > &"
                    },
                    {
                        "name": "o_nm_strm",
                        "direction": "",
                        "type": "hls::stream< ap_uint< 10 > > &"
                    },
                    {
                        "name": "o_kpld_strm",
                        "direction": "",
                        "type": "hls::stream< ap_uint< EW > >"
                    }
                ]
            }
        },
        {
            "api_name": "xf::database::hashSemiJoin",
            "spec": {
                "schema": "vitis_libraries_api_list_schema-1.0",
                "api_name": "xf::database::hashSemiJoin",
                "display_name": "hashSemiJoin",
                "brief": "Multi-PU Hash-Semi-Join primitive, using multiple DDR/HBM buffers.",
                "target_domain": "",
                "header_file_name": [
                    "hash_semi_join.hpp"
                ],
                "search_paths": [
                    "L1/include/hw/xf_database"
                ],
                "instance": "function",
                "parameters": [
                    {
                        "name": "HashMode",
                        "type": "int",
                        "description": "0 for radix and 1 for Jenkin's Lookup3 hash."
                    },
                    {
                        "name": "WKey",
                        "type": "int",
                        "description": "width of key, in bit."
                    },
                    {
                        "name": "WPayload",
                        "type": "int",
                        "description": "width of payload of outer table."
                    },
                    {
                        "name": "WHashHigh",
                        "type": "int",
                        "description": "number of hash bits used for PU/buffer selection, 1~3."
                    },
                    {
                        "name": "WhashLow",
                        "type": "int",
                        "description": "number of hash bits used for hash-table in PU."
                    },
                    {
                        "name": "WTmpBufferAddress",
                        "type": "int",
                        "description": "width of address, log2(inner table max num of rows)."
                    },
                    {
                        "name": "WTmpBuffer",
                        "type": "int",
                        "description": "width of buffer."
                    },
                    {
                        "name": "NChannels",
                        "type": "int",
                        "description": "number of input channels, 1,2,4."
                    },
                    {
                        "name": "WBloomFilter",
                        "type": "int",
                        "description": "bloom-filter hash width."
                    },
                    {
                        "name": "EnBloomFilter",
                        "type": "int",
                        "description": "bloom-filter switch, 0 for off, 1 for on."
                    }
                ],
                "ports": [
                    {
                        "name": "key_istrms",
                        "direction": "",
                        "type": "hls::stream< ap_uint< WKey > >[NChannels],"
                    },
                    {
                        "name": "payload_istrms",
                        "direction": "",
                        "type": "hls::stream< ap_uint< WPayload > >[NChannels],"
                    },
                    {
                        "name": "e0_strm_arry",
                        "direction": "",
                        "type": "hls::stream< bool >[NChannels],"
                    },
                    {
                        "name": "pu0_tmp_rwtpr",
                        "direction": "",
                        "type": "ap_uint< WTmpBuffer > *"
                    },
                    {
                        "name": "pu1_tmp_rwptr",
                        "direction": "",
                        "type": "ap_uint< WTmpBuffer > *"
                    },
                    {
                        "name": "pu2_tmp_rwptr",
                        "direction": "",
                        "type": "ap_uint< WTmpBuffer > *"
                    },
                    {
                        "name": "pu3_tmp_rwptr",
                        "direction": "",
                        "type": "ap_uint< WTmpBuffer > *"
                    },
                    {
                        "name": "pu4_tmp_rwptr",
                        "direction": "",
                        "type": "ap_uint< WTmpBuffer > *"
                    },
                    {
                        "name": "pu5_tmp_rwptr",
                        "direction": "",
                        "type": "ap_uint< WTmpBuffer > *"
                    },
                    {
                        "name": "pu6_tmp_rwptr",
                        "direction": "",
                        "type": "ap_uint< WTmpBuffer > *"
                    },
                    {
                        "name": "pu7_tmp_rwptr",
                        "direction": "",
                        "type": "ap_uint< WTmpBuffer > *"
                    },
                    {
                        "name": "join_ostrm",
                        "direction": "",
                        "type": "hls::stream< ap_uint< WPayload > > &"
                    },
                    {
                        "name": "end_ostrm",
                        "direction": "",
                        "type": "hls::stream< bool > &end_os"
                    }
                ]
            }
        },
        {
            "api_name": "xf::database::insertSort",
            "spec": {
                "schema": "vitis_libraries_api_list_schema-1.0",
                "api_name": "xf::database::insertSort",
                "display_name": "insertSort",
                "brief": "Insert sort top function.",
                "target_domain": "",
                "header_file_name": [
                    "insert_sort.hpp"
                ],
                "search_paths": [
                    "L1/include/hw/xf_database"
                ],
                "instance": "function",
                "parameters": [
                    {
                        "name": "KEY_TYPE",
                        "type": "typename",
                        "description": "the input and output key type"
                    },
                    {
                        "name": "MAX_SORT_NUMBER",
                        "type": "int",
                        "description": "the max number of the sequence can be sorted"
                    }
                ],
                "ports": [
                    {
                        "name": "kinStrm",
                        "direction": "",
                        "type": "hls::stream< KEY_TYPE > &"
                    },
                    {
                        "name": "endInStrm",
                        "direction": "",
                        "type": "hls::stream< bool > &"
                    },
                    {
                        "name": "koutStrm",
                        "direction": "",
                        "type": "hls::stream< KEY_TYPE > &"
                    },
                    {
                        "name": "endOutStrm",
                        "direction": "",
                        "type": "hls::stream< bool > &"
                    },
                    {
                        "name": "order",
                        "direction": "",
                        "type": "bool"
                    }
                ]
            }
        },
        {
            "api_name": "xf::database::mergeJoin",
            "spec": {
                "schema": "vitis_libraries_api_list_schema-1.0",
                "api_name": "xf::database::mergeJoin",
                "display_name": "mergeJoin",
                "brief": "merge join function for sorted tables without duplicated key in the left table",
                "target_domain": "",
                "header_file_name": [
                    "merge_join.hpp"
                ],
                "search_paths": [
                    "L1/include/hw/xf_database"
                ],
                "instance": "function",
                "parameters": [
                    {
                        "name": "KEY_T",
                        "type": "typename",
                        "description": "the type of the key of left table"
                    },
                    {
                        "name": "LEFT_FIELD_T",
                        "type": "typename",
                        "description": "the type of the field of left table"
                    },
                    {
                        "name": "RIGHT_FIELD_T",
                        "type": "typename",
                        "description": "the type of the field of right table"
                    }
                ],
                "ports": [
                    {
                        "name": "isascend",
                        "direction": "",
                        "type": "bool"
                    },
                    {
                        "name": "left_strm_in_key",
                        "direction": "",
                        "type": "hls::stream< KEY_T > &"
                    },
                    {
                        "name": "left_strm_in_field",
                        "direction": "",
                        "type": "hls::stream< LEFT_FIELD_T > &"
                    },
                    {
                        "name": "left_e_strm",
                        "direction": "",
                        "type": "hls::stream< bool > &"
                    },
                    {
                        "name": "right_strm_in_key",
                        "direction": "",
                        "type": "hls::stream< KEY_T > &"
                    },
                    {
                        "name": "right_strm_in_field",
                        "direction": "",
                        "type": "hls::stream< RIGHT_FIELD_T > &"
                    },
                    {
                        "name": "right_e_strm",
                        "direction": "",
                        "type": "hls::stream< bool > &"
                    },
                    {
                        "name": "left_strm_out_key",
                        "direction": "",
                        "type": "hls::stream< KEY_T > &"
                    },
                    {
                        "name": "left_strm_out_field",
                        "direction": "",
                        "type": "hls::stream< LEFT_FIELD_T > &"
                    },
                    {
                        "name": "right_strm_out_key",
                        "direction": "",
                        "type": "hls::stream< KEY_T > &"
                    },
                    {
                        "name": "right_strm_out_field",
                        "direction": "",
                        "type": "hls::stream< RIGHT_FIELD_T > &"
                    },
                    {
                        "name": "out_e_strm",
                        "direction": "",
                        "type": "hls::stream< bool > &"
                    }
                ]
            }
        },
        {
            "api_name": "xf::database::mergeLeftJoin",
            "spec": {
                "schema": "vitis_libraries_api_list_schema-1.0",
                "api_name": "xf::database::mergeLeftJoin",
                "display_name": "mergeLeftJoin",
                "brief": "merge left join function for sorted table, left table should not have duplicated keys.",
                "target_domain": "",
                "header_file_name": [
                    "merge_left_join.hpp"
                ],
                "search_paths": [
                    "L1/include/hw/xf_database"
                ],
                "instance": "function",
                "parameters": [
                    {
                        "name": "KEY_T",
                        "type": "typename",
                        "description": "the type of the key"
                    },
                    {
                        "name": "LEFT_FIELD_T",
                        "type": "typename",
                        "description": "the type of the field of left table"
                    },
                    {
                        "name": "RIGHT_FIELD_T",
                        "type": "typename",
                        "description": "the type of the field of right table"
                    }
                ],
                "ports": [
                    {
                        "name": "isascend",
                        "direction": "",
                        "type": "bool"
                    },
                    {
                        "name": "left_strm_in_key",
                        "direction": "",
                        "type": "hls::stream< KEY_T > &"
                    },
                    {
                        "name": "left_strm_in_field",
                        "direction": "",
                        "type": "hls::stream< LEFT_FIELD_T > &"
                    },
                    {
                        "name": "left_e_strm",
                        "direction": "",
                        "type": "hls::stream< bool > &"
                    },
                    {
                        "name": "right_strm_in_key",
                        "direction": "",
                        "type": "hls::stream< KEY_T > &"
                    },
                    {
                        "name": "right_strm_in_field",
                        "direction": "",
                        "type": "hls::stream< RIGHT_FIELD_T > &"
                    },
                    {
                        "name": "right_e_strm",
                        "direction": "",
                        "type": "hls::stream< bool > &"
                    },
                    {
                        "name": "left_strm_out_key",
                        "direction": "",
                        "type": "hls::stream< KEY_T > &"
                    },
                    {
                        "name": "left_strm_out_field",
                        "direction": "",
                        "type": "hls::stream< LEFT_FIELD_T > &"
                    },
                    {
                        "name": "right_strm_out_key",
                        "direction": "",
                        "type": "hls::stream< KEY_T > &"
                    },
                    {
                        "name": "right_strm_out_field",
                        "direction": "",
                        "type": "hls::stream< RIGHT_FIELD_T > &"
                    },
                    {
                        "name": "out_e_strm",
                        "direction": "",
                        "type": "hls::stream< bool > &"
                    },
                    {
                        "name": "isnull_strm",
                        "direction": "",
                        "type": "hls::stream< bool > &"
                    }
                ]
            }
        },
        {
            "api_name": "xf::database::mergeSort",
            "spec": {
                "schema": "vitis_libraries_api_list_schema-1.0",
                "api_name": "xf::database::mergeSort",
                "display_name": "mergeSort",
                "brief": "Merge sort function.",
                "target_domain": "",
                "header_file_name": [
                    "merge_sort.hpp"
                ],
                "search_paths": [
                    "L1/include/hw/xf_database"
                ],
                "instance": "function",
                "parameters": [
                    {
                        "name": "Key_Type",
                        "type": "typename"
                    }
                ],
                "ports": [
                    {
                        "name": "left_kin_strm",
                        "direction": "",
                        "type": "hls::stream< Key_Type > &"
                    },
                    {
                        "name": "left_strm_in_end",
                        "direction": "",
                        "type": "hls::stream< bool > &"
                    },
                    {
                        "name": "right_kin_strm",
                        "direction": "",
                        "type": "hls::stream< Key_Type > &"
                    },
                    {
                        "name": "right_strm_in_end",
                        "direction": "",
                        "type": "hls::stream< bool > &"
                    },
                    {
                        "name": "kout_strm",
                        "direction": "",
                        "type": "hls::stream< Key_Type > &"
                    },
                    {
                        "name": "strm_out_end",
                        "direction": "",
                        "type": "hls::stream< bool > &"
                    },
                    {
                        "name": "order",
                        "direction": "",
                        "type": "bool"
                    }
                ]
            }
        },
        {
            "api_name": "xf::database::nestedLoopJoin",
            "spec": {
                "schema": "vitis_libraries_api_list_schema-1.0",
                "api_name": "xf::database::nestedLoopJoin",
                "display_name": "nestedLoopJoin",
                "brief": "Nested loop join function.",
                "target_domain": "",
                "header_file_name": [
                    "nested_loop_join.hpp"
                ],
                "search_paths": [
                    "L1/include/hw/xf_database"
                ],
                "instance": "function",
                "parameters": [
                    {
                        "name": "CMP_NUM",
                        "type": "int"
                    },
                    {
                        "name": "KEY_T",
                        "type": "typename",
                        "description": "the type of the key of left table"
                    },
                    {
                        "name": "LEFT_FIELD_T",
                        "type": "typename",
                        "description": "the type of the field of left table"
                    },
                    {
                        "name": "RIGHT_FIELD_T",
                        "type": "typename",
                        "description": "the type of the field of right table"
                    }
                ],
                "ports": [
                    {
                        "name": "strm_in_left_key",
                        "direction": "",
                        "type": "hls::stream< KEY_T > &"
                    },
                    {
                        "name": "strm_in_left_field",
                        "direction": "",
                        "type": "hls::stream< LEFT_FIELD_T > &"
                    },
                    {
                        "name": "strm_in_left_e",
                        "direction": "",
                        "type": "hls::stream< bool > &"
                    },
                    {
                        "name": "strm_in_right_key",
                        "direction": "",
                        "type": "hls::stream< KEY_T > &"
                    },
                    {
                        "name": "strm_in_right_field",
                        "direction": "",
                        "type": "hls::stream< RIGHT_FIELD_T > &"
                    },
                    {
                        "name": "strm_in_right_e",
                        "direction": "",
                        "type": "hls::stream< bool > &"
                    },
                    {
                        "name": "strm_out_left_key",
                        "direction": "",
                        "type": "hls::stream< KEY_T >[CMP_NUM],"
                    },
                    {
                        "name": "strm_out_left_field",
                        "direction": "",
                        "type": "hls::stream< LEFT_FIELD_T >[CMP_NUM],"
                    },
                    {
                        "name": "strm_out_right_key",
                        "direction": "",
                        "type": "hls::stream< KEY_T >[CMP_NUM],"
                    },
                    {
                        "name": "strm_out_right_field",
                        "direction": "",
                        "type": "hls::stream< RIGHT_FIELD_T >[CMP_NUM],"
                    },
                    {
                        "name": "strm_out_e",
                        "direction": "",
                        "type": "hls::stream< bool >"
                    }
                ]
            }
        },
        {
            "api_name": "xf::database::scanCmpStrCol",
            "spec": {
                "schema": "vitis_libraries_api_list_schema-1.0",
                "api_name": "xf::database::scanCmpStrCol",
                "display_name": "scanCmpStrCol",
                "brief": "sacn multiple columns of string in global memory, and compare each of them with constant string",
                "target_domain": "",
                "header_file_name": [
                    "scan_cmp_str_col.hpp"
                ],
                "search_paths": [
                    "L1/include/hw/xf_database"
                ],
                "instance": "function",
                "parameters": [],
                "ports": [
                    {
                        "name": "ddr_ptr",
                        "direction": "",
                        "type": "ap_uint< 512 > *"
                    },
                    {
                        "name": "size",
                        "direction": "",
                        "type": "hls::stream< int > &"
                    },
                    {
                        "name": "num_str",
                        "direction": "",
                        "type": "hls::stream< int > &"
                    },
                    {
                        "name": "cnst_stream",
                        "direction": "",
                        "type": "hls::stream< ap_uint< 512 > > &"
                    },
                    {
                        "name": "out_stream",
                        "direction": "",
                        "type": "hls::stream< bool > &"
                    },
                    {
                        "name": "e_str_o",
                        "direction": "",
                        "type": "hls::stream< bool > &"
                    }
                ]
            }
        },
        {
            "api_name": "xf::database::scanCol",
            "spec": {
                "schema": "vitis_libraries_api_list_schema-1.0",
                "api_name": "xf::database::scanCol",
                "display_name": "scanCol",
                "brief": "Scan 1 column from DDR/HBM buffers.",
                "target_domain": "",
                "header_file_name": [
                    "scan_col.hpp"
                ],
                "search_paths": [
                    "L1/include/hw/xf_database"
                ],
                "instance": "function",
                "parameters": [
                    {
                        "name": "burst_len",
                        "type": "int",
                        "description": "burst read length, must be supported by MC."
                    },
                    {
                        "name": "vec_len",
                        "type": "int",
                        "description": "number of items to be scanned as a vector from AXI port."
                    },
                    {
                        "name": "size0",
                        "type": "int",
                        "description": "size of column 0, in byte."
                    }
                ],
                "ports": [
                    {
                        "name": "c0vec_ptr",
                        "direction": "",
                        "type": "ap_uint< 8 *size0 *vec_len > *"
                    },
                    {
                        "name": "nrow",
                        "direction": "",
                        "type": "const int"
                    },
                    {
                        "name": "c0_strm",
                        "direction": "",
                        "type": "hls::stream< ap_uint< 8 *size0 > > &"
                    },
                    {
                        "name": "e_row_strm",
                        "direction": "",
                        "type": "hls::stream< bool > &"
                    }
                ]
            }
        },
        {
            "api_name": "xf::database::Eval",
            "spec": {
                "schema": "vitis_libraries_api_list_schema-1.0",
                "api_name": "xf::database::Eval",
                "display_name": "staticEval",
                "brief": "One stream input static evaluation.",
                "target_domain": "",
                "header_file_name": [
                    "static_eval.hpp"
                ],
                "search_paths": [
                    "L1/include/hw/xf_database"
                ],
                "instance": "function",
                "parameters": [
                    {
                        "name": "T",
                        "type": "typename",
                        "description": "the input stream type, inferred from argument"
                    },
                    {
                        "name": "T_O",
                        "type": "typename",
                        "description": "the output stream type, inferred from argument"
                    },
                    {
                        "name": "opf",
                        "type": "T_O(*)(T)",
                        "description": "the user-defined expression function"
                    }
                ],
                "ports": [
                    {
                        "name": "in_strm",
                        "direction": "",
                        "type": "hls::stream< T > &"
                    },
                    {
                        "name": "e_in_strm",
                        "direction": "",
                        "type": "hls::stream< T_O > &out_strm, hls::stream< bool > &e_out_strm"
                    },
                    {
                        "name": "out_strm",
                        "direction": "",
                        "type": "hls::stream< T_O > &"
                    },
                    {
                        "name": "e_out_strm",
                        "direction": "",
                        "type": ""
                    }
                ]
            }
        }
    ],
    "target_domain": ""
}